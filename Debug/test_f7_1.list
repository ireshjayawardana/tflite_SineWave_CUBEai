
test_f7_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  08007f00  08007f00  00017f00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008994  08008994  00020870  2**0
                  CONTENTS
  4 .ARM          00000008  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800899c  0800899c  00020870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000870  20000000  080089a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000870  08009214  00020870  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200009e8  08009214  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd43  00000000  00000000  0002089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002766  00000000  00000000  000305e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  000334d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294e9  00000000  00000000  00033e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001018f  00000000  00000000  0005d309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdc33  00000000  00000000  0006d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b0cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002368  00000000  00000000  0016b11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000071b3  00000000  00000000  0016d484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00174638  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00174704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000870 	.word	0x20000870
 800021c:	00000000 	.word	0x00000000
 8000220:	08007edc 	.word	0x08007edc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000874 	.word	0x20000874
 800023c:	08007edc 	.word	0x08007edc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005f4:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <MX_CRC_Init+0x24>)
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_CRC_Init+0x28>)
 80005fa:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	8083      	strh	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000600:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000604:	2301      	movs	r3, #1
 8000606:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000608:	f000 fb28 	bl	8000c5c <HAL_CRC_Init>
 800060c:	b118      	cbz	r0, 8000616 <MX_CRC_Init+0x22>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800060e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000612:	f000 b99d 	b.w	8000950 <Error_Handler>
}
 8000616:	bd08      	pop	{r3, pc}
 8000618:	2000088c 	.word	0x2000088c
 800061c:	40023000 	.word	0x40023000

08000620 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000620:	6802      	ldr	r2, [r0, #0]
{
 8000622:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_CRC_MspInit+0x28>)
 8000626:	429a      	cmp	r2, r3
 8000628:	d10b      	bne.n	8000642 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800062a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800062e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000636:	631a      	str	r2, [r3, #48]	; 0x30
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000642:	b002      	add	sp, #8
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40023000 	.word	0x40023000

0800064c <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_GPIO_Init+0x2c>)
{
 800064e:	b082      	sub	sp, #8
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800065e:	9200      	str	r2, [sp, #0]
 8000660:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000664:	f042 0208 	orr.w	r2, r2, #8
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	9b01      	ldr	r3, [sp, #4]

}
 8000674:	b002      	add	sp, #8
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b510      	push	{r4, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000680:	2214      	movs	r2, #20
 8000682:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	a808      	add	r0, sp, #32
 8000688:	f004 fdb2 	bl	80051f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	2214      	movs	r2, #20
 800068e:	2100      	movs	r1, #0
 8000690:	a802      	add	r0, sp, #8
 8000692:	f004 fdad 	bl	80051f0 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0x98>)
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069a:	2000      	movs	r0, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800069e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006a2:	641a      	str	r2, [r3, #64]	; 0x40
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a6:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	6813      	ldr	r3, [r2, #0]
 80006b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2310      	movs	r3, #16
 80006cc:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d6:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006de:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e0:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f000 fbfc 	bl	8000ee0 <HAL_RCC_OscConfig>
 80006e8:	b108      	cbz	r0, 80006ee <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f6:	2103      	movs	r1, #3
 80006f8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000706:	f000 fddf 	bl	80012c8 <HAL_RCC_ClockConfig>
 800070a:	b108      	cbz	r0, 8000710 <SystemClock_Config+0x94>
 800070c:	b672      	cpsid	i
  while (1)
 800070e:	e7fe      	b.n	800070e <SystemClock_Config+0x92>
}
 8000710:	b014      	add	sp, #80	; 0x50
 8000712:	bd10      	pop	{r4, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000
 800071c:	00000000 	.word	0x00000000

08000720 <main>:
{
 8000720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000724:	ed2d 8b04 	vpush	{d8-d9}
 8000728:	b0dc      	sub	sp, #368	; 0x170
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800072a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800072e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000732:	4a79      	ldr	r2, [pc, #484]	; (8000918 <main+0x1f8>)
 8000734:	2100      	movs	r1, #0
 8000736:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800073a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800073e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000742:	6953      	ldr	r3, [r2, #20]
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800074e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000752:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000756:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800075a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800075e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000766:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800076a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800076c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000770:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000772:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000776:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000778:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800077c:	d2f9      	bcs.n	8000772 <main+0x52>
    } while(sets-- != 0U);
 800077e:	3b20      	subs	r3, #32
 8000780:	f113 0f20 	cmn.w	r3, #32
 8000784:	d1f2      	bne.n	800076c <main+0x4c>
 8000786:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800078a:	6953      	ldr	r3, [r2, #20]
 800078c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000796:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800079a:	f000 f9d7 	bl	8000b4c <HAL_Init>
      const ai_handle acts[] = { activations };
 800079e:	ac3c      	add	r4, sp, #240	; 0xf0
  SystemClock_Config();
 80007a0:	f7ff ff6c 	bl	800067c <SystemClock_Config>
  MX_GPIO_Init();
 80007a4:	f7ff ff52 	bl	800064c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007a8:	f000 f920 	bl	80009ec <MX_USART3_UART_Init>
  MX_CRC_Init();
 80007ac:	f7ff ff22 	bl	80005f4 <MX_CRC_Init>
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 80007b0:	495a      	ldr	r1, [pc, #360]	; (800091c <main+0x1fc>)
 80007b2:	a802      	add	r0, sp, #8
 80007b4:	f005 fa76 	bl	8005ca4 <strcpy>
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	221a      	movs	r2, #26
 80007bc:	a902      	add	r1, sp, #8
 80007be:	4858      	ldr	r0, [pc, #352]	; (8000920 <main+0x200>)
 80007c0:	f001 fae5 	bl	8001d8e <HAL_UART_Transmit>
  ai_handle network = AI_HANDLE_NULL;
 80007c4:	2200      	movs	r2, #0
      err = ai_sine_model_create_and_init(&network, acts, NULL);
 80007c6:	a901      	add	r1, sp, #4
 80007c8:	4668      	mov	r0, sp
  ai_handle network = AI_HANDLE_NULL;
 80007ca:	9200      	str	r2, [sp, #0]
      const ai_handle acts[] = { activations };
 80007cc:	9401      	str	r4, [sp, #4]
      err = ai_sine_model_create_and_init(&network, acts, NULL);
 80007ce:	f001 fc85 	bl	80020dc <ai_sine_model_create_and_init>
      if (err.type != AI_ERROR_NONE) {
 80007d2:	b2c0      	uxtb	r0, r0
 80007d4:	2800      	cmp	r0, #0
 80007d6:	f000 8092 	beq.w	80008fe <main+0x1de>
		  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80007da:	4952      	ldr	r1, [pc, #328]	; (8000924 <main+0x204>)
 80007dc:	a802      	add	r0, sp, #8
 80007de:	f005 fa61 	bl	8005ca4 <strcpy>
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	2225      	movs	r2, #37	; 0x25
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80007e6:	a902      	add	r1, sp, #8
 80007e8:	484d      	ldr	r0, [pc, #308]	; (8000920 <main+0x200>)
 80007ea:	f001 fad0 	bl	8001d8e <HAL_UART_Transmit>
      ai_network_params ai_params = AI_NETWORK_PARAMS_INIT(AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()), AI_SINE_MODEL_DATA_ACTIVATIONS(activations));
 80007ee:	f001 fce5 	bl	80021bc <ai_sine_model_data_weights_get>
 80007f2:	4601      	mov	r1, r0
 80007f4:	a80f      	add	r0, sp, #60	; 0x3c
 80007f6:	f001 fccd 	bl	8002194 <ai_sine_model_data_weights_buffer_get>
 80007fa:	4621      	mov	r1, r4
 80007fc:	a816      	add	r0, sp, #88	; 0x58
 80007fe:	f001 fcb7 	bl	8002170 <ai_sine_model_data_activations_buffer_get>
      ai_sine_model_init(network, &ai_params);
 8000802:	a90f      	add	r1, sp, #60	; 0x3c
 8000804:	9800      	ldr	r0, [sp, #0]
 8000806:	f001 fbcf 	bl	8001fa8 <ai_sine_model_init>
      if (ai_sine_model_get_report(network, &report) != true) {
 800080a:	a91d      	add	r1, sp, #116	; 0x74
 800080c:	9800      	ldr	r0, [sp, #0]
 800080e:	f001 fb71 	bl	8001ef4 <ai_sine_model_get_report>
 8000812:	b948      	cbnz	r0, 8000828 <main+0x108>
    	  buf_len = sprintf(buf, "ai get report error\r\n");
 8000814:	4944      	ldr	r1, [pc, #272]	; (8000928 <main+0x208>)
 8000816:	a802      	add	r0, sp, #8
 8000818:	f005 fa44 	bl	8005ca4 <strcpy>
    	  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2215      	movs	r2, #21
 8000820:	a902      	add	r1, sp, #8
 8000822:	483f      	ldr	r0, [pc, #252]	; (8000920 <main+0x200>)
 8000824:	f001 fab3 	bl	8001d8e <HAL_UART_Transmit>
      buf_len = sprintf(buf, "Model name      : ");
 8000828:	4940      	ldr	r1, [pc, #256]	; (800092c <main+0x20c>)
 800082a:	a802      	add	r0, sp, #8
 800082c:	f005 fa3a 	bl	8005ca4 <strcpy>
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2212      	movs	r2, #18
 8000834:	a902      	add	r1, sp, #8
 8000836:	483a      	ldr	r0, [pc, #232]	; (8000920 <main+0x200>)
      ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000838:	243c      	movs	r4, #60	; 0x3c
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800083a:	f001 faa8 	bl	8001d8e <HAL_UART_Transmit>
      buf_len = sprintf(buf, report.model_name);
 800083e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000840:	a802      	add	r0, sp, #8
      ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000842:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8000948 <main+0x228>
      buf_len = sprintf(buf, report.model_name);
 8000846:	f005 fa0d 	bl	8005c64 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	b282      	uxth	r2, r0
 800084e:	a902      	add	r1, sp, #8
 8000850:	4833      	ldr	r0, [pc, #204]	; (8000920 <main+0x200>)
 8000852:	f001 fa9c 	bl	8001d8e <HAL_UART_Transmit>
      buf_len = sprintf(buf, "\nModel signature : ");
 8000856:	4936      	ldr	r1, [pc, #216]	; (8000930 <main+0x210>)
 8000858:	a802      	add	r0, sp, #8
      ai_output[0].data = AI_HANDLE_PTR(out_data);
 800085a:	4e36      	ldr	r6, [pc, #216]	; (8000934 <main+0x214>)
      buf_len = sprintf(buf, "\nModel signature : ");
 800085c:	f005 fa22 	bl	8005ca4 <strcpy>
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	2213      	movs	r2, #19
 8000864:	a902      	add	r1, sp, #8
 8000866:	482e      	ldr	r0, [pc, #184]	; (8000920 <main+0x200>)
 8000868:	f001 fa91 	bl	8001d8e <HAL_UART_Transmit>
      buf_len = sprintf(buf, report.model_signature);
 800086c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800086e:	a802      	add	r0, sp, #8
	  float x = 0.0f;
 8000870:	ed9f 8a31 	vldr	s16, [pc, #196]	; 8000938 <main+0x218>
      buf_len = sprintf(buf, report.model_signature);
 8000874:	f005 f9f6 	bl	8005c64 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	b282      	uxth	r2, r0
 800087c:	a902      	add	r1, sp, #8
 800087e:	4828      	ldr	r0, [pc, #160]	; (8000920 <main+0x200>)
 8000880:	f001 fa85 	bl	8001d8e <HAL_UART_Transmit>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000884:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800094c <main+0x22c>
			  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000888:	4d25      	ldr	r5, [pc, #148]	; (8000920 <main+0x200>)
		  x = x + 0.1;
 800088a:	ed9f 9b21 	vldr	d9, [pc, #132]	; 8000910 <main+0x1f0>
      ai_output = &report.outputs[0];
 800088e:	e9dd 782a 	ldrd	r7, r8, [sp, #168]	; 0xa8
      ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000892:	f8c7 9004 	str.w	r9, [r7, #4]
      ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000896:	f8c8 6004 	str.w	r6, [r8, #4]
		  x = x + 0.1;
 800089a:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
		  nbatch = ai_sine_model_run(network, &ai_input[0], &ai_output[0]);
 800089e:	4642      	mov	r2, r8
 80008a0:	4639      	mov	r1, r7
 80008a2:	9800      	ldr	r0, [sp, #0]
		  x = x + 0.1;
 80008a4:	ee37 7b09 	vadd.f64	d7, d7, d9
 80008a8:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
				((ai_float *)in_data)[i] = (ai_float)x;
 80008ac:	ed89 8a00 	vstr	s16, [r9]
		  nbatch = ai_sine_model_run(network, &ai_input[0], &ai_output[0]);
 80008b0:	f001 fc5b 	bl	800216a <ai_sine_model_run>
		  if (nbatch != 1) {
 80008b4:	2801      	cmp	r0, #1
 80008b6:	d009      	beq.n	80008cc <main+0x1ac>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80008b8:	4651      	mov	r1, sl
 80008ba:	a802      	add	r0, sp, #8
 80008bc:	f005 f9f2 	bl	8005ca4 <strcpy>
			  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	2220      	movs	r2, #32
 80008c4:	a902      	add	r1, sp, #8
 80008c6:	4628      	mov	r0, r5
 80008c8:	f001 fa61 	bl	8001d8e <HAL_UART_Transmit>
		  y_val = ((float *)out_data)[0];
 80008cc:	edd6 7a00 	vldr	s15, [r6]
		  buf_len = sprintf(buf, "%f \r\n",y_val);
 80008d0:	a802      	add	r0, sp, #8
		  y_val = ((float *)out_data)[0];
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <main+0x21c>)
		  buf_len = sprintf(buf, "%f \r\n",y_val);
 80008d4:	491a      	ldr	r1, [pc, #104]	; (8000940 <main+0x220>)
		  y_val = ((float *)out_data)[0];
 80008d6:	edc3 7a00 	vstr	s15, [r3]
		  buf_len = sprintf(buf, "%f \r\n",y_val);
 80008da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008de:	ec53 2b17 	vmov	r2, r3, d7
 80008e2:	f005 f9bf 	bl	8005c64 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	b282      	uxth	r2, r0
 80008ea:	a902      	add	r1, sp, #8
 80008ec:	4628      	mov	r0, r5
 80008ee:	f001 fa4e 	bl	8001d8e <HAL_UART_Transmit>
		  HAL_Delay (50);
 80008f2:	2032      	movs	r0, #50	; 0x32
 80008f4:	f000 f948 	bl	8000b88 <HAL_Delay>
	  for (int i = 0 ; i < 60; i++){
 80008f8:	3c01      	subs	r4, #1
 80008fa:	d1ce      	bne.n	800089a <main+0x17a>
	  while(1);
 80008fc:	e7fe      	b.n	80008fc <main+0x1dc>
		  buf_len = sprintf(buf, "success in create NN instance\r\n");
 80008fe:	4911      	ldr	r1, [pc, #68]	; (8000944 <main+0x224>)
 8000900:	a802      	add	r0, sp, #8
 8000902:	f005 f9cf 	bl	8005ca4 <strcpy>
		  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	221f      	movs	r2, #31
 800090a:	e76c      	b.n	80007e6 <main+0xc6>
 800090c:	f3af 8000 	nop.w
 8000910:	9999999a 	.word	0x9999999a
 8000914:	3fb99999 	.word	0x3fb99999
 8000918:	e000ed00 	.word	0xe000ed00
 800091c:	08007f20 	.word	0x08007f20
 8000920:	200008c0 	.word	0x200008c0
 8000924:	08007f3b 	.word	0x08007f3b
 8000928:	08007f81 	.word	0x08007f81
 800092c:	08007f97 	.word	0x08007f97
 8000930:	08007faa 	.word	0x08007faa
 8000934:	200008b4 	.word	0x200008b4
 8000938:	00000000 	.word	0x00000000
 800093c:	200008b8 	.word	0x200008b8
 8000940:	08007fdf 	.word	0x08007fdf
 8000944:	08007f61 	.word	0x08007f61
 8000948:	200008b0 	.word	0x200008b0
 800094c:	08007fbe 	.word	0x08007fbe

08000950 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <Error_Handler+0x2>

08000954 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_MspInit+0x2c>)
{
 8000956:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800095a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800095e:	641a      	str	r2, [r3, #64]	; 0x40
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000966:	9200      	str	r2, [sp, #0]
 8000968:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800096c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000970:	645a      	str	r2, [r3, #68]	; 0x44
 8000972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	b002      	add	sp, #8
 800097e:	4770      	bx	lr
 8000980:	40023800 	.word	0x40023800

08000984 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler>

08000986 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler>

08000988 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler>

0800098a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler>

0800098c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler>

0800098e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 b8e6 	b.w	8000b64 <HAL_IncTick>

08000998 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <_sbrk+0x30>)
{
 800099a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800099c:	6811      	ldr	r1, [r2, #0]
{
 800099e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80009a0:	b909      	cbnz	r1, 80009a6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80009a2:	490a      	ldr	r1, [pc, #40]	; (80009cc <_sbrk+0x34>)
 80009a4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	6810      	ldr	r0, [r2, #0]
 80009a8:	4909      	ldr	r1, [pc, #36]	; (80009d0 <_sbrk+0x38>)
 80009aa:	4c0a      	ldr	r4, [pc, #40]	; (80009d4 <_sbrk+0x3c>)
 80009ac:	4403      	add	r3, r0
 80009ae:	1b09      	subs	r1, r1, r4
 80009b0:	428b      	cmp	r3, r1
 80009b2:	d906      	bls.n	80009c2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80009b4:	f004 fbdc 	bl	8005170 <__errno>
 80009b8:	230c      	movs	r3, #12
 80009ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80009c0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80009c2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80009c4:	e7fc      	b.n	80009c0 <_sbrk+0x28>
 80009c6:	bf00      	nop
 80009c8:	200008bc 	.word	0x200008bc
 80009cc:	200009e8 	.word	0x200009e8
 80009d0:	20080000 	.word	0x20080000
 80009d4:	00000800 	.word	0x00000800

080009d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <SystemInit+0x10>)
 80009da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009ec:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ee:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 80009f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <MX_USART3_UART_Init+0x38>)
 80009f6:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0e:	f001 fa43 	bl	8001e98 <HAL_UART_Init>
 8000a12:	b118      	cbz	r0, 8000a1c <MX_USART3_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a18:	f7ff bf9a 	b.w	8000950 <Error_Handler>
}
 8000a1c:	bd08      	pop	{r3, pc}
 8000a1e:	bf00      	nop
 8000a20:	200008c0 	.word	0x200008c0
 8000a24:	40004800 	.word	0x40004800

08000a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a28:	b510      	push	{r4, lr}
 8000a2a:	b0ac      	sub	sp, #176	; 0xb0
 8000a2c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	2214      	movs	r2, #20
 8000a30:	2100      	movs	r1, #0
 8000a32:	a803      	add	r0, sp, #12
 8000a34:	f004 fbdc 	bl	80051f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a38:	2290      	movs	r2, #144	; 0x90
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	a808      	add	r0, sp, #32
 8000a3e:	f004 fbd7 	bl	80051f0 <memset>
  if(uartHandle->Instance==USART3)
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0x7c>)
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d12a      	bne.n	8000aa0 <HAL_UART_MspInit+0x78>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a50:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a52:	f000 fcf9 	bl	8001448 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	b108      	cbz	r0, 8000a5c <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8000a58:	f7ff ff7a 	bl	8000950 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_UART_MspInit+0x80>)
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a64:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40
 8000a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000a70:	9201      	str	r2, [sp, #4]
 8000a72:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a76:	f042 0208 	orr.w	r2, r2, #8
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a96:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a9a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f000 f93c 	bl	8000d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000aa0:	b02c      	add	sp, #176	; 0xb0
 8000aa2:	bd10      	pop	{r4, pc}
 8000aa4:	40004800 	.word	0x40004800
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab6:	490e      	ldr	r1, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000acc:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ada:	f7ff ff7d 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f004 fb4d 	bl	800517c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fe1d 	bl	8000720 <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 8000af4:	080089a4 	.word	0x080089a4
  ldr r2, =_sbss
 8000af8:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 8000afc:	200009e8 	.word	0x200009e8

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_InitTick+0x3c>)
{
 8000b08:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0x40>)
 8000b0c:	7818      	ldrb	r0, [r3, #0]
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b16:	6810      	ldr	r0, [r2, #0]
 8000b18:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b1c:	f000 f88a 	bl	8000c34 <HAL_SYSTICK_Config>
 8000b20:	4604      	mov	r4, r0
 8000b22:	b958      	cbnz	r0, 8000b3c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	2d0f      	cmp	r5, #15
 8000b26:	d809      	bhi.n	8000b3c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	4602      	mov	r2, r0
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f84e 	bl	8000bd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_InitTick+0x44>)
 8000b36:	4620      	mov	r0, r4
 8000b38:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b3a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	e7fc      	b.n	8000b3a <HAL_InitTick+0x36>
 8000b40:	20000004 	.word	0x20000004
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_Init>:
{
 8000b4c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f82c 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b54:	200f      	movs	r0, #15
 8000b56:	f7ff ffd5 	bl	8000b04 <HAL_InitTick>
  HAL_MspInit();
 8000b5a:	f7ff fefb 	bl	8000954 <HAL_MspInit>
}
 8000b5e:	2000      	movs	r0, #0
 8000b60:	bd08      	pop	{r3, pc}
	...

08000b64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b64:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <HAL_IncTick+0x10>)
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_IncTick+0x14>)
 8000b68:	6811      	ldr	r1, [r2, #0]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000948 	.word	0x20000948
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b7c:	4b01      	ldr	r3, [pc, #4]	; (8000b84 <HAL_GetTick+0x8>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000948 	.word	0x20000948

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b538      	push	{r3, r4, r5, lr}
 8000b8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b8c:	f7ff fff6 	bl	8000b7c <HAL_GetTick>
 8000b90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b94:	bf1e      	ittt	ne
 8000b96:	4b04      	ldrne	r3, [pc, #16]	; (8000ba8 <HAL_Delay+0x20>)
 8000b98:	781b      	ldrbne	r3, [r3, #0]
 8000b9a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	1b43      	subs	r3, r0, r5
 8000ba2:	42a3      	cmp	r3, r4
 8000ba4:	d3fa      	bcc.n	8000b9c <HAL_Delay+0x14>
  {
  }
}
 8000ba6:	bd38      	pop	{r3, r4, r5, pc}
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bae:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000bba:	0412      	lsls	r2, r2, #16
 8000bbc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bc8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd2:	b530      	push	{r4, r5, lr}
 8000bd4:	68dc      	ldr	r4, [r3, #12]
 8000bd6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bda:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	2d04      	cmp	r5, #4
 8000be2:	bf28      	it	cs
 8000be4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bec:	bf8c      	ite	hi
 8000bee:	3c03      	subhi	r4, #3
 8000bf0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	fa01 f104 	lsl.w	r1, r1, r4
 8000c08:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000c10:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000c12:	db06      	blt.n	8000c22 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c18:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c1c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c20:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	f000 000f 	and.w	r0, r0, #15
 8000c26:	4a02      	ldr	r2, [pc, #8]	; (8000c30 <HAL_NVIC_SetPriority+0x60>)
 8000c28:	5413      	strb	r3, [r2, r0]
 8000c2a:	e7f9      	b.n	8000c20 <HAL_NVIC_SetPriority+0x50>
 8000c2c:	e000ed00 	.word	0xe000ed00
 8000c30:	e000ed14 	.word	0xe000ed14

08000c34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	3801      	subs	r0, #1
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d20b      	bcs.n	8000c54 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <HAL_SYSTICK_Config+0x24>)
 8000c42:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c44:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c46:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c50:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c52:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c54:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c5c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c5e:	4604      	mov	r4, r0
 8000c60:	b908      	cbnz	r0, 8000c66 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8000c62:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000c64:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c66:	7f43      	ldrb	r3, [r0, #29]
 8000c68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c6c:	b913      	cbnz	r3, 8000c74 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8000c6e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000c70:	f7ff fcd6 	bl	8000620 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c74:	2302      	movs	r3, #2
 8000c76:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c78:	7923      	ldrb	r3, [r4, #4]
 8000c7a:	b9e3      	cbnz	r3, 8000cb6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <HAL_CRC_Init+0x70>)
 8000c80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	f022 0218 	bic.w	r2, r2, #24
 8000c88:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000c8a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000c8c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000c8e:	b9d2      	cbnz	r2, 8000cc6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000c94:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8000c96:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	6961      	ldr	r1, [r4, #20]
 8000c9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000ca0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000ca2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ca4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cac:	430a      	orrs	r2, r1
 8000cae:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8000cb4:	e7d6      	b.n	8000c64 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000cb6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_CRCEx_Polynomial_Set>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d0e2      	beq.n	8000c8a <HAL_CRC_Init+0x2e>
 8000cc4:	e7cd      	b.n	8000c62 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cc6:	6922      	ldr	r2, [r4, #16]
 8000cc8:	e7e4      	b.n	8000c94 <HAL_CRC_Init+0x38>
 8000cca:	bf00      	nop
 8000ccc:	04c11db7 	.word	0x04c11db7

08000cd0 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000cd0:	231f      	movs	r3, #31
{
 8000cd2:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	d31c      	bcc.n	8000d12 <HAL_CRCEx_Polynomial_Set+0x42>
 8000cd8:	fa21 f403 	lsr.w	r4, r1, r3
 8000cdc:	07e4      	lsls	r4, r4, #31
 8000cde:	d5f9      	bpl.n	8000cd4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8000ce0:	2a10      	cmp	r2, #16
 8000ce2:	d012      	beq.n	8000d0a <HAL_CRCEx_Polynomial_Set+0x3a>
 8000ce4:	d804      	bhi.n	8000cf0 <HAL_CRCEx_Polynomial_Set+0x20>
 8000ce6:	b13a      	cbz	r2, 8000cf8 <HAL_CRCEx_Polynomial_Set+0x28>
 8000ce8:	2a08      	cmp	r2, #8
 8000cea:	d010      	beq.n	8000d0e <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8000cec:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8000cee:	e00b      	b.n	8000d08 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8000cf0:	2a18      	cmp	r2, #24
 8000cf2:	d1fb      	bne.n	8000cec <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8000cf4:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8000cf6:	d8f9      	bhi.n	8000cec <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000cf8:	6800      	ldr	r0, [r0, #0]
 8000cfa:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000cfc:	6883      	ldr	r3, [r0, #8]
 8000cfe:	f023 0318 	bic.w	r3, r3, #24
 8000d02:	431a      	orrs	r2, r3
 8000d04:	6082      	str	r2, [r0, #8]
 8000d06:	2000      	movs	r0, #0
}
 8000d08:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	e7f3      	b.n	8000cf6 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	e7f1      	b.n	8000cf6 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	d1ea      	bne.n	8000cec <HAL_CRCEx_Polynomial_Set+0x1c>
 8000d16:	e7ef      	b.n	8000cf8 <HAL_CRCEx_Polynomial_Set+0x28>

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d1c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000edc <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d22:	4a6c      	ldr	r2, [pc, #432]	; (8000ed4 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8000d24:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000d28:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000d2e:	43ac      	bics	r4, r5
 8000d30:	f040 80b6 	bne.w	8000ea0 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d34:	684d      	ldr	r5, [r1, #4]
 8000d36:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d3a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d3c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d40:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d44:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d46:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	2f01      	cmp	r7, #1
 8000d4a:	d834      	bhi.n	8000db6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8000d4c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d4e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d52:	68cf      	ldr	r7, [r1, #12]
 8000d54:	fa07 f708 	lsl.w	r7, r7, r8
 8000d58:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000d5c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d5e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d60:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d64:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000d6e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d70:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d74:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d78:	688f      	ldr	r7, [r1, #8]
 8000d7a:	fa07 f708 	lsl.w	r7, r7, r8
 8000d7e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000d82:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	d119      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8000d86:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d8a:	f003 0b07 	and.w	fp, r3, #7
 8000d8e:	f04f 0e0f 	mov.w	lr, #15
 8000d92:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000d96:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000d9a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d9e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000da2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000da6:	690f      	ldr	r7, [r1, #16]
 8000da8:	fa07 f70b 	lsl.w	r7, r7, fp
 8000dac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8000db0:	f8ca 7020 	str.w	r7, [sl, #32]
 8000db4:	e001      	b.n	8000dba <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db6:	2c03      	cmp	r4, #3
 8000db8:	d1da      	bne.n	8000d70 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8000dba:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dbc:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dc4:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dc8:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8000dcc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dce:	d067      	beq.n	8000ea0 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000dd4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dd8:	f003 0703 	and.w	r7, r3, #3
 8000ddc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000de4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000de8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8000dee:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8000df2:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000df6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000dfa:	9401      	str	r4, [sp, #4]
 8000dfc:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dfe:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000e02:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e06:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e0a:	4c33      	ldr	r4, [pc, #204]	; (8000ed8 <HAL_GPIO_Init+0x1c0>)
 8000e0c:	42a0      	cmp	r0, r4
 8000e0e:	d04e      	beq.n	8000eae <HAL_GPIO_Init+0x196>
 8000e10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e14:	42a0      	cmp	r0, r4
 8000e16:	d04c      	beq.n	8000eb2 <HAL_GPIO_Init+0x19a>
 8000e18:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e1c:	42a0      	cmp	r0, r4
 8000e1e:	d04a      	beq.n	8000eb6 <HAL_GPIO_Init+0x19e>
 8000e20:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e24:	42a0      	cmp	r0, r4
 8000e26:	d048      	beq.n	8000eba <HAL_GPIO_Init+0x1a2>
 8000e28:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e2c:	42a0      	cmp	r0, r4
 8000e2e:	d046      	beq.n	8000ebe <HAL_GPIO_Init+0x1a6>
 8000e30:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e34:	42a0      	cmp	r0, r4
 8000e36:	d044      	beq.n	8000ec2 <HAL_GPIO_Init+0x1aa>
 8000e38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e3c:	42a0      	cmp	r0, r4
 8000e3e:	d042      	beq.n	8000ec6 <HAL_GPIO_Init+0x1ae>
 8000e40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e44:	42a0      	cmp	r0, r4
 8000e46:	d040      	beq.n	8000eca <HAL_GPIO_Init+0x1b2>
 8000e48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e4c:	42a0      	cmp	r0, r4
 8000e4e:	d03e      	beq.n	8000ece <HAL_GPIO_Init+0x1b6>
 8000e50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e54:	42a0      	cmp	r0, r4
 8000e56:	bf0c      	ite	eq
 8000e58:	2409      	moveq	r4, #9
 8000e5a:	240a      	movne	r4, #10
 8000e5c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e60:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e64:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8000e6a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e6c:	bf54      	ite	pl
 8000e6e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000e70:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e74:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8000e76:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8000e78:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	bf54      	ite	pl
 8000e7c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000e7e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e82:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8000e84:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8000e86:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	bf54      	ite	pl
 8000e8a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000e8c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e90:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8000e92:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8000e94:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e96:	bf54      	ite	pl
 8000e98:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000e9a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000e9e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	f47f af3e 	bne.w	8000d24 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000ea8:	b003      	add	sp, #12
 8000eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eae:	2400      	movs	r4, #0
 8000eb0:	e7d4      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000eb2:	2401      	movs	r4, #1
 8000eb4:	e7d2      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000eb6:	2402      	movs	r4, #2
 8000eb8:	e7d0      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000eba:	2403      	movs	r4, #3
 8000ebc:	e7ce      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000ebe:	2404      	movs	r4, #4
 8000ec0:	e7cc      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000ec2:	2405      	movs	r4, #5
 8000ec4:	e7ca      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000ec6:	2406      	movs	r4, #6
 8000ec8:	e7c8      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000eca:	2407      	movs	r4, #7
 8000ecc:	e7c6      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000ece:	2408      	movs	r4, #8
 8000ed0:	e7c4      	b.n	8000e5c <HAL_GPIO_Init+0x144>
 8000ed2:	bf00      	nop
 8000ed4:	40013c00 	.word	0x40013c00
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	b340      	cbz	r0, 8000f3a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee8:	6803      	ldr	r3, [r0, #0]
 8000eea:	07db      	lsls	r3, r3, #31
 8000eec:	d410      	bmi.n	8000f10 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	079f      	lsls	r7, r3, #30
 8000ef2:	d464      	bmi.n	8000fbe <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	0719      	lsls	r1, r3, #28
 8000ef8:	f100 80aa 	bmi.w	8001050 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	075a      	lsls	r2, r3, #29
 8000f00:	f100 80cb 	bmi.w	800109a <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f04:	69a2      	ldr	r2, [r4, #24]
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	f040 8134 	bne.w	8001174 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	e02b      	b.n	8000f68 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f10:	4b96      	ldr	r3, [pc, #600]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	f002 020c 	and.w	r2, r2, #12
 8000f18:	2a04      	cmp	r2, #4
 8000f1a:	d007      	beq.n	8000f2c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	f002 020c 	and.w	r2, r2, #12
 8000f22:	2a08      	cmp	r2, #8
 8000f24:	d10b      	bne.n	8000f3e <HAL_RCC_OscConfig+0x5e>
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	0256      	lsls	r6, r2, #9
 8000f2a:	d508      	bpl.n	8000f3e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	4b8f      	ldr	r3, [pc, #572]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	039d      	lsls	r5, r3, #14
 8000f32:	d5dc      	bpl.n	8000eee <HAL_RCC_OscConfig+0xe>
 8000f34:	6863      	ldr	r3, [r4, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1d9      	bne.n	8000eee <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	e014      	b.n	8000f68 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3e:	6862      	ldr	r2, [r4, #4]
 8000f40:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f44:	d113      	bne.n	8000f6e <HAL_RCC_OscConfig+0x8e>
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fe15 	bl	8000b7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	4e86      	ldr	r6, [pc, #536]	; (800116c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000f54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f56:	6833      	ldr	r3, [r6, #0]
 8000f58:	0398      	lsls	r0, r3, #14
 8000f5a:	d4c8      	bmi.n	8000eee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fe0e 	bl	8000b7c <HAL_GetTick>
 8000f60:	1b40      	subs	r0, r0, r5
 8000f62:	2864      	cmp	r0, #100	; 0x64
 8000f64:	d9f7      	bls.n	8000f56 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000f66:	2003      	movs	r0, #3
}
 8000f68:	b002      	add	sp, #8
 8000f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6e:	4d7f      	ldr	r5, [pc, #508]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	b992      	cbnz	r2, 8000f9a <HAL_RCC_OscConfig+0xba>
 8000f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f78:	602b      	str	r3, [r5, #0]
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f82:	f7ff fdfb 	bl	8000b7c <HAL_GetTick>
 8000f86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	0399      	lsls	r1, r3, #14
 8000f8c:	d5af      	bpl.n	8000eee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fdf5 	bl	8000b7c <HAL_GetTick>
 8000f92:	1b80      	subs	r0, r0, r6
 8000f94:	2864      	cmp	r0, #100	; 0x64
 8000f96:	d9f7      	bls.n	8000f88 <HAL_RCC_OscConfig+0xa8>
 8000f98:	e7e5      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f9e:	d107      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xd0>
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	602b      	str	r3, [r5, #0]
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	602b      	str	r3, [r5, #0]
 8000fae:	e7ce      	b.n	8000f4e <HAL_RCC_OscConfig+0x6e>
 8000fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	682b      	ldr	r3, [r5, #0]
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	e7f6      	b.n	8000fac <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fbe:	4b6b      	ldr	r3, [pc, #428]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	f012 0f0c 	tst.w	r2, #12
 8000fc6:	d007      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	f002 020c 	and.w	r2, r2, #12
 8000fce:	2a08      	cmp	r2, #8
 8000fd0:	d111      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x116>
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	0252      	lsls	r2, r2, #9
 8000fd6:	d40e      	bmi.n	8000ff6 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd8:	4a64      	ldr	r2, [pc, #400]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	079b      	lsls	r3, r3, #30
 8000fde:	d502      	bpl.n	8000fe6 <HAL_RCC_OscConfig+0x106>
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d1a9      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	6813      	ldr	r3, [r2, #0]
 8000fe8:	6921      	ldr	r1, [r4, #16]
 8000fea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ff2:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff4:	e77e      	b.n	8000ef4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ff6:	68e2      	ldr	r2, [r4, #12]
 8000ff8:	b1c2      	cbz	r2, 800102c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8000ffa:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	4d5b      	ldr	r5, [pc, #364]	; (800116c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001004:	f7ff fdba 	bl	8000b7c <HAL_GetTick>
 8001008:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	079f      	lsls	r7, r3, #30
 800100e:	d507      	bpl.n	8001020 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	6922      	ldr	r2, [r4, #16]
 8001014:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001018:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800101c:	602b      	str	r3, [r5, #0]
 800101e:	e769      	b.n	8000ef4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fdac 	bl	8000b7c <HAL_GetTick>
 8001024:	1b80      	subs	r0, r0, r6
 8001026:	2802      	cmp	r0, #2
 8001028:	d9ef      	bls.n	800100a <HAL_RCC_OscConfig+0x12a>
 800102a:	e79c      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800102c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102e:	4e4f      	ldr	r6, [pc, #316]	; (800116c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001036:	f7ff fda1 	bl	8000b7c <HAL_GetTick>
 800103a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103c:	6833      	ldr	r3, [r6, #0]
 800103e:	0798      	lsls	r0, r3, #30
 8001040:	f57f af58 	bpl.w	8000ef4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001044:	f7ff fd9a 	bl	8000b7c <HAL_GetTick>
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	2802      	cmp	r0, #2
 800104c:	d9f6      	bls.n	800103c <HAL_RCC_OscConfig+0x15c>
 800104e:	e78a      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001050:	6963      	ldr	r3, [r4, #20]
 8001052:	4d46      	ldr	r5, [pc, #280]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 8001054:	b183      	cbz	r3, 8001078 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8001056:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800105e:	f7ff fd8d 	bl	8000b7c <HAL_GetTick>
 8001062:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001064:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001066:	079b      	lsls	r3, r3, #30
 8001068:	f53f af48 	bmi.w	8000efc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fd86 	bl	8000b7c <HAL_GetTick>
 8001070:	1b80      	subs	r0, r0, r6
 8001072:	2802      	cmp	r0, #2
 8001074:	d9f6      	bls.n	8001064 <HAL_RCC_OscConfig+0x184>
 8001076:	e776      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001078:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001080:	f7ff fd7c 	bl	8000b7c <HAL_GetTick>
 8001084:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001086:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001088:	079f      	lsls	r7, r3, #30
 800108a:	f57f af37 	bpl.w	8000efc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108e:	f7ff fd75 	bl	8000b7c <HAL_GetTick>
 8001092:	1b80      	subs	r0, r0, r6
 8001094:	2802      	cmp	r0, #2
 8001096:	d9f6      	bls.n	8001086 <HAL_RCC_OscConfig+0x1a6>
 8001098:	e765      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 800109c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109e:	00d0      	lsls	r0, r2, #3
 80010a0:	d427      	bmi.n	80010f2 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80010a4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010b6:	4d2e      	ldr	r5, [pc, #184]	; (8001170 <HAL_RCC_OscConfig+0x290>)
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	05d9      	lsls	r1, r3, #23
 80010bc:	d51b      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010be:	68a3      	ldr	r3, [r4, #8]
 80010c0:	4d2a      	ldr	r5, [pc, #168]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d127      	bne.n	8001116 <HAL_RCC_OscConfig+0x236>
 80010c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010d2:	f7ff fd53 	bl	8000b7c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d6:	4e25      	ldr	r6, [pc, #148]	; (800116c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80010d8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010da:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80010dc:	079b      	lsls	r3, r3, #30
 80010de:	d53f      	bpl.n	8001160 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80010e0:	2f00      	cmp	r7, #0
 80010e2:	f43f af0f 	beq.w	8000f04 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_RCC_OscConfig+0x28c>)
 80010e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	e708      	b.n	8000f04 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80010f2:	2700      	movs	r7, #0
 80010f4:	e7df      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80010fe:	f7ff fd3d 	bl	8000b7c <HAL_GetTick>
 8001102:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	05da      	lsls	r2, r3, #23
 8001108:	d4d9      	bmi.n	80010be <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110a:	f7ff fd37 	bl	8000b7c <HAL_GetTick>
 800110e:	1b80      	subs	r0, r0, r6
 8001110:	2864      	cmp	r0, #100	; 0x64
 8001112:	d9f7      	bls.n	8001104 <HAL_RCC_OscConfig+0x224>
 8001114:	e727      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001116:	b9ab      	cbnz	r3, 8001144 <HAL_RCC_OscConfig+0x264>
 8001118:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	672b      	str	r3, [r5, #112]	; 0x70
 8001124:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001126:	f023 0304 	bic.w	r3, r3, #4
 800112a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800112c:	f7ff fd26 	bl	8000b7c <HAL_GetTick>
 8001130:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001132:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001134:	0798      	lsls	r0, r3, #30
 8001136:	d5d3      	bpl.n	80010e0 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001138:	f7ff fd20 	bl	8000b7c <HAL_GetTick>
 800113c:	1b80      	subs	r0, r0, r6
 800113e:	4540      	cmp	r0, r8
 8001140:	d9f7      	bls.n	8001132 <HAL_RCC_OscConfig+0x252>
 8001142:	e710      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001144:	2b05      	cmp	r3, #5
 8001146:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001148:	d103      	bne.n	8001152 <HAL_RCC_OscConfig+0x272>
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	672b      	str	r3, [r5, #112]	; 0x70
 8001150:	e7b9      	b.n	80010c6 <HAL_RCC_OscConfig+0x1e6>
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	672b      	str	r3, [r5, #112]	; 0x70
 8001158:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800115a:	f023 0304 	bic.w	r3, r3, #4
 800115e:	e7b5      	b.n	80010cc <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001160:	f7ff fd0c 	bl	8000b7c <HAL_GetTick>
 8001164:	1b40      	subs	r0, r0, r5
 8001166:	4540      	cmp	r0, r8
 8001168:	d9b7      	bls.n	80010da <HAL_RCC_OscConfig+0x1fa>
 800116a:	e6fc      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001174:	4d3c      	ldr	r5, [pc, #240]	; (8001268 <HAL_RCC_OscConfig+0x388>)
 8001176:	68ab      	ldr	r3, [r5, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d042      	beq.n	8001206 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8001180:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001182:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001188:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800118a:	d12f      	bne.n	80011ec <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 800118c:	f7ff fcf6 	bl	8000b7c <HAL_GetTick>
 8001190:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	0199      	lsls	r1, r3, #6
 8001196:	d423      	bmi.n	80011e0 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001198:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800119c:	4313      	orrs	r3, r2
 800119e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011ac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80011b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011b2:	0852      	lsrs	r2, r2, #1
 80011b4:	3a01      	subs	r2, #1
 80011b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011c4:	f7ff fcda 	bl	8000b7c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c8:	4d27      	ldr	r5, [pc, #156]	; (8001268 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 80011ca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	019a      	lsls	r2, r3, #6
 80011d0:	f53f ae9c 	bmi.w	8000f0c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d4:	f7ff fcd2 	bl	8000b7c <HAL_GetTick>
 80011d8:	1b00      	subs	r0, r0, r4
 80011da:	2802      	cmp	r0, #2
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCC_OscConfig+0x2ec>
 80011de:	e6c2      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff fccc 	bl	8000b7c <HAL_GetTick>
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	2802      	cmp	r0, #2
 80011e8:	d9d3      	bls.n	8001192 <HAL_RCC_OscConfig+0x2b2>
 80011ea:	e6bc      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80011ec:	f7ff fcc6 	bl	8000b7c <HAL_GetTick>
 80011f0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	019b      	lsls	r3, r3, #6
 80011f6:	f57f ae89 	bpl.w	8000f0c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fa:	f7ff fcbf 	bl	8000b7c <HAL_GetTick>
 80011fe:	1b00      	subs	r0, r0, r4
 8001200:	2802      	cmp	r0, #2
 8001202:	d9f6      	bls.n	80011f2 <HAL_RCC_OscConfig+0x312>
 8001204:	e6af      	b.n	8000f66 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001206:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001208:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800120a:	f43f ae96 	beq.w	8000f3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001212:	69e1      	ldr	r1, [r4, #28]
 8001214:	428a      	cmp	r2, r1
 8001216:	f47f ae90 	bne.w	8000f3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800121a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	6a21      	ldr	r1, [r4, #32]
 8001220:	428a      	cmp	r2, r1
 8001222:	f47f ae8a 	bne.w	8000f3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001226:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800122a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800122c:	401a      	ands	r2, r3
 800122e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001232:	f47f ae82 	bne.w	8000f3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001236:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001238:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800123c:	0852      	lsrs	r2, r2, #1
 800123e:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001240:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001244:	f47f ae79 	bne.w	8000f3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001248:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800124c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800124e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001252:	f47f ae72 	bne.w	8000f3a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001256:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800125a:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800125c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001260:	f43f ae54 	beq.w	8000f0c <HAL_RCC_OscConfig+0x2c>
 8001264:	e669      	b.n	8000f3a <HAL_RCC_OscConfig+0x5a>
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800126c:	4913      	ldr	r1, [pc, #76]	; (80012bc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800126e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001270:	688b      	ldr	r3, [r1, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d01b      	beq.n	80012b2 <HAL_RCC_GetSysClockFreq+0x46>
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11b      	bne.n	80012b6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800127e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001280:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001282:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001284:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001288:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800128c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001290:	bf1a      	itte	ne
 8001292:	480b      	ldrne	r0, [pc, #44]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x54>)
 8001294:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001296:	480b      	ldreq	r0, [pc, #44]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001298:	fba1 0100 	umull	r0, r1, r1, r0
 800129c:	f7ff f828 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_RCC_GetSysClockFreq+0x50>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012a8:	3301      	adds	r3, #1
 80012aa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80012ac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012b0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x54>)
 80012b4:	e7fc      	b.n	80012b0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80012b8:	e7fa      	b.n	80012b0 <HAL_RCC_GetSysClockFreq+0x44>
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	007a1200 	.word	0x007a1200
 80012c4:	00f42400 	.word	0x00f42400

080012c8 <HAL_RCC_ClockConfig>:
{
 80012c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012cc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80012ce:	4604      	mov	r4, r0
 80012d0:	b910      	cbnz	r0, 80012d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80012d2:	2001      	movs	r0, #1
}
 80012d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d8:	4a46      	ldr	r2, [pc, #280]	; (80013f4 <HAL_RCC_ClockConfig+0x12c>)
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d328      	bcc.n	8001336 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e4:	6822      	ldr	r2, [r4, #0]
 80012e6:	0797      	lsls	r7, r2, #30
 80012e8:	d430      	bmi.n	800134c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ea:	07d0      	lsls	r0, r2, #31
 80012ec:	d444      	bmi.n	8001378 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ee:	4a41      	ldr	r2, [pc, #260]	; (80013f4 <HAL_RCC_ClockConfig+0x12c>)
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	42ab      	cmp	r3, r5
 80012f8:	d867      	bhi.n	80013ca <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fa:	6822      	ldr	r2, [r4, #0]
 80012fc:	0751      	lsls	r1, r2, #29
 80012fe:	d470      	bmi.n	80013e2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	0713      	lsls	r3, r2, #28
 8001302:	d507      	bpl.n	8001314 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001304:	4a3c      	ldr	r2, [pc, #240]	; (80013f8 <HAL_RCC_ClockConfig+0x130>)
 8001306:	6921      	ldr	r1, [r4, #16]
 8001308:	6893      	ldr	r3, [r2, #8]
 800130a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800130e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001312:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001314:	f7ff ffaa 	bl	800126c <HAL_RCC_GetSysClockFreq>
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_RCC_ClockConfig+0x130>)
 800131a:	4a38      	ldr	r2, [pc, #224]	; (80013fc <HAL_RCC_ClockConfig+0x134>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001322:	5cd3      	ldrb	r3, [r2, r3]
 8001324:	40d8      	lsrs	r0, r3
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_RCC_ClockConfig+0x138>)
 8001328:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCC_ClockConfig+0x13c>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f7ff fbe9 	bl	8000b04 <HAL_InitTick>
  return HAL_OK;
 8001332:	2000      	movs	r0, #0
 8001334:	e7ce      	b.n	80012d4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f023 030f 	bic.w	r3, r3, #15
 800133c:	430b      	orrs	r3, r1
 800133e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	428b      	cmp	r3, r1
 8001348:	d1c3      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xa>
 800134a:	e7cb      	b.n	80012e4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	f012 0f04 	tst.w	r2, #4
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_RCC_ClockConfig+0x130>)
 8001352:	d003      	beq.n	800135c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001354:	6899      	ldr	r1, [r3, #8]
 8001356:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800135a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135c:	0716      	lsls	r6, r2, #28
 800135e:	d503      	bpl.n	8001368 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001360:	6899      	ldr	r1, [r3, #8]
 8001362:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001366:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001368:	4923      	ldr	r1, [pc, #140]	; (80013f8 <HAL_RCC_ClockConfig+0x130>)
 800136a:	68a0      	ldr	r0, [r4, #8]
 800136c:	688b      	ldr	r3, [r1, #8]
 800136e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001372:	4303      	orrs	r3, r0
 8001374:	608b      	str	r3, [r1, #8]
 8001376:	e7b8      	b.n	80012ea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001378:	6861      	ldr	r1, [r4, #4]
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <HAL_RCC_ClockConfig+0x130>)
 800137c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001380:	d11b      	bne.n	80013ba <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001386:	d0a4      	beq.n	80012d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001388:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	4f1a      	ldr	r7, [pc, #104]	; (80013f8 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001390:	f022 0203 	bic.w	r2, r2, #3
 8001394:	430a      	orrs	r2, r1
 8001396:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001398:	f7ff fbf0 	bl	8000b7c <HAL_GetTick>
 800139c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	6862      	ldr	r2, [r4, #4]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013aa:	d0a0      	beq.n	80012ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ac:	f7ff fbe6 	bl	8000b7c <HAL_GetTick>
 80013b0:	1b80      	subs	r0, r0, r6
 80013b2:	4540      	cmp	r0, r8
 80013b4:	d9f3      	bls.n	800139e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80013b6:	2003      	movs	r0, #3
 80013b8:	e78c      	b.n	80012d4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ba:	2902      	cmp	r1, #2
 80013bc:	d102      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013be:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013c2:	e7e0      	b.n	8001386 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	f012 0f02 	tst.w	r2, #2
 80013c8:	e7dd      	b.n	8001386 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f023 030f 	bic.w	r3, r3, #15
 80013d0:	432b      	orrs	r3, r5
 80013d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	42ab      	cmp	r3, r5
 80013dc:	f47f af79 	bne.w	80012d2 <HAL_RCC_ClockConfig+0xa>
 80013e0:	e78b      	b.n	80012fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e2:	4905      	ldr	r1, [pc, #20]	; (80013f8 <HAL_RCC_ClockConfig+0x130>)
 80013e4:	68e0      	ldr	r0, [r4, #12]
 80013e6:	688b      	ldr	r3, [r1, #8]
 80013e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013ec:	4303      	orrs	r3, r0
 80013ee:	608b      	str	r3, [r1, #8]
 80013f0:	e786      	b.n	8001300 <HAL_RCC_ClockConfig+0x38>
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00
 80013f8:	40023800 	.word	0x40023800
 80013fc:	08007fe5 	.word	0x08007fe5
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008

08001408 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_RCC_GetPCLK1Freq+0x14>)
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <HAL_RCC_GetPCLK1Freq+0x18>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	4a03      	ldr	r2, [pc, #12]	; (8001424 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001416:	6810      	ldr	r0, [r2, #0]
}
 8001418:	40d8      	lsrs	r0, r3
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800
 8001420:	08007ff5 	.word	0x08007ff5
 8001424:	20000000 	.word	0x20000000

08001428 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_RCC_GetPCLK2Freq+0x14>)
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_RCC_GetPCLK2Freq+0x18>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001436:	6810      	ldr	r0, [r2, #0]
}
 8001438:	40d8      	lsrs	r0, r3
 800143a:	4770      	bx	lr
 800143c:	40023800 	.word	0x40023800
 8001440:	08007ff5 	.word	0x08007ff5
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001448:	6803      	ldr	r3, [r0, #0]
{
 800144a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800144e:	f013 0601 	ands.w	r6, r3, #1
{
 8001452:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001454:	d00b      	beq.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001456:	4ab0      	ldr	r2, [pc, #704]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001458:	6891      	ldr	r1, [r2, #8]
 800145a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800145e:	6091      	str	r1, [r2, #8]
 8001460:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001462:	6891      	ldr	r1, [r2, #8]
 8001464:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001466:	fab6 f686 	clz	r6, r6
 800146a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800146c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800146e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001472:	d012      	beq.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001474:	49a8      	ldr	r1, [pc, #672]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001476:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001478:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800147c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001480:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001484:	bf08      	it	eq
 8001486:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001488:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800148c:	bf16      	itet	ne
 800148e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001492:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001494:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001496:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800149a:	02d9      	lsls	r1, r3, #11
 800149c:	d510      	bpl.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800149e:	489e      	ldr	r0, [pc, #632]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80014a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80014a2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80014aa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80014ae:	ea42 0201 	orr.w	r2, r2, r1
 80014b2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014b6:	f000 81a7 	beq.w	8001808 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80014ba:	2900      	cmp	r1, #0
 80014bc:	bf08      	it	eq
 80014be:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80014c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014c4:	bf18      	it	ne
 80014c6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014c8:	069a      	lsls	r2, r3, #26
 80014ca:	d531      	bpl.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	4b92      	ldr	r3, [pc, #584]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014ce:	4f93      	ldr	r7, [pc, #588]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014ea:	f7ff fb47 	bl	8000b7c <HAL_GetTick>
 80014ee:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	05db      	lsls	r3, r3, #23
 80014f4:	f140 818a 	bpl.w	800180c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014f8:	4f87      	ldr	r7, [pc, #540]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80014fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014fc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001500:	f040 818f 	bne.w	8001822 <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001504:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001506:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800150a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800150e:	4a82      	ldr	r2, [pc, #520]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001510:	f040 81ad 	bne.w	800186e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8001514:	6891      	ldr	r1, [r2, #8]
 8001516:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800151a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800151e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001522:	4301      	orrs	r1, r0
 8001524:	6091      	str	r1, [r2, #8]
 8001526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800152c:	430b      	orrs	r3, r1
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	06da      	lsls	r2, r3, #27
 8001534:	d50c      	bpl.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001536:	4a78      	ldr	r2, [pc, #480]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001538:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800153c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001540:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001544:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001548:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800154a:	4301      	orrs	r1, r0
 800154c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001550:	045f      	lsls	r7, r3, #17
 8001552:	d508      	bpl.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001554:	4970      	ldr	r1, [pc, #448]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001556:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001558:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800155c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001560:	4302      	orrs	r2, r0
 8001562:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001566:	0418      	lsls	r0, r3, #16
 8001568:	d508      	bpl.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800156a:	496b      	ldr	r1, [pc, #428]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800156c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800156e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001572:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001576:	4302      	orrs	r2, r0
 8001578:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800157c:	03d9      	lsls	r1, r3, #15
 800157e:	d508      	bpl.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001580:	4965      	ldr	r1, [pc, #404]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001582:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001584:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001588:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800158c:	4302      	orrs	r2, r0
 800158e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001592:	039a      	lsls	r2, r3, #14
 8001594:	d508      	bpl.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001596:	4960      	ldr	r1, [pc, #384]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001598:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800159a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800159e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80015a2:	4302      	orrs	r2, r0
 80015a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015a8:	065f      	lsls	r7, r3, #25
 80015aa:	d508      	bpl.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015ac:	495a      	ldr	r1, [pc, #360]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80015ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80015b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015b4:	f022 0203 	bic.w	r2, r2, #3
 80015b8:	4302      	orrs	r2, r0
 80015ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015be:	0618      	lsls	r0, r3, #24
 80015c0:	d508      	bpl.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015c2:	4955      	ldr	r1, [pc, #340]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80015c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80015c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015ca:	f022 020c 	bic.w	r2, r2, #12
 80015ce:	4302      	orrs	r2, r0
 80015d0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80015d4:	05d9      	lsls	r1, r3, #23
 80015d6:	d508      	bpl.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015d8:	494f      	ldr	r1, [pc, #316]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80015da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80015dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015e0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80015e4:	4302      	orrs	r2, r0
 80015e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80015ea:	059a      	lsls	r2, r3, #22
 80015ec:	d508      	bpl.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80015ee:	494a      	ldr	r1, [pc, #296]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80015f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80015f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80015fa:	4302      	orrs	r2, r0
 80015fc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001600:	055f      	lsls	r7, r3, #21
 8001602:	d508      	bpl.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001604:	4944      	ldr	r1, [pc, #272]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001608:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800160c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001610:	4302      	orrs	r2, r0
 8001612:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001616:	0518      	lsls	r0, r3, #20
 8001618:	d508      	bpl.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800161a:	493f      	ldr	r1, [pc, #252]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800161c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800161e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001622:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001626:	4302      	orrs	r2, r0
 8001628:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800162c:	04d9      	lsls	r1, r3, #19
 800162e:	d508      	bpl.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001630:	4939      	ldr	r1, [pc, #228]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001632:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001634:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001638:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800163c:	4302      	orrs	r2, r0
 800163e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001642:	049a      	lsls	r2, r3, #18
 8001644:	d508      	bpl.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001646:	4934      	ldr	r1, [pc, #208]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001648:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800164a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800164e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001652:	4302      	orrs	r2, r0
 8001654:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001658:	025f      	lsls	r7, r3, #9
 800165a:	d508      	bpl.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800165c:	492e      	ldr	r1, [pc, #184]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800165e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001660:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001664:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001668:	4302      	orrs	r2, r0
 800166a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800166e:	0298      	lsls	r0, r3, #10
 8001670:	d50c      	bpl.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001672:	4829      	ldr	r0, [pc, #164]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001674:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001676:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800167a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800167e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001682:	bf08      	it	eq
 8001684:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001686:	430a      	orrs	r2, r1
 8001688:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800168c:	f013 0f08 	tst.w	r3, #8
 8001690:	bf18      	it	ne
 8001692:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001694:	0359      	lsls	r1, r3, #13
 8001696:	d508      	bpl.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001698:	491f      	ldr	r1, [pc, #124]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800169a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800169c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016a4:	4302      	orrs	r2, r0
 80016a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80016aa:	021a      	lsls	r2, r3, #8
 80016ac:	d509      	bpl.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80016ae:	491a      	ldr	r1, [pc, #104]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80016b0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80016b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016b8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80016bc:	4302      	orrs	r2, r0
 80016be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80016c2:	015f      	lsls	r7, r3, #5
 80016c4:	d509      	bpl.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80016c6:	4914      	ldr	r1, [pc, #80]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80016c8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80016cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016d0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80016d4:	4302      	orrs	r2, r0
 80016d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80016da:	0118      	lsls	r0, r3, #4
 80016dc:	d509      	bpl.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80016e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80016e4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80016e8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80016ec:	4302      	orrs	r2, r0
 80016ee:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80016f2:	00d9      	lsls	r1, r3, #3
 80016f4:	d509      	bpl.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80016f8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80016fc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001700:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001704:	4302      	orrs	r2, r0
 8001706:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800170a:	2e01      	cmp	r6, #1
 800170c:	f000 80b3 	beq.w	8001876 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001710:	019a      	lsls	r2, r3, #6
 8001712:	f100 80b0 	bmi.w	8001876 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001716:	e003      	b.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001720:	2d01      	cmp	r5, #1
 8001722:	d16f      	bne.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001724:	4d9d      	ldr	r5, [pc, #628]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800172e:	f7ff fa25 	bl	8000b7c <HAL_GetTick>
 8001732:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	009f      	lsls	r7, r3, #2
 8001738:	f100 8121 	bmi.w	800197e <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	0316      	lsls	r6, r2, #12
 8001740:	d501      	bpl.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8001742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001744:	b11b      	cbz	r3, 800174e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8001746:	02d0      	lsls	r0, r2, #11
 8001748:	d51c      	bpl.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800174a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800174c:	b9d3      	cbnz	r3, 8001784 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800174e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001752:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800175a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800175e:	430b      	orrs	r3, r1
 8001760:	6961      	ldr	r1, [r4, #20]
 8001762:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001766:	69a1      	ldr	r1, [r4, #24]
 8001768:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800176c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001770:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001774:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001776:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800177a:	3901      	subs	r1, #1
 800177c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001780:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001784:	0291      	lsls	r1, r2, #10
 8001786:	d515      	bpl.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001788:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800178a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800178e:	d111      	bne.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001790:	4982      	ldr	r1, [pc, #520]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8001792:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001796:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800179a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800179e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80017a2:	4303      	orrs	r3, r0
 80017a4:	6960      	ldr	r0, [r4, #20]
 80017a6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80017aa:	6a20      	ldr	r0, [r4, #32]
 80017ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80017b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80017b4:	0712      	lsls	r2, r2, #28
 80017b6:	d519      	bpl.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80017b8:	4a78      	ldr	r2, [pc, #480]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80017ba:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80017be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80017c2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80017c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ca:	430b      	orrs	r3, r1
 80017cc:	6961      	ldr	r1, [r4, #20]
 80017ce:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80017d2:	69e1      	ldr	r1, [r4, #28]
 80017d4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80017dc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80017e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017e6:	430b      	orrs	r3, r1
 80017e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80017ec:	4c6b      	ldr	r4, [pc, #428]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f6:	f7ff f9c1 	bl	8000b7c <HAL_GetTick>
 80017fa:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	f140 80c4 	bpl.w	800198c <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	e009      	b.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8001808:	2601      	movs	r6, #1
 800180a:	e659      	b.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180c:	f7ff f9b6 	bl	8000b7c <HAL_GetTick>
 8001810:	eba0 0008 	sub.w	r0, r0, r8
 8001814:	2864      	cmp	r0, #100	; 0x64
 8001816:	f67f ae6b 	bls.w	80014f0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800181a:	2003      	movs	r0, #3
}
 800181c:	b003      	add	sp, #12
 800181e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001822:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001824:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001828:	4293      	cmp	r3, r2
 800182a:	f43f ae6b 	beq.w	8001504 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800182e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001830:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001836:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800183a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800183c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800183e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001842:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001844:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001848:	07d8      	lsls	r0, r3, #31
 800184a:	f57f ae5b 	bpl.w	8001504 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800184e:	f7ff f995 	bl	8000b7c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001856:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800185a:	0799      	lsls	r1, r3, #30
 800185c:	f53f ae52 	bmi.w	8001504 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff f98c 	bl	8000b7c <HAL_GetTick>
 8001864:	eba0 0008 	sub.w	r0, r0, r8
 8001868:	4548      	cmp	r0, r9
 800186a:	d9f5      	bls.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800186c:	e7d5      	b.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800186e:	6891      	ldr	r1, [r2, #8]
 8001870:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001874:	e656      	b.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001876:	4e49      	ldr	r6, [pc, #292]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8001878:	6833      	ldr	r3, [r6, #0]
 800187a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800187e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001880:	f7ff f97c 	bl	8000b7c <HAL_GetTick>
 8001884:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001886:	6833      	ldr	r3, [r6, #0]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	d472      	bmi.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	07d7      	lsls	r7, r2, #31
 8001890:	d512      	bpl.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8001892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001894:	b983      	cbnz	r3, 80018b8 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001896:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800189a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800189e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6861      	ldr	r1, [r4, #4]
 80018aa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80018ae:	68a1      	ldr	r1, [r4, #8]
 80018b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80018b4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018b8:	0316      	lsls	r6, r2, #12
 80018ba:	d503      	bpl.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80018bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018c2:	d005      	beq.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80018c4:	02d0      	lsls	r0, r2, #11
 80018c6:	d51e      	bpl.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ce:	d11a      	bne.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018d0:	4932      	ldr	r1, [pc, #200]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80018d2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018d6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80018da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018de:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80018e2:	4303      	orrs	r3, r0
 80018e4:	6860      	ldr	r0, [r4, #4]
 80018e6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80018ea:	68e0      	ldr	r0, [r4, #12]
 80018ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80018f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80018f4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80018f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018fa:	f020 001f 	bic.w	r0, r0, #31
 80018fe:	3b01      	subs	r3, #1
 8001900:	4303      	orrs	r3, r0
 8001902:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001906:	01d1      	lsls	r1, r2, #7
 8001908:	d511      	bpl.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800190a:	4924      	ldr	r1, [pc, #144]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800190c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001910:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001914:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001918:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800191c:	4303      	orrs	r3, r0
 800191e:	6860      	ldr	r0, [r4, #4]
 8001920:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001924:	6920      	ldr	r0, [r4, #16]
 8001926:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800192a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800192e:	0192      	lsls	r2, r2, #6
 8001930:	d50d      	bpl.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001932:	6923      	ldr	r3, [r4, #16]
 8001934:	6862      	ldr	r2, [r4, #4]
 8001936:	041b      	lsls	r3, r3, #16
 8001938:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800193c:	68e2      	ldr	r2, [r4, #12]
 800193e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001942:	68a2      	ldr	r2, [r4, #8]
 8001944:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800194a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800194e:	4e13      	ldr	r6, [pc, #76]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8001950:	6833      	ldr	r3, [r6, #0]
 8001952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001956:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001958:	f7ff f910 	bl	8000b7c <HAL_GetTick>
 800195c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800195e:	6833      	ldr	r3, [r6, #0]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	f53f aedd 	bmi.w	8001720 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001966:	f7ff f909 	bl	8000b7c <HAL_GetTick>
 800196a:	1bc0      	subs	r0, r0, r7
 800196c:	2864      	cmp	r0, #100	; 0x64
 800196e:	d9f6      	bls.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001970:	e753      	b.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001972:	f7ff f903 	bl	8000b7c <HAL_GetTick>
 8001976:	1bc0      	subs	r0, r0, r7
 8001978:	2864      	cmp	r0, #100	; 0x64
 800197a:	d984      	bls.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800197c:	e74d      	b.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800197e:	f7ff f8fd 	bl	8000b7c <HAL_GetTick>
 8001982:	1b80      	subs	r0, r0, r6
 8001984:	2864      	cmp	r0, #100	; 0x64
 8001986:	f67f aed5 	bls.w	8001734 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 800198a:	e746      	b.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800198c:	f7ff f8f6 	bl	8000b7c <HAL_GetTick>
 8001990:	1b40      	subs	r0, r0, r5
 8001992:	2864      	cmp	r0, #100	; 0x64
 8001994:	f67f af32 	bls.w	80017fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8001998:	e73f      	b.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019a4:	69c0      	ldr	r0, [r0, #28]
 80019a6:	6921      	ldr	r1, [r4, #16]
 80019a8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019aa:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019ac:	430a      	orrs	r2, r1
 80019ae:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019b0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019b2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019b4:	498e      	ldr	r1, [pc, #568]	; (8001bf0 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019b6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019b8:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80019ba:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019bc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019be:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80019cc:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019ce:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80019d0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019d2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019da:	4a86      	ldr	r2, [pc, #536]	; (8001bf4 <UART_SetConfig+0x254>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d117      	bne.n	8001a10 <UART_SetConfig+0x70>
 80019e0:	4b85      	ldr	r3, [pc, #532]	; (8001bf8 <UART_SetConfig+0x258>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f200 80e2 	bhi.w	8001bb6 <UART_SetConfig+0x216>
 80019f2:	4a82      	ldr	r2, [pc, #520]	; (8001bfc <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	f040 80b3 	bne.w	8001b64 <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d822      	bhi.n	8001a48 <UART_SetConfig+0xa8>
 8001a02:	e8df f003 	tbb	[pc, r3]
 8001a06:	db90      	.short	0xdb90
 8001a08:	21d52198 	.word	0x21d52198
 8001a0c:	2121      	.short	0x2121
 8001a0e:	99          	.byte	0x99
 8001a0f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a10:	4a7b      	ldr	r2, [pc, #492]	; (8001c00 <UART_SetConfig+0x260>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d106      	bne.n	8001a24 <UART_SetConfig+0x84>
 8001a16:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <UART_SetConfig+0x258>)
 8001a18:	4a7a      	ldr	r2, [pc, #488]	; (8001c04 <UART_SetConfig+0x264>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	e7e7      	b.n	80019f4 <UART_SetConfig+0x54>
 8001a24:	4a78      	ldr	r2, [pc, #480]	; (8001c08 <UART_SetConfig+0x268>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d118      	bne.n	8001a5c <UART_SetConfig+0xbc>
 8001a2a:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <UART_SetConfig+0x258>)
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a34:	2b20      	cmp	r3, #32
 8001a36:	f000 80b3 	beq.w	8001ba0 <UART_SetConfig+0x200>
 8001a3a:	d807      	bhi.n	8001a4c <UART_SetConfig+0xac>
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80c0 	beq.w	8001bc2 <UART_SetConfig+0x222>
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	f000 80b1 	beq.w	8001baa <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001a48:	2001      	movs	r0, #1
 8001a4a:	e070      	b.n	8001b2e <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a4c:	2b30      	cmp	r3, #48	; 0x30
 8001a4e:	d1fb      	bne.n	8001a48 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001a54:	d070      	beq.n	8001b38 <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a5a:	e0b9      	b.n	8001bd0 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a5c:	4a6b      	ldr	r2, [pc, #428]	; (8001c0c <UART_SetConfig+0x26c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10f      	bne.n	8001a82 <UART_SetConfig+0xe2>
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <UART_SetConfig+0x258>)
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a6c:	2b80      	cmp	r3, #128	; 0x80
 8001a6e:	f000 8097 	beq.w	8001ba0 <UART_SetConfig+0x200>
 8001a72:	d804      	bhi.n	8001a7e <UART_SetConfig+0xde>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80a4 	beq.w	8001bc2 <UART_SetConfig+0x222>
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	e7e2      	b.n	8001a44 <UART_SetConfig+0xa4>
 8001a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8001a80:	e7e5      	b.n	8001a4e <UART_SetConfig+0xae>
 8001a82:	4a63      	ldr	r2, [pc, #396]	; (8001c10 <UART_SetConfig+0x270>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d112      	bne.n	8001aae <UART_SetConfig+0x10e>
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <UART_SetConfig+0x258>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a96:	f000 8083 	beq.w	8001ba0 <UART_SetConfig+0x200>
 8001a9a:	d805      	bhi.n	8001aa8 <UART_SetConfig+0x108>
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8090 	beq.w	8001bc2 <UART_SetConfig+0x222>
 8001aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa6:	e7cd      	b.n	8001a44 <UART_SetConfig+0xa4>
 8001aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001aac:	e7cf      	b.n	8001a4e <UART_SetConfig+0xae>
 8001aae:	4a59      	ldr	r2, [pc, #356]	; (8001c14 <UART_SetConfig+0x274>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d110      	bne.n	8001ad6 <UART_SetConfig+0x136>
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <UART_SetConfig+0x258>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac2:	d06d      	beq.n	8001ba0 <UART_SetConfig+0x200>
 8001ac4:	d804      	bhi.n	8001ad0 <UART_SetConfig+0x130>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d075      	beq.n	8001bb6 <UART_SetConfig+0x216>
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	e7b9      	b.n	8001a44 <UART_SetConfig+0xa4>
 8001ad0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001ad4:	e7bb      	b.n	8001a4e <UART_SetConfig+0xae>
 8001ad6:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <UART_SetConfig+0x278>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d110      	bne.n	8001afe <UART_SetConfig+0x15e>
 8001adc:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <UART_SetConfig+0x258>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aea:	d059      	beq.n	8001ba0 <UART_SetConfig+0x200>
 8001aec:	d804      	bhi.n	8001af8 <UART_SetConfig+0x158>
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d067      	beq.n	8001bc2 <UART_SetConfig+0x222>
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af6:	e7a5      	b.n	8001a44 <UART_SetConfig+0xa4>
 8001af8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001afc:	e7a7      	b.n	8001a4e <UART_SetConfig+0xae>
 8001afe:	4a47      	ldr	r2, [pc, #284]	; (8001c1c <UART_SetConfig+0x27c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d1a1      	bne.n	8001a48 <UART_SetConfig+0xa8>
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <UART_SetConfig+0x258>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b12:	d045      	beq.n	8001ba0 <UART_SetConfig+0x200>
 8001b14:	d804      	bhi.n	8001b20 <UART_SetConfig+0x180>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d053      	beq.n	8001bc2 <UART_SetConfig+0x222>
 8001b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b1e:	e791      	b.n	8001a44 <UART_SetConfig+0xa4>
 8001b20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b24:	e793      	b.n	8001a4e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b26:	f7ff fc6f 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001b2a:	b928      	cbnz	r0, 8001b38 <UART_SetConfig+0x198>
 8001b2c:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b2e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001b30:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8001b36:	483a      	ldr	r0, [pc, #232]	; (8001c20 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b38:	6862      	ldr	r2, [r4, #4]
 8001b3a:	0853      	lsrs	r3, r2, #1
 8001b3c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b40:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b44:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b48:	f1a0 0210 	sub.w	r2, r0, #16
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f63f af7b 	bhi.w	8001a48 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b52:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b56:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8001b5a:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b5c:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8001b5e:	4318      	orrs	r0, r3
 8001b60:	60d0      	str	r0, [r2, #12]
 8001b62:	e7e3      	b.n	8001b2c <UART_SetConfig+0x18c>
    switch (clocksource)
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	f63f af6f 	bhi.w	8001a48 <UART_SetConfig+0xa8>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <UART_SetConfig+0x1d0>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001bc9 	.word	0x08001bc9
 8001b74:	08001b95 	.word	0x08001b95
 8001b78:	08001ba7 	.word	0x08001ba7
 8001b7c:	08001a49 	.word	0x08001a49
 8001b80:	08001b9b 	.word	0x08001b9b
 8001b84:	08001a49 	.word	0x08001a49
 8001b88:	08001a49 	.word	0x08001a49
 8001b8c:	08001a49 	.word	0x08001a49
 8001b90:	08001a57 	.word	0x08001a57
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b94:	f7ff fc48 	bl	8001428 <HAL_RCC_GetPCLK2Freq>
        break;
 8001b98:	e018      	b.n	8001bcc <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b9a:	f7ff fb67 	bl	800126c <HAL_RCC_GetSysClockFreq>
        break;
 8001b9e:	e015      	b.n	8001bcc <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ba0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001ba4:	d0c7      	beq.n	8001b36 <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 8001ba6:	481e      	ldr	r0, [pc, #120]	; (8001c20 <UART_SetConfig+0x280>)
 8001ba8:	e012      	b.n	8001bd0 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001baa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001bae:	d1f4      	bne.n	8001b9a <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8001bb0:	f7ff fb5c 	bl	800126c <HAL_RCC_GetSysClockFreq>
        break;
 8001bb4:	e7b9      	b.n	8001b2a <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bb6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001bba:	d1eb      	bne.n	8001b94 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001bbc:	f7ff fc34 	bl	8001428 <HAL_RCC_GetPCLK2Freq>
        break;
 8001bc0:	e7b3      	b.n	8001b2a <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bc2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001bc6:	d0ae      	beq.n	8001b26 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001bc8:	f7ff fc1e 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d0ad      	beq.n	8001b2c <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001bd0:	6862      	ldr	r2, [r4, #4]
 8001bd2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001bd6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bda:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001bde:	f1a3 0110 	sub.w	r1, r3, #16
 8001be2:	4291      	cmp	r1, r2
 8001be4:	f63f af30 	bhi.w	8001a48 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	60d3      	str	r3, [r2, #12]
 8001bec:	e79e      	b.n	8001b2c <UART_SetConfig+0x18c>
 8001bee:	bf00      	nop
 8001bf0:	efff69f3 	.word	0xefff69f3
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08007ffd 	.word	0x08007ffd
 8001c00:	40004400 	.word	0x40004400
 8001c04:	08008000 	.word	0x08008000
 8001c08:	40004800 	.word	0x40004800
 8001c0c:	40004c00 	.word	0x40004c00
 8001c10:	40005000 	.word	0x40005000
 8001c14:	40011400 	.word	0x40011400
 8001c18:	40007800 	.word	0x40007800
 8001c1c:	40007c00 	.word	0x40007c00
 8001c20:	00f42400 	.word	0x00f42400

08001c24 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c26:	07da      	lsls	r2, r3, #31
{
 8001c28:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c2a:	d506      	bpl.n	8001c3a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c2c:	6801      	ldr	r1, [r0, #0]
 8001c2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c30:	684a      	ldr	r2, [r1, #4]
 8001c32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c36:	4322      	orrs	r2, r4
 8001c38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c3a:	079c      	lsls	r4, r3, #30
 8001c3c:	d506      	bpl.n	8001c4c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c3e:	6801      	ldr	r1, [r0, #0]
 8001c40:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001c42:	684a      	ldr	r2, [r1, #4]
 8001c44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c48:	4322      	orrs	r2, r4
 8001c4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c4c:	0759      	lsls	r1, r3, #29
 8001c4e:	d506      	bpl.n	8001c5e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c50:	6801      	ldr	r1, [r0, #0]
 8001c52:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c54:	684a      	ldr	r2, [r1, #4]
 8001c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c5a:	4322      	orrs	r2, r4
 8001c5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c5e:	071a      	lsls	r2, r3, #28
 8001c60:	d506      	bpl.n	8001c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c62:	6801      	ldr	r1, [r0, #0]
 8001c64:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c66:	684a      	ldr	r2, [r1, #4]
 8001c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c6c:	4322      	orrs	r2, r4
 8001c6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c70:	06dc      	lsls	r4, r3, #27
 8001c72:	d506      	bpl.n	8001c82 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c74:	6801      	ldr	r1, [r0, #0]
 8001c76:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c78:	688a      	ldr	r2, [r1, #8]
 8001c7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c7e:	4322      	orrs	r2, r4
 8001c80:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c82:	0699      	lsls	r1, r3, #26
 8001c84:	d506      	bpl.n	8001c94 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c86:	6801      	ldr	r1, [r0, #0]
 8001c88:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c8a:	688a      	ldr	r2, [r1, #8]
 8001c8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c90:	4322      	orrs	r2, r4
 8001c92:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c94:	065a      	lsls	r2, r3, #25
 8001c96:	d510      	bpl.n	8001cba <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c98:	6801      	ldr	r1, [r0, #0]
 8001c9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c9c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c9e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ca2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001ca6:	ea42 0204 	orr.w	r2, r2, r4
 8001caa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cac:	d105      	bne.n	8001cba <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cae:	684a      	ldr	r2, [r1, #4]
 8001cb0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001cb2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001cb6:	4322      	orrs	r2, r4
 8001cb8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cba:	061b      	lsls	r3, r3, #24
 8001cbc:	d506      	bpl.n	8001ccc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cbe:	6802      	ldr	r2, [r0, #0]
 8001cc0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001cc2:	6853      	ldr	r3, [r2, #4]
 8001cc4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6053      	str	r3, [r2, #4]
  }
}
 8001ccc:	bd10      	pop	{r4, pc}

08001cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	460e      	mov	r6, r1
 8001cda:	4615      	mov	r5, r2
 8001cdc:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cde:	6822      	ldr	r2, [r4, #0]
 8001ce0:	69d3      	ldr	r3, [r2, #28]
 8001ce2:	ea36 0303 	bics.w	r3, r6, r3
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	42ab      	cmp	r3, r5
 8001cee:	d001      	beq.n	8001cf4 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	e026      	b.n	8001d42 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8001cf4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001cf8:	d0f2      	beq.n	8001ce0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfa:	f7fe ff3f 	bl	8000b7c <HAL_GetTick>
 8001cfe:	1bc0      	subs	r0, r0, r7
 8001d00:	4540      	cmp	r0, r8
 8001d02:	6820      	ldr	r0, [r4, #0]
 8001d04:	d802      	bhi.n	8001d0c <UART_WaitOnFlagUntilTimeout+0x3e>
 8001d06:	f1b8 0f00 	cmp.w	r8, #0
 8001d0a:	d11c      	bne.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d0c:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d14:	e840 3200 	strex	r2, r3, [r0]
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d1f7      	bne.n	8001d0c <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d1c:	f100 0308 	add.w	r3, r0, #8
 8001d20:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d28:	f100 0108 	add.w	r1, r0, #8
 8001d2c:	e841 3200 	strex	r2, r3, [r1]
 8001d30:	2a00      	cmp	r2, #0
 8001d32:	d1f3      	bne.n	8001d1c <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8001d34:	2320      	movs	r3, #32
 8001d36:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8001d38:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8001d3c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001d3e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8001d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d46:	6803      	ldr	r3, [r0, #0]
 8001d48:	075a      	lsls	r2, r3, #29
 8001d4a:	d5c8      	bpl.n	8001cde <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d4c:	69c3      	ldr	r3, [r0, #28]
 8001d4e:	051b      	lsls	r3, r3, #20
 8001d50:	d5c5      	bpl.n	8001cde <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d56:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d58:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d60:	e840 3200 	strex	r2, r3, [r0]
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d1f7      	bne.n	8001d58 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d68:	f100 0308 	add.w	r3, r0, #8
 8001d6c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d70:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d74:	f100 0108 	add.w	r1, r0, #8
 8001d78:	e841 3200 	strex	r2, r3, [r1]
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d1f3      	bne.n	8001d68 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8001d80:	2320      	movs	r3, #32
 8001d82:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8001d84:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8001d8c:	e7d6      	b.n	8001d3c <UART_WaitOnFlagUntilTimeout+0x6e>

08001d8e <HAL_UART_Transmit>:
{
 8001d8e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001d92:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d94:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8001d96:	4604      	mov	r4, r0
 8001d98:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001d9a:	2b20      	cmp	r3, #32
{
 8001d9c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d9e:	d142      	bne.n	8001e26 <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8001da0:	2900      	cmp	r1, #0
 8001da2:	d042      	beq.n	8001e2a <HAL_UART_Transmit+0x9c>
 8001da4:	2a00      	cmp	r2, #0
 8001da6:	d040      	beq.n	8001e2a <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001daa:	2500      	movs	r5, #0
 8001dac:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db0:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8001db2:	f7fe fee3 	bl	8000b7c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001db8:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8001dba:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dbe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001dc2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc6:	d103      	bne.n	8001dd0 <HAL_UART_Transmit+0x42>
 8001dc8:	6922      	ldr	r2, [r4, #16]
 8001dca:	b90a      	cbnz	r2, 8001dd0 <HAL_UART_Transmit+0x42>
 8001dcc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001dce:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8001dd0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	b93a      	cbnz	r2, 8001dec <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ddc:	2140      	movs	r1, #64	; 0x40
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ff75 	bl	8001cce <UART_WaitOnFlagUntilTimeout>
 8001de4:	b950      	cbnz	r0, 8001dfc <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8001de6:	2320      	movs	r3, #32
 8001de8:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8001dea:	e008      	b.n	8001dfe <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dec:	2200      	movs	r2, #0
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	4620      	mov	r0, r4
 8001df2:	9303      	str	r3, [sp, #12]
 8001df4:	f7ff ff6b 	bl	8001cce <UART_WaitOnFlagUntilTimeout>
 8001df8:	9b03      	ldr	r3, [sp, #12]
 8001dfa:	b118      	cbz	r0, 8001e04 <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 8001dfc:	2003      	movs	r0, #3
}
 8001dfe:	b004      	add	sp, #16
 8001e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e04:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8001e06:	b95e      	cbnz	r6, 8001e20 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e08:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e10:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8001e12:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001e16:	3a01      	subs	r2, #1
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8001e1e:	e7d7      	b.n	8001dd0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e20:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001e24:	e7f4      	b.n	8001e10 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001e26:	2002      	movs	r0, #2
 8001e28:	e7e9      	b.n	8001dfe <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	e7e7      	b.n	8001dfe <HAL_UART_Transmit+0x70>

08001e2e <UART_CheckIdleState>:
{
 8001e2e:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e30:	2500      	movs	r5, #0
{
 8001e32:	4604      	mov	r4, r0
 8001e34:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8001e3a:	f7fe fe9f 	bl	8000b7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e3e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001e40:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	0711      	lsls	r1, r2, #28
 8001e46:	d417      	bmi.n	8001e78 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	0752      	lsls	r2, r2, #29
 8001e4e:	d509      	bpl.n	8001e64 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e50:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001e54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e58:	4620      	mov	r0, r4
 8001e5a:	9200      	str	r2, [sp, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f7ff ff36 	bl	8001cce <UART_WaitOnFlagUntilTimeout>
 8001e62:	b9b0      	cbnz	r0, 8001e92 <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e64:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001e66:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e68:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8001e6c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001e6e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e72:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e74:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8001e76:	e00d      	b.n	8001e94 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e78:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001e7c:	9003      	str	r0, [sp, #12]
 8001e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e82:	4620      	mov	r0, r4
 8001e84:	9200      	str	r2, [sp, #0]
 8001e86:	462a      	mov	r2, r5
 8001e88:	f7ff ff21 	bl	8001cce <UART_WaitOnFlagUntilTimeout>
 8001e8c:	9b03      	ldr	r3, [sp, #12]
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d0da      	beq.n	8001e48 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001e92:	2003      	movs	r0, #3
}
 8001e94:	b005      	add	sp, #20
 8001e96:	bd30      	pop	{r4, r5, pc}

08001e98 <HAL_UART_Init>:
{
 8001e98:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	b340      	cbz	r0, 8001ef0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e9e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001ea0:	b91b      	cbnz	r3, 8001eaa <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001ea2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8001ea6:	f7fe fdbf 	bl	8000a28 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001eaa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001eac:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eae:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001eb0:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eba:	f7ff fd71 	bl	80019a0 <UART_SetConfig>
 8001ebe:	2801      	cmp	r0, #1
 8001ec0:	d016      	beq.n	8001ef0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ec4:	b113      	cbz	r3, 8001ecc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff feac 	bl	8001c24 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ecc:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001ece:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ede:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
}
 8001ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001eea:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001eec:	f7ff bf9f 	b.w	8001e2e <UART_CheckIdleState>
}
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <ai_sine_model_get_report>:


AI_API_ENTRY
ai_bool ai_sine_model_get_report(
  ai_handle network, ai_network_report* report)
{
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	460d      	mov	r5, r1
 8001ef8:	b0a0      	sub	sp, #128	; 0x80
 8001efa:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8001efc:	f000 fcba 	bl	8002874 <ai_platform_context_acquire>
 8001f00:	4604      	mov	r4, r0

  if (report && net_ctx)
 8001f02:	2d00      	cmp	r5, #0
 8001f04:	d033      	beq.n	8001f6e <ai_sine_model_get_report+0x7a>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d02e      	beq.n	8001f68 <ai_sine_model_get_report+0x74>
  {
    ai_network_report r = {
 8001f0a:	226c      	movs	r2, #108	; 0x6c
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	a805      	add	r0, sp, #20
 8001f10:	f003 f96e 	bl	80051f0 <memset>
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <ai_sine_model_get_report+0x80>)
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <ai_sine_model_get_report+0x84>)
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <ai_sine_model_get_report+0x88>)
 8001f1e:	9303      	str	r3, [sp, #12]
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <ai_sine_model_get_report+0x8c>)
 8001f22:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_SINE_MODEL_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8001f24:	f000 fa82 	bl	800242c <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8001f28:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8001f2a:	f000 faf9 	bl	8002520 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <ai_sine_model_get_report+0x90>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8001f30:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 8001f32:	9307      	str	r3, [sp, #28]
 8001f34:	f240 2307 	movw	r3, #519	; 0x207
 8001f38:	f8ad 3020 	strh.w	r3, [sp, #32]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8001f3c:	f000 fb7e 	bl	800263c <ai_platform_api_get_version>
 8001f40:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8001f42:	f000 fc09 	bl	8002758 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8001f46:	f240 1361 	movw	r3, #353	; 0x161
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8001f4a:	900b      	str	r0, [sp, #44]	; 0x2c
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8001f4c:	a901      	add	r1, sp, #4
 8001f4e:	4630      	mov	r0, r6
    ai_network_report r = {
 8001f50:	930c      	str	r3, [sp, #48]	; 0x30
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <ai_sine_model_get_report+0x94>)
 8001f54:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8001f56:	f000 fe05 	bl	8002b64 <ai_platform_api_get_network_report>
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	b120      	cbz	r0, 8001f68 <ai_sine_model_get_report+0x74>

    *report = r;
 8001f5e:	227c      	movs	r2, #124	; 0x7c
 8001f60:	a901      	add	r1, sp, #4
 8001f62:	4628      	mov	r0, r5
 8001f64:	f003 f936 	bl	80051d4 <memcpy>
    return true;
  }
  return false;
}
 8001f68:	4620      	mov	r0, r4
 8001f6a:	b020      	add	sp, #128	; 0x80
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8001f6e:	462c      	mov	r4, r5
 8001f70:	e7fa      	b.n	8001f68 <ai_sine_model_get_report+0x74>
 8001f72:	bf00      	nop
 8001f74:	0800800d 	.word	0x0800800d
 8001f78:	08008018 	.word	0x08008018
 8001f7c:	08008039 	.word	0x08008039
 8001f80:	08008052 	.word	0x08008052
 8001f84:	08007fe4 	.word	0x08007fe4
 8001f88:	a1facade 	.word	0xa1facade

08001f8c <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8001f8c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8001f8e:	2305      	movs	r3, #5
 8001f90:	2200      	movs	r2, #0
 8001f92:	e9cd 3200 	strd	r3, r2, [sp]
 8001f96:	2301      	movs	r3, #1
 8001f98:	4a02      	ldr	r2, [pc, #8]	; (8001fa4 <ai_sine_model_create+0x18>)
 8001f9a:	f001 f9f9 	bl	8003390 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8001f9e:	b003      	add	sp, #12
 8001fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fa4:	2000052c 	.word	0x2000052c

08001fa8 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8001fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fac:	4607      	mov	r7, r0
 8001fae:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8001fb0:	f001 fba2 	bl	80036f8 <ai_platform_network_init>
  if (!net_ctx) return false;
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d066      	beq.n	8002088 <ai_sine_model_init+0xe0>
  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 8001fba:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80020d4 <ai_sine_model_init+0x12c>
 8001fbe:	4632      	mov	r2, r6
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	f000 f968 	bl	8002298 <ai_platform_get_weights_map>
 8001fc8:	4605      	mov	r5, r0
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d05e      	beq.n	800208c <ai_sine_model_init+0xe4>
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001fce:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <ai_sine_model_init+0xfc>)
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fd6:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8001fd8:	f8d8 3000 	ldr.w	r3, [r8]
    dense_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8001fdc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001fe0:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <ai_sine_model_init+0x100>)
 8001fe2:	6811      	ldr	r1, [r2, #0]
 8001fe4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001fe8:	6011      	str	r1, [r2, #0]
    dense_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 8001fea:	f103 0140 	add.w	r1, r3, #64	; 0x40
    dense_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8001fee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8001ff2:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <ai_sine_model_init+0x104>)
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001ffa:	6011      	str	r1, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 8001ffc:	f103 0180 	add.w	r1, r3, #128	; 0x80
    dense_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 8002000:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <ai_sine_model_init+0x108>)
 8002006:	6811      	ldr	r1, [r2, #0]
 8002008:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800200c:	6011      	str	r1, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 800200e:	f503 6190 	add.w	r1, r3, #1152	; 0x480
    dense_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8002012:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8002016:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <ai_sine_model_init+0x10c>)
 8002018:	6811      	ldr	r1, [r2, #0]
 800201a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800201e:	6011      	str	r1, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8002020:	f503 6198 	add.w	r1, r3, #1216	; 0x4c0
    dense_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    dense_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8002028:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800202c:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <ai_sine_model_init+0x110>)
 800202e:	6811      	ldr	r1, [r2, #0]
 8002030:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8002034:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8002038:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 800203a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80020d8 <ai_sine_model_init+0x130>
 800203e:	4632      	mov	r2, r6
 8002040:	2101      	movs	r1, #1
 8002042:	4640      	mov	r0, r8
 8002044:	f000 f980 	bl	8002348 <ai_platform_get_activations_map>
 8002048:	4606      	mov	r6, r0
 800204a:	b328      	cbz	r0, 8002098 <ai_sine_model_init+0xf0>
    serving_default_dense_input0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 800204c:	f8d8 3000 	ldr.w	r3, [r8]
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <ai_sine_model_init+0x114>)
 8002052:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8002056:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800205a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800205e:	4918      	ldr	r1, [pc, #96]	; (80020c0 <ai_sine_model_init+0x118>)
    dense_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8002060:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8002064:	4917      	ldr	r1, [pc, #92]	; (80020c4 <ai_sine_model_init+0x11c>)
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8002066:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 800206a:	4917      	ldr	r1, [pc, #92]	; (80020c8 <ai_sine_model_init+0x120>)
    dense_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 800206c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8002070:	4916      	ldr	r1, [pc, #88]	; (80020cc <ai_sine_model_init+0x124>)
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8002072:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <ai_sine_model_init+0x128>)
    dense_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8002078:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= sine_model_configure_weights(net_ctx, params);
  ok &= sine_model_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800207c:	4638      	mov	r0, r7
 800207e:	f001 fcb7 	bl	80039f0 <ai_platform_network_post_init>
 8002082:	4030      	ands	r0, r6
 8002084:	4028      	ands	r0, r5
 8002086:	b2c0      	uxtb	r0, r0

  return ok;
}
 8002088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800208c:	2212      	movs	r2, #18
 800208e:	2130      	movs	r1, #48	; 0x30
 8002090:	4620      	mov	r0, r4
 8002092:	f000 fd61 	bl	8002b58 <ai_platform_network_set_error>
  return false;
 8002096:	e7d0      	b.n	800203a <ai_sine_model_init+0x92>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002098:	2213      	movs	r2, #19
 800209a:	2130      	movs	r1, #48	; 0x30
 800209c:	4620      	mov	r0, r4
 800209e:	f000 fd5b 	bl	8002b58 <ai_platform_network_set_error>
  return false;
 80020a2:	e7eb      	b.n	800207c <ai_sine_model_init+0xd4>
 80020a4:	200003dc 	.word	0x200003dc
 80020a8:	20000368 	.word	0x20000368
 80020ac:	2000047c 	.word	0x2000047c
 80020b0:	20000408 	.word	0x20000408
 80020b4:	2000051c 	.word	0x2000051c
 80020b8:	200004a8 	.word	0x200004a8
 80020bc:	2000062c 	.word	0x2000062c
 80020c0:	200003b0 	.word	0x200003b0
 80020c4:	200005b4 	.word	0x200005b4
 80020c8:	20000450 	.word	0x20000450
 80020cc:	20000600 	.word	0x20000600
 80020d0:	200004f0 	.word	0x200004f0
 80020d4:	200009d4 	.word	0x200009d4
 80020d8:	200009d0 	.word	0x200009d0

080020dc <ai_sine_model_create_and_init>:
{
 80020dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020e0:	4688      	mov	r8, r1
 80020e2:	b08f      	sub	sp, #60	; 0x3c
    err = ai_sine_model_create(network, AI_SINE_MODEL_DATA_CONFIG);
 80020e4:	2100      	movs	r1, #0
{
 80020e6:	4606      	mov	r6, r0
 80020e8:	4617      	mov	r7, r2
    err = ai_sine_model_create(network, AI_SINE_MODEL_DATA_CONFIG);
 80020ea:	f7ff ff4f 	bl	8001f8c <ai_sine_model_create>
    if (err.type != AI_ERROR_NONE)
 80020ee:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_sine_model_create(network, AI_SINE_MODEL_DATA_CONFIG);
 80020f2:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80020f4:	d001      	beq.n	80020fa <ai_sine_model_create_and_init+0x1e>
    return err;
 80020f6:	4620      	mov	r0, r4
 80020f8:	e006      	b.n	8002108 <ai_sine_model_create_and_init+0x2c>
    if (ai_sine_model_data_params_get(&params) != true) {
 80020fa:	4668      	mov	r0, sp
 80020fc:	f000 f862 	bl	80021c4 <ai_sine_model_data_params_get>
 8002100:	b928      	cbnz	r0, 800210e <ai_sine_model_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8002102:	6830      	ldr	r0, [r6, #0]
 8002104:	f000 fc36 	bl	8002974 <ai_platform_network_get_error>
}
 8002108:	b00f      	add	sp, #60	; 0x3c
 800210a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 800210e:	f1b8 0f00 	cmp.w	r8, #0
 8002112:	d11a      	bne.n	800214a <ai_sine_model_create_and_init+0x6e>
    if (weights) {
 8002114:	bb3f      	cbnz	r7, 8002166 <ai_sine_model_create_and_init+0x8a>
    if (ai_sine_model_init(*network, &params) != true) {
 8002116:	4669      	mov	r1, sp
 8002118:	6830      	ldr	r0, [r6, #0]
 800211a:	f7ff ff45 	bl	8001fa8 <ai_sine_model_init>
 800211e:	b928      	cbnz	r0, 800212c <ai_sine_model_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8002120:	6830      	ldr	r0, [r6, #0]
 8002122:	f000 fc27 	bl	8002974 <ai_platform_network_get_error>
 8002126:	4604      	mov	r4, r0
 8002128:	fa5f f980 	uxtb.w	r9, r0
    return err;
 800212c:	f369 0407 	bfi	r4, r9, #0, #8
 8002130:	e7e1      	b.n	80020f6 <ai_sine_model_create_and_init+0x1a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002132:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8002136:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002138:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800213a:	a803      	add	r0, sp, #12
 800213c:	f000 f898 	bl	8002270 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002140:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002144:	42ab      	cmp	r3, r5
 8002146:	dcf4      	bgt.n	8002132 <ai_sine_model_create_and_init+0x56>
 8002148:	e7e4      	b.n	8002114 <ai_sine_model_create_and_init+0x38>
 800214a:	464d      	mov	r5, r9
 800214c:	e7f8      	b.n	8002140 <ai_sine_model_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800214e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8002152:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002154:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002156:	a801      	add	r0, sp, #4
 8002158:	f000 f88a 	bl	8002270 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800215c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002160:	42ab      	cmp	r3, r5
 8002162:	dcf4      	bgt.n	800214e <ai_sine_model_create_and_init+0x72>
 8002164:	e7d7      	b.n	8002116 <ai_sine_model_create_and_init+0x3a>
 8002166:	2500      	movs	r5, #0
 8002168:	e7f8      	b.n	800215c <ai_sine_model_create_and_init+0x80>

0800216a <ai_sine_model_run>:

AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800216a:	f001 bd4d 	b.w	8003c08 <ai_platform_network_process>
	...

08002170 <ai_sine_model_data_activations_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <ai_sine_model_data_activations_buffer_get+0x20>)
{
 8002172:	b084      	sub	sp, #16
  return buf;
 8002174:	e9c0 2100 	strd	r2, r1, [r0]
 8002178:	2200      	movs	r2, #0
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	f8c0 d018 	str.w	sp, [r0, #24]
 8002180:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8002184:	f240 4201 	movw	r2, #1025	; 0x401
 8002188:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 800218c:	b004      	add	sp, #16
 800218e:	4770      	bx	lr
 8002190:	00040440 	.word	0x00040440

08002194 <ai_sine_model_data_weights_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8002194:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <ai_sine_model_data_weights_buffer_get+0x24>)
{
 8002196:	b084      	sub	sp, #16
  return buf;
 8002198:	e9c0 2100 	strd	r2, r1, [r0]
 800219c:	2200      	movs	r2, #0
 800219e:	f240 5104 	movw	r1, #1284	; 0x504
 80021a2:	f8c0 d018 	str.w	sp, [r0, #24]
 80021a6:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80021aa:	f240 4201 	movw	r2, #1025	; 0x401
 80021ae:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 80021b2:	b004      	add	sp, #16
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40040440 	.word	0x40040440

080021bc <ai_sine_model_data_weights_get>:
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
  return AI_HANDLE_PTR(g_sine_model_weights_table);

}
 80021bc:	4800      	ldr	r0, [pc, #0]	; (80021c0 <ai_sine_model_data_weights_get+0x4>)
 80021be:	4770      	bx	lr
 80021c0:	20000694 	.word	0x20000694

080021c4 <ai_sine_model_data_params_get>:
 * @ingroup sine_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_sine_model_data_params_get(ai_network_params* params)
{
 80021c4:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80021c6:	4603      	mov	r3, r0
{
 80021c8:	b085      	sub	sp, #20
  if (!params) return false;
 80021ca:	b170      	cbz	r0, 80021ea <ai_sine_model_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80021cc:	4c08      	ldr	r4, [pc, #32]	; (80021f0 <ai_sine_model_data_params_get+0x2c>)
 80021ce:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT, g_sine_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80021d0:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80021d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021d6:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80021da:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80021de:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SINE_MODEL_DATA_WEIGHTS_COUNT, g_sine_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80021e2:	4629      	mov	r1, r5
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f907 	bl	80023f8 <ai_platform_bind_network_params>
}
 80021ea:	b005      	add	sp, #20
 80021ec:	bd30      	pop	{r4, r5, pc}
 80021ee:	bf00      	nop
 80021f0:	08007f00 	.word	0x08007f00

080021f4 <ai_buffer_get_size>:
 80021f4:	b368      	cbz	r0, 8002252 <ai_buffer_get_size+0x5e>
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <ai_buffer_get_size+0x60>)
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <ai_buffer_get_size+0x64>)
 80021fa:	b410      	push	{r4}
 80021fc:	6804      	ldr	r4, [r0, #0]
 80021fe:	4023      	ands	r3, r4
 8002200:	4293      	cmp	r3, r2
 8002202:	d123      	bne.n	800224c <ai_buffer_get_size+0x58>
 8002204:	b311      	cbz	r1, 800224c <ai_buffer_get_size+0x58>
 8002206:	6984      	ldr	r4, [r0, #24]
 8002208:	6862      	ldr	r2, [r4, #4]
 800220a:	321f      	adds	r2, #31
 800220c:	f022 021f 	bic.w	r2, r2, #31
 8002210:	7d03      	ldrb	r3, [r0, #20]
 8002212:	6941      	ldr	r1, [r0, #20]
 8002214:	f1a3 0301 	sub.w	r3, r3, #1
 8002218:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8002226:	da0c      	bge.n	8002242 <ai_buffer_get_size+0x4e>
 8002228:	2b01      	cmp	r3, #1
 800222a:	d103      	bne.n	8002234 <ai_buffer_get_size+0x40>
 800222c:	2802      	cmp	r0, #2
 800222e:	f04f 0302 	mov.w	r3, #2
 8002232:	d006      	beq.n	8002242 <ai_buffer_get_size+0x4e>
 8002234:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002238:	3301      	adds	r3, #1
 800223a:	4298      	cmp	r0, r3
 800223c:	fb01 f202 	mul.w	r2, r1, r2
 8002240:	d1f2      	bne.n	8002228 <ai_buffer_get_size+0x34>
 8002242:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	6984      	ldr	r4, [r0, #24]
 800224e:	6862      	ldr	r2, [r4, #4]
 8002250:	e7de      	b.n	8002210 <ai_buffer_get_size+0x1c>
 8002252:	4770      	bx	lr
 8002254:	017fffff 	.word	0x017fffff
 8002258:	000400c0 	.word	0x000400c0

0800225c <ai_buffer_array_sane>:
 800225c:	b138      	cbz	r0, 800226e <ai_buffer_array_sane+0x12>
 800225e:	6843      	ldr	r3, [r0, #4]
 8002260:	b123      	cbz	r3, 800226c <ai_buffer_array_sane+0x10>
 8002262:	8840      	ldrh	r0, [r0, #2]
 8002264:	3800      	subs	r0, #0
 8002266:	bf18      	it	ne
 8002268:	2001      	movne	r0, #1
 800226a:	4770      	bx	lr
 800226c:	4618      	mov	r0, r3
 800226e:	4770      	bx	lr

08002270 <ai_buffer_array_item_set_address>:
 8002270:	b150      	cbz	r0, 8002288 <ai_buffer_array_item_set_address+0x18>
 8002272:	6843      	ldr	r3, [r0, #4]
 8002274:	b14b      	cbz	r3, 800228a <ai_buffer_array_item_set_address+0x1a>
 8002276:	8840      	ldrh	r0, [r0, #2]
 8002278:	b900      	cbnz	r0, 800227c <ai_buffer_array_item_set_address+0xc>
 800227a:	4770      	bx	lr
 800227c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002280:	2001      	movs	r0, #1
 8002282:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002286:	604a      	str	r2, [r1, #4]
 8002288:	4770      	bx	lr
 800228a:	4618      	mov	r0, r3
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop

08002290 <_ai_platform_acquire_crc>:
 8002290:	2001      	movs	r0, #1
 8002292:	4770      	bx	lr

08002294 <_ai_platform_release_crc>:
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <ai_platform_get_weights_map>:
 8002298:	2900      	cmp	r1, #0
 800229a:	bf18      	it	ne
 800229c:	2800      	cmpne	r0, #0
 800229e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a0:	bf0c      	ite	eq
 80022a2:	2401      	moveq	r4, #1
 80022a4:	2400      	movne	r4, #0
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	bf08      	it	eq
 80022aa:	f044 0401 	orreq.w	r4, r4, #1
 80022ae:	b114      	cbz	r4, 80022b6 <ai_platform_get_weights_map+0x1e>
 80022b0:	2400      	movs	r4, #0
 80022b2:	4620      	mov	r0, r4
 80022b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b6:	4616      	mov	r6, r2
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <ai_platform_get_weights_map+0xac>)
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	4605      	mov	r5, r0
 80022be:	460f      	mov	r7, r1
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d022      	beq.n	800230a <ai_platform_get_weights_map+0x72>
 80022c4:	6870      	ldr	r0, [r6, #4]
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d0f2      	beq.n	80022b0 <ai_platform_get_weights_map+0x18>
 80022ca:	6806      	ldr	r6, [r0, #0]
 80022cc:	429e      	cmp	r6, r3
 80022ce:	d006      	beq.n	80022de <ai_platform_get_weights_map+0x46>
 80022d0:	f1a1 0401 	sub.w	r4, r1, #1
 80022d4:	6028      	str	r0, [r5, #0]
 80022d6:	fab4 f484 	clz	r4, r4
 80022da:	0964      	lsrs	r4, r4, #5
 80022dc:	e7e9      	b.n	80022b2 <ai_platform_get_weights_map+0x1a>
 80022de:	3d04      	subs	r5, #4
 80022e0:	4602      	mov	r2, r0
 80022e2:	4621      	mov	r1, r4
 80022e4:	e000      	b.n	80022e8 <ai_platform_get_weights_map+0x50>
 80022e6:	4619      	mov	r1, r3
 80022e8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80022ec:	42b3      	cmp	r3, r6
 80022ee:	d025      	beq.n	800233c <ai_platform_get_weights_map+0xa4>
 80022f0:	f845 3f04 	str.w	r3, [r5, #4]!
 80022f4:	1c4b      	adds	r3, r1, #1
 80022f6:	429f      	cmp	r7, r3
 80022f8:	d8f5      	bhi.n	80022e6 <ai_platform_get_weights_map+0x4e>
 80022fa:	d1da      	bne.n	80022b2 <ai_platform_get_weights_map+0x1a>
 80022fc:	3102      	adds	r1, #2
 80022fe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8002302:	42b3      	cmp	r3, r6
 8002304:	d1d5      	bne.n	80022b2 <ai_platform_get_weights_map+0x1a>
 8002306:	2401      	movs	r4, #1
 8002308:	e7d3      	b.n	80022b2 <ai_platform_get_weights_map+0x1a>
 800230a:	1d30      	adds	r0, r6, #4
 800230c:	f7ff ffa6 	bl	800225c <ai_buffer_array_sane>
 8002310:	2800      	cmp	r0, #0
 8002312:	d0cd      	beq.n	80022b0 <ai_platform_get_weights_map+0x18>
 8002314:	88f3      	ldrh	r3, [r6, #6]
 8002316:	429f      	cmp	r7, r3
 8002318:	d1ca      	bne.n	80022b0 <ai_platform_get_weights_map+0x18>
 800231a:	3d04      	subs	r5, #4
 800231c:	4622      	mov	r2, r4
 800231e:	68b3      	ldr	r3, [r6, #8]
 8002320:	4423      	add	r3, r4
 8002322:	341c      	adds	r4, #28
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	b123      	cbz	r3, 8002332 <ai_platform_get_weights_map+0x9a>
 8002328:	3201      	adds	r2, #1
 800232a:	f845 3f04 	str.w	r3, [r5, #4]!
 800232e:	4297      	cmp	r7, r2
 8002330:	d8f5      	bhi.n	800231e <ai_platform_get_weights_map+0x86>
 8002332:	1abc      	subs	r4, r7, r2
 8002334:	fab4 f484 	clz	r4, r4
 8002338:	0964      	lsrs	r4, r4, #5
 800233a:	e7ba      	b.n	80022b2 <ai_platform_get_weights_map+0x1a>
 800233c:	428f      	cmp	r7, r1
 800233e:	d1b8      	bne.n	80022b2 <ai_platform_get_weights_map+0x1a>
 8002340:	e7e1      	b.n	8002306 <ai_platform_get_weights_map+0x6e>
 8002342:	bf00      	nop
 8002344:	a1facade 	.word	0xa1facade

08002348 <ai_platform_get_activations_map>:
 8002348:	2900      	cmp	r1, #0
 800234a:	bf18      	it	ne
 800234c:	2800      	cmpne	r0, #0
 800234e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002350:	bf0c      	ite	eq
 8002352:	2401      	moveq	r4, #1
 8002354:	2400      	movne	r4, #0
 8002356:	2a00      	cmp	r2, #0
 8002358:	bf08      	it	eq
 800235a:	f044 0401 	orreq.w	r4, r4, #1
 800235e:	b114      	cbz	r4, 8002366 <ai_platform_get_activations_map+0x1e>
 8002360:	2400      	movs	r4, #0
 8002362:	4620      	mov	r0, r4
 8002364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002366:	4616      	mov	r6, r2
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <ai_platform_get_activations_map+0xac>)
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	4605      	mov	r5, r0
 800236e:	460f      	mov	r7, r1
 8002370:	429a      	cmp	r2, r3
 8002372:	d022      	beq.n	80023ba <ai_platform_get_activations_map+0x72>
 8002374:	6a30      	ldr	r0, [r6, #32]
 8002376:	2800      	cmp	r0, #0
 8002378:	d0f2      	beq.n	8002360 <ai_platform_get_activations_map+0x18>
 800237a:	6806      	ldr	r6, [r0, #0]
 800237c:	429e      	cmp	r6, r3
 800237e:	d006      	beq.n	800238e <ai_platform_get_activations_map+0x46>
 8002380:	f1a1 0401 	sub.w	r4, r1, #1
 8002384:	6028      	str	r0, [r5, #0]
 8002386:	fab4 f484 	clz	r4, r4
 800238a:	0964      	lsrs	r4, r4, #5
 800238c:	e7e9      	b.n	8002362 <ai_platform_get_activations_map+0x1a>
 800238e:	3d04      	subs	r5, #4
 8002390:	4602      	mov	r2, r0
 8002392:	4621      	mov	r1, r4
 8002394:	e000      	b.n	8002398 <ai_platform_get_activations_map+0x50>
 8002396:	4619      	mov	r1, r3
 8002398:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800239c:	42b3      	cmp	r3, r6
 800239e:	d026      	beq.n	80023ee <ai_platform_get_activations_map+0xa6>
 80023a0:	f845 3f04 	str.w	r3, [r5, #4]!
 80023a4:	1c4b      	adds	r3, r1, #1
 80023a6:	429f      	cmp	r7, r3
 80023a8:	d8f5      	bhi.n	8002396 <ai_platform_get_activations_map+0x4e>
 80023aa:	d1da      	bne.n	8002362 <ai_platform_get_activations_map+0x1a>
 80023ac:	3102      	adds	r1, #2
 80023ae:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80023b2:	42b3      	cmp	r3, r6
 80023b4:	d1d5      	bne.n	8002362 <ai_platform_get_activations_map+0x1a>
 80023b6:	2401      	movs	r4, #1
 80023b8:	e7d3      	b.n	8002362 <ai_platform_get_activations_map+0x1a>
 80023ba:	f106 000c 	add.w	r0, r6, #12
 80023be:	f7ff ff4d 	bl	800225c <ai_buffer_array_sane>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d0cc      	beq.n	8002360 <ai_platform_get_activations_map+0x18>
 80023c6:	89f3      	ldrh	r3, [r6, #14]
 80023c8:	429f      	cmp	r7, r3
 80023ca:	d1c9      	bne.n	8002360 <ai_platform_get_activations_map+0x18>
 80023cc:	3d04      	subs	r5, #4
 80023ce:	4622      	mov	r2, r4
 80023d0:	6933      	ldr	r3, [r6, #16]
 80023d2:	4423      	add	r3, r4
 80023d4:	341c      	adds	r4, #28
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	b123      	cbz	r3, 80023e4 <ai_platform_get_activations_map+0x9c>
 80023da:	3201      	adds	r2, #1
 80023dc:	f845 3f04 	str.w	r3, [r5, #4]!
 80023e0:	4297      	cmp	r7, r2
 80023e2:	d8f5      	bhi.n	80023d0 <ai_platform_get_activations_map+0x88>
 80023e4:	1abc      	subs	r4, r7, r2
 80023e6:	fab4 f484 	clz	r4, r4
 80023ea:	0964      	lsrs	r4, r4, #5
 80023ec:	e7b9      	b.n	8002362 <ai_platform_get_activations_map+0x1a>
 80023ee:	428f      	cmp	r7, r1
 80023f0:	d1b7      	bne.n	8002362 <ai_platform_get_activations_map+0x1a>
 80023f2:	e7e0      	b.n	80023b6 <ai_platform_get_activations_map+0x6e>
 80023f4:	a1facade 	.word	0xa1facade

080023f8 <ai_platform_bind_network_params>:
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	bf18      	it	ne
 80023fc:	2900      	cmpne	r1, #0
 80023fe:	d010      	beq.n	8002422 <ai_platform_bind_network_params+0x2a>
 8002400:	b178      	cbz	r0, 8002422 <ai_platform_bind_network_params+0x2a>
 8002402:	4603      	mov	r3, r0
 8002404:	4808      	ldr	r0, [pc, #32]	; (8002428 <ai_platform_bind_network_params+0x30>)
 8002406:	f103 0c0c 	add.w	ip, r3, #12
 800240a:	f843 0b04 	str.w	r0, [r3], #4
 800240e:	c903      	ldmia	r1, {r0, r1}
 8002410:	e883 0003 	stmia.w	r3, {r0, r1}
 8002414:	2301      	movs	r3, #1
 8002416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800241a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800241e:	4618      	mov	r0, r3
 8002420:	4770      	bx	lr
 8002422:	2300      	movs	r3, #0
 8002424:	4618      	mov	r0, r3
 8002426:	4770      	bx	lr
 8002428:	a1facade 	.word	0xa1facade

0800242c <ai_platform_runtime_get_revision>:
 800242c:	4a34      	ldr	r2, [pc, #208]	; (8002500 <ai_platform_runtime_get_revision+0xd4>)
 800242e:	b508      	push	{r3, lr}
 8002430:	6813      	ldr	r3, [r2, #0]
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	f7ff ff2a 	bl	8002290 <_ai_platform_acquire_crc>
 800243c:	4b31      	ldr	r3, [pc, #196]	; (8002504 <ai_platform_runtime_get_revision+0xd8>)
 800243e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002448:	189a      	adds	r2, r3, r2
 800244a:	2a01      	cmp	r2, #1
 800244c:	d91b      	bls.n	8002486 <ai_platform_runtime_get_revision+0x5a>
 800244e:	f240 4249 	movw	r2, #1097	; 0x449
 8002452:	4293      	cmp	r3, r2
 8002454:	d017      	beq.n	8002486 <ai_platform_runtime_get_revision+0x5a>
 8002456:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <ai_platform_runtime_get_revision+0xdc>)
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002462:	d02a      	beq.n	80024ba <ai_platform_runtime_get_revision+0x8e>
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	f240 4183 	movw	r1, #1155	; 0x483
 800246a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800246e:	428b      	cmp	r3, r1
 8002470:	d034      	beq.n	80024dc <ai_platform_runtime_get_revision+0xb0>
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002478:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800247c:	d010      	beq.n	80024a0 <ai_platform_runtime_get_revision+0x74>
 800247e:	f7ff ff09 	bl	8002294 <_ai_platform_release_crc>
 8002482:	4822      	ldr	r0, [pc, #136]	; (800250c <ai_platform_runtime_get_revision+0xe0>)
 8002484:	bd08      	pop	{r3, pc}
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <ai_platform_runtime_get_revision+0xe4>)
 8002488:	2301      	movs	r3, #1
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	6893      	ldr	r3, [r2, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1fc      	bne.n	800248c <ai_platform_runtime_get_revision+0x60>
 8002492:	4920      	ldr	r1, [pc, #128]	; (8002514 <ai_platform_runtime_get_revision+0xe8>)
 8002494:	4b20      	ldr	r3, [pc, #128]	; (8002518 <ai_platform_runtime_get_revision+0xec>)
 8002496:	6011      	str	r1, [r2, #0]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d0ef      	beq.n	800247e <ai_platform_runtime_get_revision+0x52>
 800249e:	e7fe      	b.n	800249e <ai_platform_runtime_get_revision+0x72>
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <ai_platform_runtime_get_revision+0xe4>)
 80024a2:	2301      	movs	r3, #1
 80024a4:	6093      	str	r3, [r2, #8]
 80024a6:	6893      	ldr	r3, [r2, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1fc      	bne.n	80024a6 <ai_platform_runtime_get_revision+0x7a>
 80024ac:	4919      	ldr	r1, [pc, #100]	; (8002514 <ai_platform_runtime_get_revision+0xe8>)
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <ai_platform_runtime_get_revision+0xec>)
 80024b0:	6011      	str	r1, [r2, #0]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0e2      	beq.n	800247e <ai_platform_runtime_get_revision+0x52>
 80024b8:	e7fe      	b.n	80024b8 <ai_platform_runtime_get_revision+0x8c>
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <ai_platform_runtime_get_revision+0xf0>)
 80024bc:	2301      	movs	r3, #1
 80024be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80024c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1fb      	bne.n	80024c2 <ai_platform_runtime_get_revision+0x96>
 80024ca:	4912      	ldr	r1, [pc, #72]	; (8002514 <ai_platform_runtime_get_revision+0xe8>)
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <ai_platform_runtime_get_revision+0xec>)
 80024ce:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80024d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d0d1      	beq.n	800247e <ai_platform_runtime_get_revision+0x52>
 80024da:	e7fe      	b.n	80024da <ai_platform_runtime_get_revision+0xae>
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <ai_platform_runtime_get_revision+0xf0>)
 80024de:	2301      	movs	r3, #1
 80024e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80024e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1fb      	bne.n	80024e4 <ai_platform_runtime_get_revision+0xb8>
 80024ec:	4909      	ldr	r1, [pc, #36]	; (8002514 <ai_platform_runtime_get_revision+0xe8>)
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <ai_platform_runtime_get_revision+0xec>)
 80024f0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80024f4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d0c0      	beq.n	800247e <ai_platform_runtime_get_revision+0x52>
 80024fc:	e7fe      	b.n	80024fc <ai_platform_runtime_get_revision+0xd0>
 80024fe:	bf00      	nop
 8002500:	e0002000 	.word	0xe0002000
 8002504:	e0042000 	.word	0xe0042000
 8002508:	5c001000 	.word	0x5c001000
 800250c:	080085a8 	.word	0x080085a8
 8002510:	40023000 	.word	0x40023000
 8002514:	f407a5c2 	.word	0xf407a5c2
 8002518:	b5e8b5cd 	.word	0xb5e8b5cd
 800251c:	58024000 	.word	0x58024000

08002520 <ai_platform_runtime_get_version>:
 8002520:	4a3e      	ldr	r2, [pc, #248]	; (800261c <ai_platform_runtime_get_version+0xfc>)
 8002522:	b500      	push	{lr}
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	b083      	sub	sp, #12
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	f7ff feaf 	bl	8002290 <_ai_platform_acquire_crc>
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <ai_platform_runtime_get_version+0x100>)
 8002534:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253e:	189a      	adds	r2, r3, r2
 8002540:	2a01      	cmp	r2, #1
 8002542:	d92e      	bls.n	80025a2 <ai_platform_runtime_get_version+0x82>
 8002544:	f240 4249 	movw	r2, #1097	; 0x449
 8002548:	4293      	cmp	r3, r2
 800254a:	d02a      	beq.n	80025a2 <ai_platform_runtime_get_version+0x82>
 800254c:	4a35      	ldr	r2, [pc, #212]	; (8002624 <ai_platform_runtime_get_version+0x104>)
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002554:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002558:	d03d      	beq.n	80025d6 <ai_platform_runtime_get_version+0xb6>
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	f240 4183 	movw	r1, #1155	; 0x483
 8002560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002564:	428b      	cmp	r3, r1
 8002566:	d047      	beq.n	80025f8 <ai_platform_runtime_get_version+0xd8>
 8002568:	6813      	ldr	r3, [r2, #0]
 800256a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002572:	d023      	beq.n	80025bc <ai_platform_runtime_get_version+0x9c>
 8002574:	f7ff fe8e 	bl	8002294 <_ai_platform_release_crc>
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <ai_platform_runtime_get_version+0x108>)
 800257a:	2000      	movs	r0, #0
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa5f fc83 	uxtb.w	ip, r3
 8002582:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002586:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800258a:	0e1b      	lsrs	r3, r3, #24
 800258c:	f36c 0007 	bfi	r0, ip, #0, #8
 8002590:	f361 200f 	bfi	r0, r1, #8, #8
 8002594:	f362 4017 	bfi	r0, r2, #16, #8
 8002598:	f363 601f 	bfi	r0, r3, #24, #8
 800259c:	b003      	add	sp, #12
 800259e:	f85d fb04 	ldr.w	pc, [sp], #4
 80025a2:	4a22      	ldr	r2, [pc, #136]	; (800262c <ai_platform_runtime_get_version+0x10c>)
 80025a4:	2301      	movs	r3, #1
 80025a6:	6093      	str	r3, [r2, #8]
 80025a8:	6893      	ldr	r3, [r2, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1fc      	bne.n	80025a8 <ai_platform_runtime_get_version+0x88>
 80025ae:	4920      	ldr	r1, [pc, #128]	; (8002630 <ai_platform_runtime_get_version+0x110>)
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <ai_platform_runtime_get_version+0x114>)
 80025b2:	6011      	str	r1, [r2, #0]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d0dc      	beq.n	8002574 <ai_platform_runtime_get_version+0x54>
 80025ba:	e7fe      	b.n	80025ba <ai_platform_runtime_get_version+0x9a>
 80025bc:	4a1b      	ldr	r2, [pc, #108]	; (800262c <ai_platform_runtime_get_version+0x10c>)
 80025be:	2301      	movs	r3, #1
 80025c0:	6093      	str	r3, [r2, #8]
 80025c2:	6893      	ldr	r3, [r2, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1fc      	bne.n	80025c2 <ai_platform_runtime_get_version+0xa2>
 80025c8:	4919      	ldr	r1, [pc, #100]	; (8002630 <ai_platform_runtime_get_version+0x110>)
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <ai_platform_runtime_get_version+0x114>)
 80025cc:	6011      	str	r1, [r2, #0]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d0cf      	beq.n	8002574 <ai_platform_runtime_get_version+0x54>
 80025d4:	e7fe      	b.n	80025d4 <ai_platform_runtime_get_version+0xb4>
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <ai_platform_runtime_get_version+0x118>)
 80025d8:	2301      	movs	r3, #1
 80025da:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80025de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1fb      	bne.n	80025de <ai_platform_runtime_get_version+0xbe>
 80025e6:	4912      	ldr	r1, [pc, #72]	; (8002630 <ai_platform_runtime_get_version+0x110>)
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <ai_platform_runtime_get_version+0x114>)
 80025ea:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80025ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d0be      	beq.n	8002574 <ai_platform_runtime_get_version+0x54>
 80025f6:	e7fe      	b.n	80025f6 <ai_platform_runtime_get_version+0xd6>
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <ai_platform_runtime_get_version+0x118>)
 80025fa:	2301      	movs	r3, #1
 80025fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002600:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1fb      	bne.n	8002600 <ai_platform_runtime_get_version+0xe0>
 8002608:	4909      	ldr	r1, [pc, #36]	; (8002630 <ai_platform_runtime_get_version+0x110>)
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <ai_platform_runtime_get_version+0x114>)
 800260c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8002610:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002614:	429a      	cmp	r2, r3
 8002616:	d0ad      	beq.n	8002574 <ai_platform_runtime_get_version+0x54>
 8002618:	e7fe      	b.n	8002618 <ai_platform_runtime_get_version+0xf8>
 800261a:	bf00      	nop
 800261c:	e0002000 	.word	0xe0002000
 8002620:	e0042000 	.word	0xe0042000
 8002624:	5c001000 	.word	0x5c001000
 8002628:	080085ac 	.word	0x080085ac
 800262c:	40023000 	.word	0x40023000
 8002630:	f407a5c2 	.word	0xf407a5c2
 8002634:	b5e8b5cd 	.word	0xb5e8b5cd
 8002638:	58024000 	.word	0x58024000

0800263c <ai_platform_api_get_version>:
 800263c:	4a3e      	ldr	r2, [pc, #248]	; (8002738 <ai_platform_api_get_version+0xfc>)
 800263e:	b500      	push	{lr}
 8002640:	6813      	ldr	r3, [r2, #0]
 8002642:	b083      	sub	sp, #12
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	f7ff fe21 	bl	8002290 <_ai_platform_acquire_crc>
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <ai_platform_api_get_version+0x100>)
 8002650:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800265a:	189a      	adds	r2, r3, r2
 800265c:	2a01      	cmp	r2, #1
 800265e:	d92e      	bls.n	80026be <ai_platform_api_get_version+0x82>
 8002660:	f240 4249 	movw	r2, #1097	; 0x449
 8002664:	4293      	cmp	r3, r2
 8002666:	d02a      	beq.n	80026be <ai_platform_api_get_version+0x82>
 8002668:	4a35      	ldr	r2, [pc, #212]	; (8002740 <ai_platform_api_get_version+0x104>)
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002670:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002674:	d03d      	beq.n	80026f2 <ai_platform_api_get_version+0xb6>
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	f240 4183 	movw	r1, #1155	; 0x483
 800267c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002680:	428b      	cmp	r3, r1
 8002682:	d047      	beq.n	8002714 <ai_platform_api_get_version+0xd8>
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800268e:	d023      	beq.n	80026d8 <ai_platform_api_get_version+0x9c>
 8002690:	f7ff fe00 	bl	8002294 <_ai_platform_release_crc>
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <ai_platform_api_get_version+0x108>)
 8002696:	2000      	movs	r0, #0
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa5f fc83 	uxtb.w	ip, r3
 800269e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80026a2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80026a6:	0e1b      	lsrs	r3, r3, #24
 80026a8:	f36c 0007 	bfi	r0, ip, #0, #8
 80026ac:	f361 200f 	bfi	r0, r1, #8, #8
 80026b0:	f362 4017 	bfi	r0, r2, #16, #8
 80026b4:	f363 601f 	bfi	r0, r3, #24, #8
 80026b8:	b003      	add	sp, #12
 80026ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <ai_platform_api_get_version+0x10c>)
 80026c0:	2301      	movs	r3, #1
 80026c2:	6093      	str	r3, [r2, #8]
 80026c4:	6893      	ldr	r3, [r2, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1fc      	bne.n	80026c4 <ai_platform_api_get_version+0x88>
 80026ca:	4920      	ldr	r1, [pc, #128]	; (800274c <ai_platform_api_get_version+0x110>)
 80026cc:	4b20      	ldr	r3, [pc, #128]	; (8002750 <ai_platform_api_get_version+0x114>)
 80026ce:	6011      	str	r1, [r2, #0]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d0dc      	beq.n	8002690 <ai_platform_api_get_version+0x54>
 80026d6:	e7fe      	b.n	80026d6 <ai_platform_api_get_version+0x9a>
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <ai_platform_api_get_version+0x10c>)
 80026da:	2301      	movs	r3, #1
 80026dc:	6093      	str	r3, [r2, #8]
 80026de:	6893      	ldr	r3, [r2, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1fc      	bne.n	80026de <ai_platform_api_get_version+0xa2>
 80026e4:	4919      	ldr	r1, [pc, #100]	; (800274c <ai_platform_api_get_version+0x110>)
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <ai_platform_api_get_version+0x114>)
 80026e8:	6011      	str	r1, [r2, #0]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d0cf      	beq.n	8002690 <ai_platform_api_get_version+0x54>
 80026f0:	e7fe      	b.n	80026f0 <ai_platform_api_get_version+0xb4>
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <ai_platform_api_get_version+0x118>)
 80026f4:	2301      	movs	r3, #1
 80026f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80026fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1fb      	bne.n	80026fa <ai_platform_api_get_version+0xbe>
 8002702:	4912      	ldr	r1, [pc, #72]	; (800274c <ai_platform_api_get_version+0x110>)
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <ai_platform_api_get_version+0x114>)
 8002706:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800270a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800270e:	429a      	cmp	r2, r3
 8002710:	d0be      	beq.n	8002690 <ai_platform_api_get_version+0x54>
 8002712:	e7fe      	b.n	8002712 <ai_platform_api_get_version+0xd6>
 8002714:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <ai_platform_api_get_version+0x118>)
 8002716:	2301      	movs	r3, #1
 8002718:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800271c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1fb      	bne.n	800271c <ai_platform_api_get_version+0xe0>
 8002724:	4909      	ldr	r1, [pc, #36]	; (800274c <ai_platform_api_get_version+0x110>)
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <ai_platform_api_get_version+0x114>)
 8002728:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800272c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002730:	429a      	cmp	r2, r3
 8002732:	d0ad      	beq.n	8002690 <ai_platform_api_get_version+0x54>
 8002734:	e7fe      	b.n	8002734 <ai_platform_api_get_version+0xf8>
 8002736:	bf00      	nop
 8002738:	e0002000 	.word	0xe0002000
 800273c:	e0042000 	.word	0xe0042000
 8002740:	5c001000 	.word	0x5c001000
 8002744:	080085b0 	.word	0x080085b0
 8002748:	40023000 	.word	0x40023000
 800274c:	f407a5c2 	.word	0xf407a5c2
 8002750:	b5e8b5cd 	.word	0xb5e8b5cd
 8002754:	58024000 	.word	0x58024000

08002758 <ai_platform_interface_api_get_version>:
 8002758:	4a3e      	ldr	r2, [pc, #248]	; (8002854 <ai_platform_interface_api_get_version+0xfc>)
 800275a:	b500      	push	{lr}
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	b083      	sub	sp, #12
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	f7ff fd93 	bl	8002290 <_ai_platform_acquire_crc>
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <ai_platform_interface_api_get_version+0x100>)
 800276c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002776:	189a      	adds	r2, r3, r2
 8002778:	2a01      	cmp	r2, #1
 800277a:	d92e      	bls.n	80027da <ai_platform_interface_api_get_version+0x82>
 800277c:	f240 4249 	movw	r2, #1097	; 0x449
 8002780:	4293      	cmp	r3, r2
 8002782:	d02a      	beq.n	80027da <ai_platform_interface_api_get_version+0x82>
 8002784:	4a35      	ldr	r2, [pc, #212]	; (800285c <ai_platform_interface_api_get_version+0x104>)
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002790:	d03d      	beq.n	800280e <ai_platform_interface_api_get_version+0xb6>
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	f240 4183 	movw	r1, #1155	; 0x483
 8002798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279c:	428b      	cmp	r3, r1
 800279e:	d047      	beq.n	8002830 <ai_platform_interface_api_get_version+0xd8>
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80027aa:	d023      	beq.n	80027f4 <ai_platform_interface_api_get_version+0x9c>
 80027ac:	f7ff fd72 	bl	8002294 <_ai_platform_release_crc>
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <ai_platform_interface_api_get_version+0x108>)
 80027b2:	2000      	movs	r0, #0
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa5f fc83 	uxtb.w	ip, r3
 80027ba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80027be:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80027c2:	0e1b      	lsrs	r3, r3, #24
 80027c4:	f36c 0007 	bfi	r0, ip, #0, #8
 80027c8:	f361 200f 	bfi	r0, r1, #8, #8
 80027cc:	f362 4017 	bfi	r0, r2, #16, #8
 80027d0:	f363 601f 	bfi	r0, r3, #24, #8
 80027d4:	b003      	add	sp, #12
 80027d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <ai_platform_interface_api_get_version+0x10c>)
 80027dc:	2301      	movs	r3, #1
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	6893      	ldr	r3, [r2, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1fc      	bne.n	80027e0 <ai_platform_interface_api_get_version+0x88>
 80027e6:	4920      	ldr	r1, [pc, #128]	; (8002868 <ai_platform_interface_api_get_version+0x110>)
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <ai_platform_interface_api_get_version+0x114>)
 80027ea:	6011      	str	r1, [r2, #0]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d0dc      	beq.n	80027ac <ai_platform_interface_api_get_version+0x54>
 80027f2:	e7fe      	b.n	80027f2 <ai_platform_interface_api_get_version+0x9a>
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <ai_platform_interface_api_get_version+0x10c>)
 80027f6:	2301      	movs	r3, #1
 80027f8:	6093      	str	r3, [r2, #8]
 80027fa:	6893      	ldr	r3, [r2, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1fc      	bne.n	80027fa <ai_platform_interface_api_get_version+0xa2>
 8002800:	4919      	ldr	r1, [pc, #100]	; (8002868 <ai_platform_interface_api_get_version+0x110>)
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <ai_platform_interface_api_get_version+0x114>)
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d0cf      	beq.n	80027ac <ai_platform_interface_api_get_version+0x54>
 800280c:	e7fe      	b.n	800280c <ai_platform_interface_api_get_version+0xb4>
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <ai_platform_interface_api_get_version+0x118>)
 8002810:	2301      	movs	r3, #1
 8002812:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002816:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1fb      	bne.n	8002816 <ai_platform_interface_api_get_version+0xbe>
 800281e:	4912      	ldr	r1, [pc, #72]	; (8002868 <ai_platform_interface_api_get_version+0x110>)
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <ai_platform_interface_api_get_version+0x114>)
 8002822:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8002826:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800282a:	429a      	cmp	r2, r3
 800282c:	d0be      	beq.n	80027ac <ai_platform_interface_api_get_version+0x54>
 800282e:	e7fe      	b.n	800282e <ai_platform_interface_api_get_version+0xd6>
 8002830:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <ai_platform_interface_api_get_version+0x118>)
 8002832:	2301      	movs	r3, #1
 8002834:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002838:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1fb      	bne.n	8002838 <ai_platform_interface_api_get_version+0xe0>
 8002840:	4909      	ldr	r1, [pc, #36]	; (8002868 <ai_platform_interface_api_get_version+0x110>)
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <ai_platform_interface_api_get_version+0x114>)
 8002844:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8002848:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800284c:	429a      	cmp	r2, r3
 800284e:	d0ad      	beq.n	80027ac <ai_platform_interface_api_get_version+0x54>
 8002850:	e7fe      	b.n	8002850 <ai_platform_interface_api_get_version+0xf8>
 8002852:	bf00      	nop
 8002854:	e0002000 	.word	0xe0002000
 8002858:	e0042000 	.word	0xe0042000
 800285c:	5c001000 	.word	0x5c001000
 8002860:	080085b4 	.word	0x080085b4
 8002864:	40023000 	.word	0x40023000
 8002868:	f407a5c2 	.word	0xf407a5c2
 800286c:	b5e8b5cd 	.word	0xb5e8b5cd
 8002870:	58024000 	.word	0x58024000

08002874 <ai_platform_context_acquire>:
 8002874:	b510      	push	{r4, lr}
 8002876:	4604      	mov	r4, r0
 8002878:	b120      	cbz	r0, 8002884 <ai_platform_context_acquire+0x10>
 800287a:	4b36      	ldr	r3, [pc, #216]	; (8002954 <ai_platform_context_acquire+0xe0>)
 800287c:	6802      	ldr	r2, [r0, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	bf18      	it	ne
 8002882:	2400      	movne	r4, #0
 8002884:	4a34      	ldr	r2, [pc, #208]	; (8002958 <ai_platform_context_acquire+0xe4>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	f7ff fcff 	bl	8002290 <_ai_platform_acquire_crc>
 8002892:	4b32      	ldr	r3, [pc, #200]	; (800295c <ai_platform_context_acquire+0xe8>)
 8002894:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800289e:	189a      	adds	r2, r3, r2
 80028a0:	2a01      	cmp	r2, #1
 80028a2:	d91b      	bls.n	80028dc <ai_platform_context_acquire+0x68>
 80028a4:	f240 4249 	movw	r2, #1097	; 0x449
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d017      	beq.n	80028dc <ai_platform_context_acquire+0x68>
 80028ac:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <ai_platform_context_acquire+0xec>)
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80028b8:	d01d      	beq.n	80028f6 <ai_platform_context_acquire+0x82>
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	f240 4183 	movw	r1, #1155	; 0x483
 80028c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d034      	beq.n	8002932 <ai_platform_context_acquire+0xbe>
 80028c8:	6813      	ldr	r3, [r2, #0]
 80028ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ce:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80028d2:	d021      	beq.n	8002918 <ai_platform_context_acquire+0xa4>
 80028d4:	f7ff fcde 	bl	8002294 <_ai_platform_release_crc>
 80028d8:	4620      	mov	r0, r4
 80028da:	bd10      	pop	{r4, pc}
 80028dc:	4a21      	ldr	r2, [pc, #132]	; (8002964 <ai_platform_context_acquire+0xf0>)
 80028de:	2301      	movs	r3, #1
 80028e0:	6093      	str	r3, [r2, #8]
 80028e2:	6893      	ldr	r3, [r2, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1fc      	bne.n	80028e2 <ai_platform_context_acquire+0x6e>
 80028e8:	491f      	ldr	r1, [pc, #124]	; (8002968 <ai_platform_context_acquire+0xf4>)
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <ai_platform_context_acquire+0xf8>)
 80028ec:	6011      	str	r1, [r2, #0]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d0ef      	beq.n	80028d4 <ai_platform_context_acquire+0x60>
 80028f4:	e7fe      	b.n	80028f4 <ai_platform_context_acquire+0x80>
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <ai_platform_context_acquire+0xfc>)
 80028f8:	2301      	movs	r3, #1
 80028fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80028fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1fb      	bne.n	80028fe <ai_platform_context_acquire+0x8a>
 8002906:	4918      	ldr	r1, [pc, #96]	; (8002968 <ai_platform_context_acquire+0xf4>)
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <ai_platform_context_acquire+0xf8>)
 800290a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800290e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002912:	429a      	cmp	r2, r3
 8002914:	d0de      	beq.n	80028d4 <ai_platform_context_acquire+0x60>
 8002916:	e7fe      	b.n	8002916 <ai_platform_context_acquire+0xa2>
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <ai_platform_context_acquire+0xf0>)
 800291a:	2301      	movs	r3, #1
 800291c:	6093      	str	r3, [r2, #8]
 800291e:	6893      	ldr	r3, [r2, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1fc      	bne.n	800291e <ai_platform_context_acquire+0xaa>
 8002924:	4910      	ldr	r1, [pc, #64]	; (8002968 <ai_platform_context_acquire+0xf4>)
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <ai_platform_context_acquire+0xf8>)
 8002928:	6011      	str	r1, [r2, #0]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d0d1      	beq.n	80028d4 <ai_platform_context_acquire+0x60>
 8002930:	e7fe      	b.n	8002930 <ai_platform_context_acquire+0xbc>
 8002932:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <ai_platform_context_acquire+0xfc>)
 8002934:	2301      	movs	r3, #1
 8002936:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800293a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1fb      	bne.n	800293a <ai_platform_context_acquire+0xc6>
 8002942:	4909      	ldr	r1, [pc, #36]	; (8002968 <ai_platform_context_acquire+0xf4>)
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <ai_platform_context_acquire+0xf8>)
 8002946:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800294a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800294e:	429a      	cmp	r2, r3
 8002950:	d0c0      	beq.n	80028d4 <ai_platform_context_acquire+0x60>
 8002952:	e7fe      	b.n	8002952 <ai_platform_context_acquire+0xde>
 8002954:	a1c00100 	.word	0xa1c00100
 8002958:	e0002000 	.word	0xe0002000
 800295c:	e0042000 	.word	0xe0042000
 8002960:	5c001000 	.word	0x5c001000
 8002964:	40023000 	.word	0x40023000
 8002968:	f407a5c2 	.word	0xf407a5c2
 800296c:	b5e8b5cd 	.word	0xb5e8b5cd
 8002970:	58024000 	.word	0x58024000

08002974 <ai_platform_network_get_error>:
 8002974:	b510      	push	{r4, lr}
 8002976:	2800      	cmp	r0, #0
 8002978:	d036      	beq.n	80029e8 <ai_platform_network_get_error+0x74>
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <ai_platform_network_get_error+0x1c4>)
 800297c:	4604      	mov	r4, r0
 800297e:	6802      	ldr	r2, [r0, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d131      	bne.n	80029e8 <ai_platform_network_get_error+0x74>
 8002984:	4a6d      	ldr	r2, [pc, #436]	; (8002b3c <ai_platform_network_get_error+0x1c8>)
 8002986:	6813      	ldr	r3, [r2, #0]
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	f7ff fc7f 	bl	8002290 <_ai_platform_acquire_crc>
 8002992:	4b6b      	ldr	r3, [pc, #428]	; (8002b40 <ai_platform_network_get_error+0x1cc>)
 8002994:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299e:	189a      	adds	r2, r3, r2
 80029a0:	2a01      	cmp	r2, #1
 80029a2:	d95b      	bls.n	8002a5c <ai_platform_network_get_error+0xe8>
 80029a4:	f240 4249 	movw	r2, #1097	; 0x449
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d057      	beq.n	8002a5c <ai_platform_network_get_error+0xe8>
 80029ac:	4a65      	ldr	r2, [pc, #404]	; (8002b44 <ai_platform_network_get_error+0x1d0>)
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80029b8:	d06e      	beq.n	8002a98 <ai_platform_network_get_error+0x124>
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f240 4183 	movw	r1, #1155	; 0x483
 80029c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c4:	428b      	cmp	r3, r1
 80029c6:	f000 8089 	beq.w	8002adc <ai_platform_network_get_error+0x168>
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80029d4:	f000 80a1 	beq.w	8002b1a <ai_platform_network_get_error+0x1a6>
 80029d8:	f7ff fc5c 	bl	8002294 <_ai_platform_release_crc>
 80029dc:	f104 0010 	add.w	r0, r4, #16
 80029e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e4:	f001 bbe8 	b.w	80041b8 <core_get_error>
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <ai_platform_network_get_error+0x1c8>)
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	f7ff fc4d 	bl	8002290 <_ai_platform_acquire_crc>
 80029f6:	4b52      	ldr	r3, [pc, #328]	; (8002b40 <ai_platform_network_get_error+0x1cc>)
 80029f8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a02:	185a      	adds	r2, r3, r1
 8002a04:	2a01      	cmp	r2, #1
 8002a06:	d91c      	bls.n	8002a42 <ai_platform_network_get_error+0xce>
 8002a08:	f240 4249 	movw	r2, #1097	; 0x449
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d018      	beq.n	8002a42 <ai_platform_network_get_error+0xce>
 8002a10:	4a4c      	ldr	r2, [pc, #304]	; (8002b44 <ai_platform_network_get_error+0x1d0>)
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a18:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002a1c:	d02b      	beq.n	8002a76 <ai_platform_network_get_error+0x102>
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	f240 4183 	movw	r1, #1155	; 0x483
 8002a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	d046      	beq.n	8002aba <ai_platform_network_get_error+0x146>
 8002a2c:	6813      	ldr	r3, [r2, #0]
 8002a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a32:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002a36:	d063      	beq.n	8002b00 <ai_platform_network_get_error+0x18c>
 8002a38:	f7ff fc2c 	bl	8002294 <_ai_platform_release_crc>
 8002a3c:	f241 0010 	movw	r0, #4112	; 0x1010
 8002a40:	bd10      	pop	{r4, pc}
 8002a42:	4a41      	ldr	r2, [pc, #260]	; (8002b48 <ai_platform_network_get_error+0x1d4>)
 8002a44:	2301      	movs	r3, #1
 8002a46:	6093      	str	r3, [r2, #8]
 8002a48:	6893      	ldr	r3, [r2, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1fc      	bne.n	8002a48 <ai_platform_network_get_error+0xd4>
 8002a4e:	493f      	ldr	r1, [pc, #252]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002a52:	6011      	str	r1, [r2, #0]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d0ee      	beq.n	8002a38 <ai_platform_network_get_error+0xc4>
 8002a5a:	e7fe      	b.n	8002a5a <ai_platform_network_get_error+0xe6>
 8002a5c:	4a3a      	ldr	r2, [pc, #232]	; (8002b48 <ai_platform_network_get_error+0x1d4>)
 8002a5e:	2301      	movs	r3, #1
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	6893      	ldr	r3, [r2, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1fc      	bne.n	8002a62 <ai_platform_network_get_error+0xee>
 8002a68:	4938      	ldr	r1, [pc, #224]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002a6c:	6011      	str	r1, [r2, #0]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d0b1      	beq.n	80029d8 <ai_platform_network_get_error+0x64>
 8002a74:	e7fe      	b.n	8002a74 <ai_platform_network_get_error+0x100>
 8002a76:	4a37      	ldr	r2, [pc, #220]	; (8002b54 <ai_platform_network_get_error+0x1e0>)
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002a7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1fb      	bne.n	8002a7e <ai_platform_network_get_error+0x10a>
 8002a86:	4931      	ldr	r1, [pc, #196]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002a88:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002a8a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8002a8e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d0d0      	beq.n	8002a38 <ai_platform_network_get_error+0xc4>
 8002a96:	e7fe      	b.n	8002a96 <ai_platform_network_get_error+0x122>
 8002a98:	4a2e      	ldr	r2, [pc, #184]	; (8002b54 <ai_platform_network_get_error+0x1e0>)
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002aa0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1fb      	bne.n	8002aa0 <ai_platform_network_get_error+0x12c>
 8002aa8:	4928      	ldr	r1, [pc, #160]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002aac:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8002ab0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d08f      	beq.n	80029d8 <ai_platform_network_get_error+0x64>
 8002ab8:	e7fe      	b.n	8002ab8 <ai_platform_network_get_error+0x144>
 8002aba:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <ai_platform_network_get_error+0x1e0>)
 8002abc:	2301      	movs	r3, #1
 8002abe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002ac2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1fb      	bne.n	8002ac2 <ai_platform_network_get_error+0x14e>
 8002aca:	4920      	ldr	r1, [pc, #128]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002ace:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8002ad2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d0ae      	beq.n	8002a38 <ai_platform_network_get_error+0xc4>
 8002ada:	e7fe      	b.n	8002ada <ai_platform_network_get_error+0x166>
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <ai_platform_network_get_error+0x1e0>)
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002ae4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1fb      	bne.n	8002ae4 <ai_platform_network_get_error+0x170>
 8002aec:	4917      	ldr	r1, [pc, #92]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002af0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8002af4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f43f af6d 	beq.w	80029d8 <ai_platform_network_get_error+0x64>
 8002afe:	e7fe      	b.n	8002afe <ai_platform_network_get_error+0x18a>
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <ai_platform_network_get_error+0x1d4>)
 8002b02:	2301      	movs	r3, #1
 8002b04:	6093      	str	r3, [r2, #8]
 8002b06:	6893      	ldr	r3, [r2, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1fc      	bne.n	8002b06 <ai_platform_network_get_error+0x192>
 8002b0c:	490f      	ldr	r1, [pc, #60]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d08f      	beq.n	8002a38 <ai_platform_network_get_error+0xc4>
 8002b18:	e7fe      	b.n	8002b18 <ai_platform_network_get_error+0x1a4>
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <ai_platform_network_get_error+0x1d4>)
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	6093      	str	r3, [r2, #8]
 8002b20:	6893      	ldr	r3, [r2, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1fc      	bne.n	8002b20 <ai_platform_network_get_error+0x1ac>
 8002b26:	4909      	ldr	r1, [pc, #36]	; (8002b4c <ai_platform_network_get_error+0x1d8>)
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <ai_platform_network_get_error+0x1dc>)
 8002b2a:	6011      	str	r1, [r2, #0]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	f43f af52 	beq.w	80029d8 <ai_platform_network_get_error+0x64>
 8002b34:	e7fe      	b.n	8002b34 <ai_platform_network_get_error+0x1c0>
 8002b36:	bf00      	nop
 8002b38:	a1c00100 	.word	0xa1c00100
 8002b3c:	e0002000 	.word	0xe0002000
 8002b40:	e0042000 	.word	0xe0042000
 8002b44:	5c001000 	.word	0x5c001000
 8002b48:	40023000 	.word	0x40023000
 8002b4c:	f407a5c2 	.word	0xf407a5c2
 8002b50:	b5e8b5cd 	.word	0xb5e8b5cd
 8002b54:	58024000 	.word	0x58024000

08002b58 <ai_platform_network_set_error>:
 8002b58:	b110      	cbz	r0, 8002b60 <ai_platform_network_set_error+0x8>
 8002b5a:	3010      	adds	r0, #16
 8002b5c:	f001 bb32 	b.w	80041c4 <core_set_error>
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop

08002b64 <ai_platform_api_get_network_report>:
 8002b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b68:	b089      	sub	sp, #36	; 0x24
 8002b6a:	4683      	mov	fp, r0
 8002b6c:	9101      	str	r1, [sp, #4]
 8002b6e:	b128      	cbz	r0, 8002b7c <ai_platform_api_get_network_report+0x18>
 8002b70:	4b9f      	ldr	r3, [pc, #636]	; (8002df0 <ai_platform_api_get_network_report+0x28c>)
 8002b72:	6802      	ldr	r2, [r0, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	bf18      	it	ne
 8002b78:	f04f 0b00 	movne.w	fp, #0
 8002b7c:	4a9d      	ldr	r2, [pc, #628]	; (8002df4 <ai_platform_api_get_network_report+0x290>)
 8002b7e:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 8002b82:	6813      	ldr	r3, [r2, #0]
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	f7ff fb81 	bl	8002290 <_ai_platform_acquire_crc>
 8002b8e:	4b9a      	ldr	r3, [pc, #616]	; (8002df8 <ai_platform_api_get_network_report+0x294>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b96:	eb03 0208 	add.w	r2, r3, r8
 8002b9a:	2a01      	cmp	r2, #1
 8002b9c:	d934      	bls.n	8002c08 <ai_platform_api_get_network_report+0xa4>
 8002b9e:	f240 4249 	movw	r2, #1097	; 0x449
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d030      	beq.n	8002c08 <ai_platform_api_get_network_report+0xa4>
 8002ba6:	4a95      	ldr	r2, [pc, #596]	; (8002dfc <ai_platform_api_get_network_report+0x298>)
 8002ba8:	6813      	ldr	r3, [r2, #0]
 8002baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002bb2:	f000 808e 	beq.w	8002cd2 <ai_platform_api_get_network_report+0x16e>
 8002bb6:	6813      	ldr	r3, [r2, #0]
 8002bb8:	f240 4183 	movw	r1, #1155	; 0x483
 8002bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc0:	428b      	cmp	r3, r1
 8002bc2:	f000 823c 	beq.w	800303e <ai_platform_api_get_network_report+0x4da>
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bcc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002bd0:	f000 809e 	beq.w	8002d10 <ai_platform_api_get_network_report+0x1ac>
 8002bd4:	f7ff fb5e 	bl	8002294 <_ai_platform_release_crc>
 8002bd8:	9801      	ldr	r0, [sp, #4]
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	bf18      	it	ne
 8002bde:	f1bb 0f00 	cmpne.w	fp, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	9302      	str	r3, [sp, #8]
 8002bea:	f000 809f 	beq.w	8002d2c <ai_platform_api_get_network_report+0x1c8>
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6743      	str	r3, [r0, #116]	; 0x74
 8002bf2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002bf6:	b1a3      	cbz	r3, 8002c22 <ai_platform_api_get_network_report+0xbe>
 8002bf8:	3101      	adds	r1, #1
 8002bfa:	6741      	str	r1, [r0, #116]	; 0x74
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	b182      	cbz	r2, 8002c22 <ai_platform_api_get_network_report+0xbe>
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d00e      	beq.n	8002c22 <ai_platform_api_get_network_report+0xbe>
 8002c04:	4613      	mov	r3, r2
 8002c06:	e7f6      	b.n	8002bf6 <ai_platform_api_get_network_report+0x92>
 8002c08:	4a7d      	ldr	r2, [pc, #500]	; (8002e00 <ai_platform_api_get_network_report+0x29c>)
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	6093      	str	r3, [r2, #8]
 8002c0e:	6893      	ldr	r3, [r2, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1fc      	bne.n	8002c0e <ai_platform_api_get_network_report+0xaa>
 8002c14:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <ai_platform_api_get_network_report+0x2a0>)
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <ai_platform_api_get_network_report+0x2a4>)
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d0d9      	beq.n	8002bd4 <ai_platform_api_get_network_report+0x70>
 8002c20:	e7fe      	b.n	8002c20 <ai_platform_api_get_network_report+0xbc>
 8002c22:	2900      	cmp	r1, #0
 8002c24:	f000 8227 	beq.w	8003076 <ai_platform_api_get_network_report+0x512>
 8002c28:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d062      	beq.n	8002cf6 <ai_platform_api_get_network_report+0x192>
 8002c30:	f8db 9030 	ldr.w	r9, [fp, #48]	; 0x30
 8002c34:	f1b9 0f00 	cmp.w	r9, #0
 8002c38:	d05d      	beq.n	8002cf6 <ai_platform_api_get_network_report+0x192>
 8002c3a:	f04f 0a00 	mov.w	sl, #0
 8002c3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8002c42:	4655      	mov	r5, sl
 8002c44:	e016      	b.n	8002c74 <ai_platform_api_get_network_report+0x110>
 8002c46:	2201      	movs	r2, #1
 8002c48:	f847 200e 	str.w	r2, [r7, lr]
 8002c4c:	69b2      	ldr	r2, [r6, #24]
 8002c4e:	6852      	ldr	r2, [r2, #4]
 8002c50:	3501      	adds	r5, #1
 8002c52:	60a3      	str	r3, [r4, #8]
 8002c54:	f04f 0301 	mov.w	r3, #1
 8002c58:	f10a 0a1c 	add.w	sl, sl, #28
 8002c5c:	6122      	str	r2, [r4, #16]
 8002c5e:	7523      	strb	r3, [r4, #20]
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c4 b018 	str.w	fp, [r4, #24]
 8002c66:	60e3      	str	r3, [r4, #12]
 8002c68:	6963      	ldr	r3, [r4, #20]
 8002c6a:	f368 231f 	bfi	r3, r8, #8, #24
 8002c6e:	e9c4 0100 	strd	r0, r1, [r4]
 8002c72:	6163      	str	r3, [r4, #20]
 8002c74:	f8b9 3000 	ldrh.w	r3, [r9]
 8002c78:	b2aa      	uxth	r2, r5
 8002c7a:	42ab      	cmp	r3, r5
 8002c7c:	d95c      	bls.n	8002d38 <ai_platform_api_get_network_report+0x1d4>
 8002c7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d058      	beq.n	8002d38 <ai_platform_api_get_network_report+0x1d4>
 8002c86:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8002c8a:	2e00      	cmp	r6, #0
 8002c8c:	d054      	beq.n	8002d38 <ai_platform_api_get_network_report+0x1d4>
 8002c8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002c92:	69b2      	ldr	r2, [r6, #24]
 8002c94:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8002c98:	6810      	ldr	r0, [r2, #0]
 8002c9a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002c9e:	68b3      	ldr	r3, [r6, #8]
 8002ca0:	4454      	add	r4, sl
 8002ca2:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8002ca6:	f002 f9bf 	bl	8005028 <ai_array_to_buffer_fmt>
 8002caa:	69b2      	ldr	r2, [r6, #24]
 8002cac:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8002cb0:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8002cb4:	6891      	ldr	r1, [r2, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0c9      	beq.n	8002c4e <ai_platform_api_get_network_report+0xea>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8002cc0:	6832      	ldr	r2, [r6, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	b112      	cbz	r2, 8002ccc <ai_platform_api_get_network_report+0x168>
 8002cc6:	8852      	ldrh	r2, [r2, #2]
 8002cc8:	2a00      	cmp	r2, #0
 8002cca:	d1bc      	bne.n	8002c46 <ai_platform_api_get_network_report+0xe2>
 8002ccc:	69b2      	ldr	r2, [r6, #24]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e7bd      	b.n	8002c4e <ai_platform_api_get_network_report+0xea>
 8002cd2:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <ai_platform_api_get_network_report+0x2a8>)
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002cda:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1fb      	bne.n	8002cda <ai_platform_api_get_network_report+0x176>
 8002ce2:	4b48      	ldr	r3, [pc, #288]	; (8002e04 <ai_platform_api_get_network_report+0x2a0>)
 8002ce4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <ai_platform_api_get_network_report+0x2a4>)
 8002cea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	f43f af70 	beq.w	8002bd4 <ai_platform_api_get_network_report+0x70>
 8002cf4:	e7fe      	b.n	8002cf4 <ai_platform_api_get_network_report+0x190>
 8002cf6:	9901      	ldr	r1, [sp, #4]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2218      	movs	r2, #24
 8002cfc:	f10b 0010 	add.w	r0, fp, #16
 8002d00:	860b      	strh	r3, [r1, #48]	; 0x30
 8002d02:	2112      	movs	r1, #18
 8002d04:	f001 fa5e 	bl	80041c4 <core_set_error>
 8002d08:	9802      	ldr	r0, [sp, #8]
 8002d0a:	b009      	add	sp, #36	; 0x24
 8002d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d10:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <ai_platform_api_get_network_report+0x29c>)
 8002d12:	2301      	movs	r3, #1
 8002d14:	6093      	str	r3, [r2, #8]
 8002d16:	6893      	ldr	r3, [r2, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1fc      	bne.n	8002d16 <ai_platform_api_get_network_report+0x1b2>
 8002d1c:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <ai_platform_api_get_network_report+0x2a0>)
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <ai_platform_api_get_network_report+0x2a4>)
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	f43f af55 	beq.w	8002bd4 <ai_platform_api_get_network_report+0x70>
 8002d2a:	e7fe      	b.n	8002d2a <ai_platform_api_get_network_report+0x1c6>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9302      	str	r3, [sp, #8]
 8002d30:	9802      	ldr	r0, [sp, #8]
 8002d32:	b009      	add	sp, #36	; 0x24
 8002d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002d3c:	2a00      	cmp	r2, #0
 8002d3e:	d0da      	beq.n	8002cf6 <ai_platform_api_get_network_report+0x192>
 8002d40:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002d44:	9901      	ldr	r1, [sp, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	860a      	strh	r2, [r1, #48]	; 0x30
 8002d4a:	634b      	str	r3, [r1, #52]	; 0x34
 8002d4c:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f240 8186 	bls.w	8003062 <ai_platform_api_get_network_report+0x4fe>
 8002d56:	f04f 0900 	mov.w	r9, #0
 8002d5a:	f8db 8030 	ldr.w	r8, [fp, #48]	; 0x30
 8002d5e:	464d      	mov	r5, r9
 8002d60:	e016      	b.n	8002d90 <ai_platform_api_get_network_report+0x22c>
 8002d62:	2201      	movs	r2, #1
 8002d64:	f847 200e 	str.w	r2, [r7, lr]
 8002d68:	69b2      	ldr	r2, [r6, #24]
 8002d6a:	6852      	ldr	r2, [r2, #4]
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	60a3      	str	r3, [r4, #8]
 8002d70:	f04f 0301 	mov.w	r3, #1
 8002d74:	f109 091c 	add.w	r9, r9, #28
 8002d78:	6122      	str	r2, [r4, #16]
 8002d7a:	7523      	strb	r3, [r4, #20]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c4 b018 	str.w	fp, [r4, #24]
 8002d82:	60e3      	str	r3, [r4, #12]
 8002d84:	6963      	ldr	r3, [r4, #20]
 8002d86:	f36a 231f 	bfi	r3, sl, #8, #24
 8002d8a:	e9c4 0100 	strd	r0, r1, [r4]
 8002d8e:	6163      	str	r3, [r4, #20]
 8002d90:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002d94:	b2aa      	uxth	r2, r5
 8002d96:	42ab      	cmp	r3, r5
 8002d98:	d93a      	bls.n	8002e10 <ai_platform_api_get_network_report+0x2ac>
 8002d9a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d036      	beq.n	8002e10 <ai_platform_api_get_network_report+0x2ac>
 8002da2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8002da6:	2e00      	cmp	r6, #0
 8002da8:	d032      	beq.n	8002e10 <ai_platform_api_get_network_report+0x2ac>
 8002daa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002dae:	69b2      	ldr	r2, [r6, #24]
 8002db0:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8002db4:	6810      	ldr	r0, [r2, #0]
 8002db6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002dba:	68b3      	ldr	r3, [r6, #8]
 8002dbc:	444c      	add	r4, r9
 8002dbe:	f3c3 2a17 	ubfx	sl, r3, #8, #24
 8002dc2:	f002 f931 	bl	8005028 <ai_array_to_buffer_fmt>
 8002dc6:	69b2      	ldr	r2, [r6, #24]
 8002dc8:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8002dcc:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8002dd0:	6891      	ldr	r1, [r2, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0c9      	beq.n	8002d6a <ai_platform_api_get_network_report+0x206>
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8002ddc:	6832      	ldr	r2, [r6, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	b112      	cbz	r2, 8002de8 <ai_platform_api_get_network_report+0x284>
 8002de2:	8852      	ldrh	r2, [r2, #2]
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d1bc      	bne.n	8002d62 <ai_platform_api_get_network_report+0x1fe>
 8002de8:	69b2      	ldr	r2, [r6, #24]
 8002dea:	2300      	movs	r3, #0
 8002dec:	e7bd      	b.n	8002d6a <ai_platform_api_get_network_report+0x206>
 8002dee:	bf00      	nop
 8002df0:	a1c00100 	.word	0xa1c00100
 8002df4:	e0002000 	.word	0xe0002000
 8002df8:	e0042000 	.word	0xe0042000
 8002dfc:	5c001000 	.word	0x5c001000
 8002e00:	40023000 	.word	0x40023000
 8002e04:	f407a5c2 	.word	0xf407a5c2
 8002e08:	b5e8b5cd 	.word	0xb5e8b5cd
 8002e0c:	58024000 	.word	0x58024000
 8002e10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002e14:	2a00      	cmp	r2, #0
 8002e16:	f000 8124 	beq.w	8003062 <ai_platform_api_get_network_report+0x4fe>
 8002e1a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002e1e:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8002e22:	9901      	ldr	r1, [sp, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4628      	mov	r0, r5
 8002e28:	864a      	strh	r2, [r1, #50]	; 0x32
 8002e2a:	638b      	str	r3, [r1, #56]	; 0x38
 8002e2c:	f7ff fa16 	bl	800225c <ai_buffer_array_sane>
 8002e30:	9002      	str	r0, [sp, #8]
 8002e32:	b968      	cbnz	r0, 8002e50 <ai_platform_api_get_network_report+0x2ec>
 8002e34:	4628      	mov	r0, r5
 8002e36:	f7ff fa11 	bl	800225c <ai_buffer_array_sane>
 8002e3a:	b148      	cbz	r0, 8002e50 <ai_platform_api_get_network_report+0x2ec>
 8002e3c:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
 8002e40:	b133      	cbz	r3, 8002e50 <ai_platform_api_get_network_report+0x2ec>
 8002e42:	2213      	movs	r2, #19
 8002e44:	2111      	movs	r1, #17
 8002e46:	f10b 0010 	add.w	r0, fp, #16
 8002e4a:	f001 f9bb 	bl	80041c4 <core_set_error>
 8002e4e:	e75b      	b.n	8002d08 <ai_platform_api_get_network_report+0x1a4>
 8002e50:	f10b 061c 	add.w	r6, fp, #28
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7ff fa01 	bl	800225c <ai_buffer_array_sane>
 8002e5a:	9002      	str	r0, [sp, #8]
 8002e5c:	b928      	cbnz	r0, 8002e6a <ai_platform_api_get_network_report+0x306>
 8002e5e:	4630      	mov	r0, r6
 8002e60:	f7ff f9fc 	bl	800225c <ai_buffer_array_sane>
 8002e64:	2800      	cmp	r0, #0
 8002e66:	f040 811b 	bne.w	80030a0 <ai_platform_api_get_network_report+0x53c>
 8002e6a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002e6e:	9a01      	ldr	r2, [sp, #4]
 8002e70:	6793      	str	r3, [r2, #120]	; 0x78
 8002e72:	4ab1      	ldr	r2, [pc, #708]	; (8003138 <ai_platform_api_get_network_report+0x5d4>)
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	f7ff fa08 	bl	8002290 <_ai_platform_acquire_crc>
 8002e80:	4bae      	ldr	r3, [pc, #696]	; (800313c <ai_platform_api_get_network_report+0x5d8>)
 8002e82:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	eb03 020e 	add.w	r2, r3, lr
 8002e90:	2a01      	cmp	r2, #1
 8002e92:	f240 80f7 	bls.w	8003084 <ai_platform_api_get_network_report+0x520>
 8002e96:	f240 4249 	movw	r2, #1097	; 0x449
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	f000 80f2 	beq.w	8003084 <ai_platform_api_get_network_report+0x520>
 8002ea0:	4ba7      	ldr	r3, [pc, #668]	; (8003140 <ai_platform_api_get_network_report+0x5dc>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002ea8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8002eac:	f000 8104 	beq.w	80030b8 <ai_platform_api_get_network_report+0x554>
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	f240 4183 	movw	r1, #1155	; 0x483
 8002eb6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002eba:	428a      	cmp	r2, r1
 8002ebc:	f000 811c 	beq.w	80030f8 <ai_platform_api_get_network_report+0x594>
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002eca:	f000 8147 	beq.w	800315c <ai_platform_api_get_network_report+0x5f8>
 8002ece:	f7ff f9e1 	bl	8002294 <_ai_platform_release_crc>
 8002ed2:	9a01      	ldr	r2, [sp, #4]
 8002ed4:	4b9b      	ldr	r3, [pc, #620]	; (8003144 <ai_platform_api_get_network_report+0x5e0>)
 8002ed6:	6113      	str	r3, [r2, #16]
 8002ed8:	4a97      	ldr	r2, [pc, #604]	; (8003138 <ai_platform_api_get_network_report+0x5d4>)
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	f7ff f9d5 	bl	8002290 <_ai_platform_acquire_crc>
 8002ee6:	4b95      	ldr	r3, [pc, #596]	; (800313c <ai_platform_api_get_network_report+0x5d8>)
 8002ee8:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef2:	eb03 020c 	add.w	r2, r3, ip
 8002ef6:	2a01      	cmp	r2, #1
 8002ef8:	f240 80f0 	bls.w	80030dc <ai_platform_api_get_network_report+0x578>
 8002efc:	f240 4249 	movw	r2, #1097	; 0x449
 8002f00:	4293      	cmp	r3, r2
 8002f02:	f000 80eb 	beq.w	80030dc <ai_platform_api_get_network_report+0x578>
 8002f06:	4b8e      	ldr	r3, [pc, #568]	; (8003140 <ai_platform_api_get_network_report+0x5dc>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002f0e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8002f12:	f000 8131 	beq.w	8003178 <ai_platform_api_get_network_report+0x614>
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f240 4183 	movw	r1, #1155	; 0x483
 8002f1c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002f20:	428a      	cmp	r2, r1
 8002f22:	f000 813b 	beq.w	800319c <ai_platform_api_get_network_report+0x638>
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f2c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002f30:	f000 8146 	beq.w	80031c0 <ai_platform_api_get_network_report+0x65c>
 8002f34:	f7ff f9ae 	bl	8002294 <_ai_platform_release_crc>
 8002f38:	9a01      	ldr	r2, [sp, #4]
 8002f3a:	f240 2307 	movw	r3, #519	; 0x207
 8002f3e:	f46f 678a 	mvn.w	r7, #1104	; 0x450
 8002f42:	6153      	str	r3, [r2, #20]
 8002f44:	4a7c      	ldr	r2, [pc, #496]	; (8003138 <ai_platform_api_get_network_report+0x5d4>)
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	f7ff f99f 	bl	8002290 <_ai_platform_acquire_crc>
 8002f52:	4b7a      	ldr	r3, [pc, #488]	; (800313c <ai_platform_api_get_network_report+0x5d8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5a:	19da      	adds	r2, r3, r7
 8002f5c:	2a01      	cmp	r2, #1
 8002f5e:	f240 80dd 	bls.w	800311c <ai_platform_api_get_network_report+0x5b8>
 8002f62:	f240 4249 	movw	r2, #1097	; 0x449
 8002f66:	4293      	cmp	r3, r2
 8002f68:	f000 80d8 	beq.w	800311c <ai_platform_api_get_network_report+0x5b8>
 8002f6c:	4b74      	ldr	r3, [pc, #464]	; (8003140 <ai_platform_api_get_network_report+0x5dc>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002f74:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8002f78:	f000 8142 	beq.w	8003200 <ai_platform_api_get_network_report+0x69c>
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	f240 4183 	movw	r1, #1155	; 0x483
 8002f82:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002f86:	428a      	cmp	r2, r1
 8002f88:	f000 8128 	beq.w	80031dc <ai_platform_api_get_network_report+0x678>
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f92:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002f96:	f000 8181 	beq.w	800329c <ai_platform_api_get_network_report+0x738>
 8002f9a:	f7ff f97b 	bl	8002294 <_ai_platform_release_crc>
 8002f9e:	9a01      	ldr	r2, [sp, #4]
 8002fa0:	f240 2301 	movw	r3, #513	; 0x201
 8002fa4:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 8002fa8:	6253      	str	r3, [r2, #36]	; 0x24
 8002faa:	4a63      	ldr	r2, [pc, #396]	; (8003138 <ai_platform_api_get_network_report+0x5d4>)
 8002fac:	6813      	ldr	r3, [r2, #0]
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	f7ff f96c 	bl	8002290 <_ai_platform_acquire_crc>
 8002fb8:	4b60      	ldr	r3, [pc, #384]	; (800313c <ai_platform_api_get_network_report+0x5d8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc0:	191a      	adds	r2, r3, r4
 8002fc2:	2a01      	cmp	r2, #1
 8002fc4:	f240 815c 	bls.w	8003280 <ai_platform_api_get_network_report+0x71c>
 8002fc8:	f240 4249 	movw	r2, #1097	; 0x449
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	f000 8157 	beq.w	8003280 <ai_platform_api_get_network_report+0x71c>
 8002fd2:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <ai_platform_api_get_network_report+0x5dc>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002fda:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8002fde:	f000 816b 	beq.w	80032b8 <ai_platform_api_get_network_report+0x754>
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f240 4183 	movw	r1, #1155	; 0x483
 8002fe8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002fec:	428a      	cmp	r2, r1
 8002fee:	f000 8183 	beq.w	80032f8 <ai_platform_api_get_network_report+0x794>
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002ffc:	f000 816e 	beq.w	80032dc <ai_platform_api_get_network_report+0x778>
 8003000:	f7ff f948 	bl	8002294 <_ai_platform_release_crc>
 8003004:	9c01      	ldr	r4, [sp, #4]
 8003006:	f240 5301 	movw	r3, #1281	; 0x501
 800300a:	62a3      	str	r3, [r4, #40]	; 0x28
 800300c:	f8db 0048 	ldr.w	r0, [fp, #72]	; 0x48
 8003010:	f001 ffe2 	bl	8004fd8 <ai_platform_version_get>
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <ai_platform_api_get_network_report+0x5e4>)
 8003016:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003018:	6220      	str	r0, [r4, #32]
 800301a:	429a      	cmp	r2, r3
 800301c:	f040 8102 	bne.w	8003224 <ai_platform_api_get_network_report+0x6c0>
 8003020:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8003024:	4623      	mov	r3, r4
 8003026:	e895 0003 	ldmia.w	r5, {r0, r1}
 800302a:	3340      	adds	r3, #64	; 0x40
 800302c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003030:	2201      	movs	r2, #1
 8003032:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003036:	9202      	str	r2, [sp, #8]
 8003038:	e883 0003 	stmia.w	r3, {r0, r1}
 800303c:	e664      	b.n	8002d08 <ai_platform_api_get_network_report+0x1a4>
 800303e:	4a43      	ldr	r2, [pc, #268]	; (800314c <ai_platform_api_get_network_report+0x5e8>)
 8003040:	2301      	movs	r3, #1
 8003042:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003046:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1fb      	bne.n	8003046 <ai_platform_api_get_network_report+0x4e2>
 800304e:	4b40      	ldr	r3, [pc, #256]	; (8003150 <ai_platform_api_get_network_report+0x5ec>)
 8003050:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003054:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <ai_platform_api_get_network_report+0x5f0>)
 8003056:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800305a:	429a      	cmp	r2, r3
 800305c:	f43f adba 	beq.w	8002bd4 <ai_platform_api_get_network_report+0x70>
 8003060:	e7fe      	b.n	8003060 <ai_platform_api_get_network_report+0x4fc>
 8003062:	9901      	ldr	r1, [sp, #4]
 8003064:	2300      	movs	r3, #0
 8003066:	2218      	movs	r2, #24
 8003068:	f10b 0010 	add.w	r0, fp, #16
 800306c:	864b      	strh	r3, [r1, #50]	; 0x32
 800306e:	2113      	movs	r1, #19
 8003070:	f001 f8a8 	bl	80041c4 <core_set_error>
 8003074:	e648      	b.n	8002d08 <ai_platform_api_get_network_report+0x1a4>
 8003076:	2218      	movs	r2, #24
 8003078:	2111      	movs	r1, #17
 800307a:	f10b 0010 	add.w	r0, fp, #16
 800307e:	f001 f8a1 	bl	80041c4 <core_set_error>
 8003082:	e641      	b.n	8002d08 <ai_platform_api_get_network_report+0x1a4>
 8003084:	4a34      	ldr	r2, [pc, #208]	; (8003158 <ai_platform_api_get_network_report+0x5f4>)
 8003086:	2301      	movs	r3, #1
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	6893      	ldr	r3, [r2, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1fc      	bne.n	800308a <ai_platform_api_get_network_report+0x526>
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <ai_platform_api_get_network_report+0x5ec>)
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <ai_platform_api_get_network_report+0x5f0>)
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	f43f af18 	beq.w	8002ece <ai_platform_api_get_network_report+0x36a>
 800309e:	e7fe      	b.n	800309e <ai_platform_api_get_network_report+0x53a>
 80030a0:	f8bb 301e 	ldrh.w	r3, [fp, #30]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f43f aee0 	beq.w	8002e6a <ai_platform_api_get_network_report+0x306>
 80030aa:	2212      	movs	r2, #18
 80030ac:	2111      	movs	r1, #17
 80030ae:	f10b 0010 	add.w	r0, fp, #16
 80030b2:	f001 f887 	bl	80041c4 <core_set_error>
 80030b6:	e627      	b.n	8002d08 <ai_platform_api_get_network_report+0x1a4>
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <ai_platform_api_get_network_report+0x5e8>)
 80030ba:	2301      	movs	r3, #1
 80030bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80030c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1fb      	bne.n	80030c0 <ai_platform_api_get_network_report+0x55c>
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <ai_platform_api_get_network_report+0x5ec>)
 80030ca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <ai_platform_api_get_network_report+0x5f0>)
 80030d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80030d4:	429a      	cmp	r2, r3
 80030d6:	f43f aefa 	beq.w	8002ece <ai_platform_api_get_network_report+0x36a>
 80030da:	e7fe      	b.n	80030da <ai_platform_api_get_network_report+0x576>
 80030dc:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <ai_platform_api_get_network_report+0x5f4>)
 80030de:	2301      	movs	r3, #1
 80030e0:	6093      	str	r3, [r2, #8]
 80030e2:	6893      	ldr	r3, [r2, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1fc      	bne.n	80030e2 <ai_platform_api_get_network_report+0x57e>
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <ai_platform_api_get_network_report+0x5ec>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <ai_platform_api_get_network_report+0x5f0>)
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f43f af1f 	beq.w	8002f34 <ai_platform_api_get_network_report+0x3d0>
 80030f6:	e7fe      	b.n	80030f6 <ai_platform_api_get_network_report+0x592>
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <ai_platform_api_get_network_report+0x5e8>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003100:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003104:	2a00      	cmp	r2, #0
 8003106:	d1fb      	bne.n	8003100 <ai_platform_api_get_network_report+0x59c>
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <ai_platform_api_get_network_report+0x5ec>)
 800310a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800310e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <ai_platform_api_get_network_report+0x5f0>)
 8003114:	429a      	cmp	r2, r3
 8003116:	f43f aeda 	beq.w	8002ece <ai_platform_api_get_network_report+0x36a>
 800311a:	e7fe      	b.n	800311a <ai_platform_api_get_network_report+0x5b6>
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <ai_platform_api_get_network_report+0x5f4>)
 800311e:	2201      	movs	r2, #1
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	2a00      	cmp	r2, #0
 8003126:	d1fc      	bne.n	8003122 <ai_platform_api_get_network_report+0x5be>
 8003128:	4a09      	ldr	r2, [pc, #36]	; (8003150 <ai_platform_api_get_network_report+0x5ec>)
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <ai_platform_api_get_network_report+0x5f0>)
 8003130:	429a      	cmp	r2, r3
 8003132:	f43f af32 	beq.w	8002f9a <ai_platform_api_get_network_report+0x436>
 8003136:	e7fe      	b.n	8003136 <ai_platform_api_get_network_report+0x5d2>
 8003138:	e0002000 	.word	0xe0002000
 800313c:	e0042000 	.word	0xe0042000
 8003140:	5c001000 	.word	0x5c001000
 8003144:	080085a8 	.word	0x080085a8
 8003148:	a1facade 	.word	0xa1facade
 800314c:	58024000 	.word	0x58024000
 8003150:	f407a5c2 	.word	0xf407a5c2
 8003154:	b5e8b5cd 	.word	0xb5e8b5cd
 8003158:	40023000 	.word	0x40023000
 800315c:	4b86      	ldr	r3, [pc, #536]	; (8003378 <ai_platform_api_get_network_report+0x814>)
 800315e:	2201      	movs	r2, #1
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	2a00      	cmp	r2, #0
 8003166:	d1fc      	bne.n	8003162 <ai_platform_api_get_network_report+0x5fe>
 8003168:	4a84      	ldr	r2, [pc, #528]	; (800337c <ai_platform_api_get_network_report+0x818>)
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b84      	ldr	r3, [pc, #528]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 8003170:	429a      	cmp	r2, r3
 8003172:	f43f aeac 	beq.w	8002ece <ai_platform_api_get_network_report+0x36a>
 8003176:	e7fe      	b.n	8003176 <ai_platform_api_get_network_report+0x612>
 8003178:	4b82      	ldr	r3, [pc, #520]	; (8003384 <ai_platform_api_get_network_report+0x820>)
 800317a:	2201      	movs	r2, #1
 800317c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003180:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003184:	2a00      	cmp	r2, #0
 8003186:	d1fb      	bne.n	8003180 <ai_platform_api_get_network_report+0x61c>
 8003188:	4a7c      	ldr	r2, [pc, #496]	; (800337c <ai_platform_api_get_network_report+0x818>)
 800318a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800318e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003192:	4b7b      	ldr	r3, [pc, #492]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 8003194:	429a      	cmp	r2, r3
 8003196:	f43f aecd 	beq.w	8002f34 <ai_platform_api_get_network_report+0x3d0>
 800319a:	e7fe      	b.n	800319a <ai_platform_api_get_network_report+0x636>
 800319c:	4b79      	ldr	r3, [pc, #484]	; (8003384 <ai_platform_api_get_network_report+0x820>)
 800319e:	2201      	movs	r2, #1
 80031a0:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80031a4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80031a8:	2a00      	cmp	r2, #0
 80031aa:	d1fb      	bne.n	80031a4 <ai_platform_api_get_network_report+0x640>
 80031ac:	4a73      	ldr	r2, [pc, #460]	; (800337c <ai_platform_api_get_network_report+0x818>)
 80031ae:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80031b2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80031b6:	4b72      	ldr	r3, [pc, #456]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	f43f aebb 	beq.w	8002f34 <ai_platform_api_get_network_report+0x3d0>
 80031be:	e7fe      	b.n	80031be <ai_platform_api_get_network_report+0x65a>
 80031c0:	4b6d      	ldr	r3, [pc, #436]	; (8003378 <ai_platform_api_get_network_report+0x814>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	2a00      	cmp	r2, #0
 80031ca:	d1fc      	bne.n	80031c6 <ai_platform_api_get_network_report+0x662>
 80031cc:	4a6b      	ldr	r2, [pc, #428]	; (800337c <ai_platform_api_get_network_report+0x818>)
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b6b      	ldr	r3, [pc, #428]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f43f aead 	beq.w	8002f34 <ai_platform_api_get_network_report+0x3d0>
 80031da:	e7fe      	b.n	80031da <ai_platform_api_get_network_report+0x676>
 80031dc:	4b69      	ldr	r3, [pc, #420]	; (8003384 <ai_platform_api_get_network_report+0x820>)
 80031de:	2201      	movs	r2, #1
 80031e0:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80031e4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d1fb      	bne.n	80031e4 <ai_platform_api_get_network_report+0x680>
 80031ec:	4a63      	ldr	r2, [pc, #396]	; (800337c <ai_platform_api_get_network_report+0x818>)
 80031ee:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80031f2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80031f6:	4b62      	ldr	r3, [pc, #392]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 80031f8:	429a      	cmp	r2, r3
 80031fa:	f43f aece 	beq.w	8002f9a <ai_platform_api_get_network_report+0x436>
 80031fe:	e7fe      	b.n	80031fe <ai_platform_api_get_network_report+0x69a>
 8003200:	4b60      	ldr	r3, [pc, #384]	; (8003384 <ai_platform_api_get_network_report+0x820>)
 8003202:	2201      	movs	r2, #1
 8003204:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003208:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800320c:	2a00      	cmp	r2, #0
 800320e:	d1fb      	bne.n	8003208 <ai_platform_api_get_network_report+0x6a4>
 8003210:	4a5a      	ldr	r2, [pc, #360]	; (800337c <ai_platform_api_get_network_report+0x818>)
 8003212:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003216:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800321a:	4b59      	ldr	r3, [pc, #356]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 800321c:	429a      	cmp	r2, r3
 800321e:	f43f aebc 	beq.w	8002f9a <ai_platform_api_get_network_report+0x436>
 8003222:	e7fe      	b.n	8003222 <ai_platform_api_get_network_report+0x6be>
 8003224:	9901      	ldr	r1, [sp, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f10d 0810 	add.w	r8, sp, #16
 800322c:	4b56      	ldr	r3, [pc, #344]	; (8003388 <ai_platform_api_get_network_report+0x824>)
 800322e:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 8003232:	f101 0758 	add.w	r7, r1, #88	; 0x58
 8003236:	f8c1 8054 	str.w	r8, [r1, #84]	; 0x54
 800323a:	46a6      	mov	lr, r4
 800323c:	46bc      	mov	ip, r7
 800323e:	e9c1 2210 	strd	r2, r2, [r1, #64]	; 0x40
 8003242:	e9c1 2212 	strd	r2, r2, [r1, #72]	; 0x48
 8003246:	4a51      	ldr	r2, [pc, #324]	; (800338c <ai_platform_api_get_network_report+0x828>)
 8003248:	63ca      	str	r2, [r1, #60]	; 0x3c
 800324a:	f240 4201 	movw	r2, #1025	; 0x401
 800324e:	650a      	str	r2, [r1, #80]	; 0x50
 8003250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003252:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8003256:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800325a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800325e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003262:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003266:	4628      	mov	r0, r5
 8003268:	f7fe fff8 	bl	800225c <ai_buffer_array_sane>
 800326c:	2800      	cmp	r0, #0
 800326e:	d162      	bne.n	8003336 <ai_platform_api_get_network_report+0x7d2>
 8003270:	4630      	mov	r0, r6
 8003272:	f7fe fff3 	bl	800225c <ai_buffer_array_sane>
 8003276:	2800      	cmp	r0, #0
 8003278:	d150      	bne.n	800331c <ai_platform_api_get_network_report+0x7b8>
 800327a:	2301      	movs	r3, #1
 800327c:	9302      	str	r3, [sp, #8]
 800327e:	e543      	b.n	8002d08 <ai_platform_api_get_network_report+0x1a4>
 8003280:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <ai_platform_api_get_network_report+0x814>)
 8003282:	2201      	movs	r2, #1
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	2a00      	cmp	r2, #0
 800328a:	d1fc      	bne.n	8003286 <ai_platform_api_get_network_report+0x722>
 800328c:	4a3b      	ldr	r2, [pc, #236]	; (800337c <ai_platform_api_get_network_report+0x818>)
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 8003294:	429a      	cmp	r2, r3
 8003296:	f43f aeb3 	beq.w	8003000 <ai_platform_api_get_network_report+0x49c>
 800329a:	e7fe      	b.n	800329a <ai_platform_api_get_network_report+0x736>
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <ai_platform_api_get_network_report+0x814>)
 800329e:	2201      	movs	r2, #1
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	2a00      	cmp	r2, #0
 80032a6:	d1fc      	bne.n	80032a2 <ai_platform_api_get_network_report+0x73e>
 80032a8:	4a34      	ldr	r2, [pc, #208]	; (800337c <ai_platform_api_get_network_report+0x818>)
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b34      	ldr	r3, [pc, #208]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 80032b0:	429a      	cmp	r2, r3
 80032b2:	f43f ae72 	beq.w	8002f9a <ai_platform_api_get_network_report+0x436>
 80032b6:	e7fe      	b.n	80032b6 <ai_platform_api_get_network_report+0x752>
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <ai_platform_api_get_network_report+0x820>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80032c0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	d1fb      	bne.n	80032c0 <ai_platform_api_get_network_report+0x75c>
 80032c8:	4a2c      	ldr	r2, [pc, #176]	; (800337c <ai_platform_api_get_network_report+0x818>)
 80032ca:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80032ce:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80032d2:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f43f ae93 	beq.w	8003000 <ai_platform_api_get_network_report+0x49c>
 80032da:	e7fe      	b.n	80032da <ai_platform_api_get_network_report+0x776>
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <ai_platform_api_get_network_report+0x814>)
 80032de:	2201      	movs	r2, #1
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d1fc      	bne.n	80032e2 <ai_platform_api_get_network_report+0x77e>
 80032e8:	4a24      	ldr	r2, [pc, #144]	; (800337c <ai_platform_api_get_network_report+0x818>)
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f43f ae85 	beq.w	8003000 <ai_platform_api_get_network_report+0x49c>
 80032f6:	e7fe      	b.n	80032f6 <ai_platform_api_get_network_report+0x792>
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <ai_platform_api_get_network_report+0x820>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003300:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8003304:	2a00      	cmp	r2, #0
 8003306:	d1fb      	bne.n	8003300 <ai_platform_api_get_network_report+0x79c>
 8003308:	4a1c      	ldr	r2, [pc, #112]	; (800337c <ai_platform_api_get_network_report+0x818>)
 800330a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800330e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <ai_platform_api_get_network_report+0x81c>)
 8003314:	429a      	cmp	r2, r3
 8003316:	f43f ae73 	beq.w	8003000 <ai_platform_api_get_network_report+0x49c>
 800331a:	e7fe      	b.n	800331a <ai_platform_api_get_network_report+0x7b6>
 800331c:	4630      	mov	r0, r6
 800331e:	f7fe ff9d 	bl	800225c <ai_buffer_array_sane>
 8003322:	b1b8      	cbz	r0, 8003354 <ai_platform_api_get_network_report+0x7f0>
 8003324:	f8db 5020 	ldr.w	r5, [fp, #32]
 8003328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800332a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800332c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003334:	e7a1      	b.n	800327a <ai_platform_api_get_network_report+0x716>
 8003336:	4628      	mov	r0, r5
 8003338:	f7fe ff90 	bl	800225c <ai_buffer_array_sane>
 800333c:	b190      	cbz	r0, 8003364 <ai_platform_api_get_network_report+0x800>
 800333e:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28
 8003342:	463d      	mov	r5, r7
 8003344:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800334a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800334e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003352:	e78d      	b.n	8003270 <ai_platform_api_get_network_report+0x70c>
 8003354:	4605      	mov	r5, r0
 8003356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800335a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800335e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003362:	deff      	udf	#255	; 0xff
 8003364:	4604      	mov	r4, r0
 8003366:	463d      	mov	r5, r7
 8003368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800336c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003370:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003374:	deff      	udf	#255	; 0xff
 8003376:	bf00      	nop
 8003378:	40023000 	.word	0x40023000
 800337c:	f407a5c2 	.word	0xf407a5c2
 8003380:	b5e8b5cd 	.word	0xb5e8b5cd
 8003384:	58024000 	.word	0x58024000
 8003388:	08007f10 	.word	0x08007f10
 800338c:	00040440 	.word	0x00040440

08003390 <ai_platform_network_create>:
 8003390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003394:	b083      	sub	sp, #12
 8003396:	4604      	mov	r4, r0
 8003398:	4615      	mov	r5, r2
 800339a:	461e      	mov	r6, r3
 800339c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80033a0:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80033a4:	f7fe ff74 	bl	8002290 <_ai_platform_acquire_crc>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	f000 80ba 	beq.w	8003522 <ai_platform_network_create+0x192>
 80033ae:	4bb3      	ldr	r3, [pc, #716]	; (800367c <ai_platform_network_create+0x2ec>)
 80033b0:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80033b4:	4601      	mov	r1, r0
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033bc:	eb03 020c 	add.w	r2, r3, ip
 80033c0:	2a01      	cmp	r2, #1
 80033c2:	f240 80a5 	bls.w	8003510 <ai_platform_network_create+0x180>
 80033c6:	f240 4249 	movw	r2, #1097	; 0x449
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f000 80a0 	beq.w	8003510 <ai_platform_network_create+0x180>
 80033d0:	4aab      	ldr	r2, [pc, #684]	; (8003680 <ai_platform_network_create+0x2f0>)
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80033dc:	f000 80b7 	beq.w	800354e <ai_platform_network_create+0x1be>
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	f240 4c83 	movw	ip, #1155	; 0x483
 80033e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ea:	4563      	cmp	r3, ip
 80033ec:	f000 809f 	beq.w	800352e <ai_platform_network_create+0x19e>
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80033fa:	f040 8090 	bne.w	800351e <ai_platform_network_create+0x18e>
 80033fe:	4ba1      	ldr	r3, [pc, #644]	; (8003684 <ai_platform_network_create+0x2f4>)
 8003400:	2218      	movs	r2, #24
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	2a18      	cmp	r2, #24
 8003408:	f040 8089 	bne.w	800351e <ai_platform_network_create+0x18e>
 800340c:	2201      	movs	r2, #1
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	2a00      	cmp	r2, #0
 8003414:	d1fc      	bne.n	8003410 <ai_platform_network_create+0x80>
 8003416:	4608      	mov	r0, r1
 8003418:	f7fe ff3c 	bl	8002294 <_ai_platform_release_crc>
 800341c:	4a9a      	ldr	r2, [pc, #616]	; (8003688 <ai_platform_network_create+0x2f8>)
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	f7fe ff33 	bl	8002290 <_ai_platform_acquire_crc>
 800342a:	4b94      	ldr	r3, [pc, #592]	; (800367c <ai_platform_network_create+0x2ec>)
 800342c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003436:	189a      	adds	r2, r3, r2
 8003438:	2a01      	cmp	r2, #1
 800343a:	f240 809e 	bls.w	800357a <ai_platform_network_create+0x1ea>
 800343e:	f240 4249 	movw	r2, #1097	; 0x449
 8003442:	4293      	cmp	r3, r2
 8003444:	f000 8099 	beq.w	800357a <ai_platform_network_create+0x1ea>
 8003448:	4a8d      	ldr	r2, [pc, #564]	; (8003680 <ai_platform_network_create+0x2f0>)
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003450:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003454:	f000 809f 	beq.w	8003596 <ai_platform_network_create+0x206>
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	f240 4183 	movw	r1, #1155	; 0x483
 800345e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003462:	428b      	cmp	r3, r1
 8003464:	f000 80c0 	beq.w	80035e8 <ai_platform_network_create+0x258>
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003472:	f000 80d9 	beq.w	8003628 <ai_platform_network_create+0x298>
 8003476:	f7fe ff0d 	bl	8002294 <_ai_platform_release_crc>
 800347a:	2c00      	cmp	r4, #0
 800347c:	f000 80b1 	beq.w	80035e2 <ai_platform_network_create+0x252>
 8003480:	4b82      	ldr	r3, [pc, #520]	; (800368c <ai_platform_network_create+0x2fc>)
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	6025      	str	r5, [r4, #0]
 8003486:	f000 fe95 	bl	80041b4 <core_init>
 800348a:	2800      	cmp	r0, #0
 800348c:	f000 8095 	beq.w	80035ba <ai_platform_network_create+0x22a>
 8003490:	4a7d      	ldr	r2, [pc, #500]	; (8003688 <ai_platform_network_create+0x2f8>)
 8003492:	6813      	ldr	r3, [r2, #0]
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	f7fe fef9 	bl	8002290 <_ai_platform_acquire_crc>
 800349e:	4b77      	ldr	r3, [pc, #476]	; (800367c <ai_platform_network_create+0x2ec>)
 80034a0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034aa:	185a      	adds	r2, r3, r1
 80034ac:	2a01      	cmp	r2, #1
 80034ae:	f240 80ad 	bls.w	800360c <ai_platform_network_create+0x27c>
 80034b2:	f240 4249 	movw	r2, #1097	; 0x449
 80034b6:	4293      	cmp	r3, r2
 80034b8:	f000 80a8 	beq.w	800360c <ai_platform_network_create+0x27c>
 80034bc:	4a70      	ldr	r2, [pc, #448]	; (8003680 <ai_platform_network_create+0x2f0>)
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80034c8:	f000 80bc 	beq.w	8003644 <ai_platform_network_create+0x2b4>
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f240 4183 	movw	r1, #1155	; 0x483
 80034d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d6:	428b      	cmp	r3, r1
 80034d8:	f000 80e2 	beq.w	80036a0 <ai_platform_network_create+0x310>
 80034dc:	6813      	ldr	r3, [r2, #0]
 80034de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80034e6:	f000 80ed 	beq.w	80036c4 <ai_platform_network_create+0x334>
 80034ea:	f7fe fed3 	bl	8002294 <_ai_platform_release_crc>
 80034ee:	2200      	movs	r2, #0
 80034f0:	4639      	mov	r1, r7
 80034f2:	4630      	mov	r0, r6
 80034f4:	f001 fd6a 	bl	8004fcc <ai_version_get>
 80034f8:	4681      	mov	r9, r0
 80034fa:	2200      	movs	r2, #0
 80034fc:	2105      	movs	r1, #5
 80034fe:	2001      	movs	r0, #1
 8003500:	f001 fd64 	bl	8004fcc <ai_version_get>
 8003504:	4581      	cmp	r9, r0
 8003506:	f000 80af 	beq.w	8003668 <ai_platform_network_create+0x2d8>
 800350a:	f04f 0901 	mov.w	r9, #1
 800350e:	e056      	b.n	80035be <ai_platform_network_create+0x22e>
 8003510:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <ai_platform_network_create+0x2f4>)
 8003512:	2218      	movs	r2, #24
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	2a18      	cmp	r2, #24
 800351a:	d028      	beq.n	800356e <ai_platform_network_create+0x1de>
 800351c:	4608      	mov	r0, r1
 800351e:	f7fe feb9 	bl	8002294 <_ai_platform_release_crc>
 8003522:	f244 1333 	movw	r3, #16691	; 0x4133
 8003526:	4618      	mov	r0, r3
 8003528:	b003      	add	sp, #12
 800352a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800352e:	4a58      	ldr	r2, [pc, #352]	; (8003690 <ai_platform_network_create+0x300>)
 8003530:	2318      	movs	r3, #24
 8003532:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003536:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800353a:	2b18      	cmp	r3, #24
 800353c:	d1ef      	bne.n	800351e <ai_platform_network_create+0x18e>
 800353e:	2301      	movs	r3, #1
 8003540:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003544:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1fb      	bne.n	8003544 <ai_platform_network_create+0x1b4>
 800354c:	e763      	b.n	8003416 <ai_platform_network_create+0x86>
 800354e:	4a50      	ldr	r2, [pc, #320]	; (8003690 <ai_platform_network_create+0x300>)
 8003550:	2318      	movs	r3, #24
 8003552:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003556:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800355a:	2b18      	cmp	r3, #24
 800355c:	d1df      	bne.n	800351e <ai_platform_network_create+0x18e>
 800355e:	2301      	movs	r3, #1
 8003560:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003564:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1fb      	bne.n	8003564 <ai_platform_network_create+0x1d4>
 800356c:	e753      	b.n	8003416 <ai_platform_network_create+0x86>
 800356e:	2201      	movs	r2, #1
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	2a00      	cmp	r2, #0
 8003576:	d1fc      	bne.n	8003572 <ai_platform_network_create+0x1e2>
 8003578:	e74d      	b.n	8003416 <ai_platform_network_create+0x86>
 800357a:	4a42      	ldr	r2, [pc, #264]	; (8003684 <ai_platform_network_create+0x2f4>)
 800357c:	2301      	movs	r3, #1
 800357e:	6093      	str	r3, [r2, #8]
 8003580:	6891      	ldr	r1, [r2, #8]
 8003582:	2900      	cmp	r1, #0
 8003584:	d1fc      	bne.n	8003580 <ai_platform_network_create+0x1f0>
 8003586:	4b43      	ldr	r3, [pc, #268]	; (8003694 <ai_platform_network_create+0x304>)
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b43      	ldr	r3, [pc, #268]	; (8003698 <ai_platform_network_create+0x308>)
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	f43f af71 	beq.w	8003476 <ai_platform_network_create+0xe6>
 8003594:	e7fe      	b.n	8003594 <ai_platform_network_create+0x204>
 8003596:	4a3e      	ldr	r2, [pc, #248]	; (8003690 <ai_platform_network_create+0x300>)
 8003598:	2301      	movs	r3, #1
 800359a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800359e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1fb      	bne.n	800359e <ai_platform_network_create+0x20e>
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <ai_platform_network_create+0x304>)
 80035a8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80035ac:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <ai_platform_network_create+0x308>)
 80035ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80035b2:	429a      	cmp	r2, r3
 80035b4:	f43f af5f 	beq.w	8003476 <ai_platform_network_create+0xe6>
 80035b8:	e7fe      	b.n	80035b8 <ai_platform_network_create+0x228>
 80035ba:	f04f 0930 	mov.w	r9, #48	; 0x30
 80035be:	2300      	movs	r3, #0
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	2410      	movs	r4, #16
 80035c4:	4642      	mov	r2, r8
 80035c6:	4639      	mov	r1, r7
 80035c8:	4630      	mov	r0, r6
 80035ca:	f001 fcff 	bl	8004fcc <ai_version_get>
 80035ce:	2300      	movs	r3, #0
 80035d0:	64a8      	str	r0, [r5, #72]	; 0x48
 80035d2:	f369 0307 	bfi	r3, r9, #0, #8
 80035d6:	f364 231f 	bfi	r3, r4, #8, #24
 80035da:	4618      	mov	r0, r3
 80035dc:	b003      	add	sp, #12
 80035de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035e2:	f241 0310 	movw	r3, #4112	; 0x1010
 80035e6:	e79e      	b.n	8003526 <ai_platform_network_create+0x196>
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <ai_platform_network_create+0x300>)
 80035ea:	2301      	movs	r3, #1
 80035ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1fb      	bne.n	80035f0 <ai_platform_network_create+0x260>
 80035f8:	4b26      	ldr	r3, [pc, #152]	; (8003694 <ai_platform_network_create+0x304>)
 80035fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <ai_platform_network_create+0x308>)
 8003600:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003604:	429a      	cmp	r2, r3
 8003606:	f43f af36 	beq.w	8003476 <ai_platform_network_create+0xe6>
 800360a:	e7fe      	b.n	800360a <ai_platform_network_create+0x27a>
 800360c:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <ai_platform_network_create+0x2f4>)
 800360e:	2301      	movs	r3, #1
 8003610:	6093      	str	r3, [r2, #8]
 8003612:	6893      	ldr	r3, [r2, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1fc      	bne.n	8003612 <ai_platform_network_create+0x282>
 8003618:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <ai_platform_network_create+0x304>)
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <ai_platform_network_create+0x308>)
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	f43f af62 	beq.w	80034ea <ai_platform_network_create+0x15a>
 8003626:	e7fe      	b.n	8003626 <ai_platform_network_create+0x296>
 8003628:	4a16      	ldr	r2, [pc, #88]	; (8003684 <ai_platform_network_create+0x2f4>)
 800362a:	2301      	movs	r3, #1
 800362c:	6093      	str	r3, [r2, #8]
 800362e:	6893      	ldr	r3, [r2, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1fc      	bne.n	800362e <ai_platform_network_create+0x29e>
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <ai_platform_network_create+0x304>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <ai_platform_network_create+0x308>)
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	f43f af1a 	beq.w	8003476 <ai_platform_network_create+0xe6>
 8003642:	e7fe      	b.n	8003642 <ai_platform_network_create+0x2b2>
 8003644:	4a12      	ldr	r2, [pc, #72]	; (8003690 <ai_platform_network_create+0x300>)
 8003646:	2301      	movs	r3, #1
 8003648:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800364c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1fb      	bne.n	800364c <ai_platform_network_create+0x2bc>
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <ai_platform_network_create+0x304>)
 8003656:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <ai_platform_network_create+0x308>)
 800365c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003660:	429a      	cmp	r2, r3
 8003662:	f43f af42 	beq.w	80034ea <ai_platform_network_create+0x15a>
 8003666:	e7fe      	b.n	8003666 <ai_platform_network_create+0x2d6>
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <ai_platform_network_create+0x30c>)
 800366a:	a801      	add	r0, sp, #4
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	f001 fc17 	bl	8004ea0 <ai_check_custom_types>
 8003672:	2800      	cmp	r0, #0
 8003674:	d034      	beq.n	80036e0 <ai_platform_network_create+0x350>
 8003676:	2400      	movs	r4, #0
 8003678:	46a1      	mov	r9, r4
 800367a:	e7a3      	b.n	80035c4 <ai_platform_network_create+0x234>
 800367c:	e0042000 	.word	0xe0042000
 8003680:	5c001000 	.word	0x5c001000
 8003684:	40023000 	.word	0x40023000
 8003688:	e0002000 	.word	0xe0002000
 800368c:	a1c00100 	.word	0xa1c00100
 8003690:	58024000 	.word	0x58024000
 8003694:	f407a5c2 	.word	0xf407a5c2
 8003698:	b5e8b5cd 	.word	0xb5e8b5cd
 800369c:	84048403 	.word	0x84048403
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <ai_platform_network_create+0x358>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80036a8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d1fb      	bne.n	80036a8 <ai_platform_network_create+0x318>
 80036b0:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <ai_platform_network_create+0x35c>)
 80036b2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80036b6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <ai_platform_network_create+0x360>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	f43f af14 	beq.w	80034ea <ai_platform_network_create+0x15a>
 80036c2:	e7fe      	b.n	80036c2 <ai_platform_network_create+0x332>
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <ai_platform_network_create+0x364>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	d1fc      	bne.n	80036ca <ai_platform_network_create+0x33a>
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <ai_platform_network_create+0x35c>)
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <ai_platform_network_create+0x360>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	f43f af06 	beq.w	80034ea <ai_platform_network_create+0x15a>
 80036de:	e7fe      	b.n	80036de <ai_platform_network_create+0x34e>
 80036e0:	f04f 0902 	mov.w	r9, #2
 80036e4:	e76b      	b.n	80035be <ai_platform_network_create+0x22e>
 80036e6:	bf00      	nop
 80036e8:	58024000 	.word	0x58024000
 80036ec:	f407a5c2 	.word	0xf407a5c2
 80036f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80036f4:	40023000 	.word	0x40023000

080036f8 <ai_platform_network_init>:
 80036f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d04f      	beq.n	80037a0 <ai_platform_network_init+0xa8>
 8003700:	4bad      	ldr	r3, [pc, #692]	; (80039b8 <ai_platform_network_init+0x2c0>)
 8003702:	4604      	mov	r4, r0
 8003704:	6802      	ldr	r2, [r0, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d14a      	bne.n	80037a0 <ai_platform_network_init+0xa8>
 800370a:	4aac      	ldr	r2, [pc, #688]	; (80039bc <ai_platform_network_init+0x2c4>)
 800370c:	460d      	mov	r5, r1
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	f7fe fdbb 	bl	8002290 <_ai_platform_acquire_crc>
 800371a:	4ba9      	ldr	r3, [pc, #676]	; (80039c0 <ai_platform_network_init+0x2c8>)
 800371c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003726:	189a      	adds	r2, r3, r2
 8003728:	2a01      	cmp	r2, #1
 800372a:	d975      	bls.n	8003818 <ai_platform_network_init+0x120>
 800372c:	f240 4249 	movw	r2, #1097	; 0x449
 8003730:	4293      	cmp	r3, r2
 8003732:	d071      	beq.n	8003818 <ai_platform_network_init+0x120>
 8003734:	4aa3      	ldr	r2, [pc, #652]	; (80039c4 <ai_platform_network_init+0x2cc>)
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800373c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003740:	f000 8088 	beq.w	8003854 <ai_platform_network_init+0x15c>
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	f240 4183 	movw	r1, #1155	; 0x483
 800374a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800374e:	428b      	cmp	r3, r1
 8003750:	f000 80cc 	beq.w	80038ec <ai_platform_network_init+0x1f4>
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800375a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800375e:	f000 80f5 	beq.w	800394c <ai_platform_network_init+0x254>
 8003762:	f7fe fd97 	bl	8002294 <_ai_platform_release_crc>
 8003766:	2d00      	cmp	r5, #0
 8003768:	f000 80fe 	beq.w	8003968 <ai_platform_network_init+0x270>
 800376c:	4b96      	ldr	r3, [pc, #600]	; (80039c8 <ai_platform_network_init+0x2d0>)
 800376e:	682a      	ldr	r2, [r5, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	f040 8081 	bne.w	8003878 <ai_platform_network_init+0x180>
 8003776:	692b      	ldr	r3, [r5, #16]
 8003778:	89ae      	ldrh	r6, [r5, #12]
 800377a:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800377e:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8003782:	62a3      	str	r3, [r4, #40]	; 0x28
 8003784:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8003788:	2303      	movs	r3, #3
 800378a:	84a6      	strh	r6, [r4, #36]	; 0x24
 800378c:	4626      	mov	r6, r4
 800378e:	4620      	mov	r0, r4
 8003790:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8003794:	60e3      	str	r3, [r4, #12]
 8003796:	f001 fbab 	bl	8004ef0 <ai_layers_init_all>
 800379a:	4630      	mov	r0, r6
 800379c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037a0:	4a86      	ldr	r2, [pc, #536]	; (80039bc <ai_platform_network_init+0x2c4>)
 80037a2:	6813      	ldr	r3, [r2, #0]
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	f7fe fd71 	bl	8002290 <_ai_platform_acquire_crc>
 80037ae:	4b84      	ldr	r3, [pc, #528]	; (80039c0 <ai_platform_network_init+0x2c8>)
 80037b0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ba:	185a      	adds	r2, r3, r1
 80037bc:	2a01      	cmp	r2, #1
 80037be:	d91e      	bls.n	80037fe <ai_platform_network_init+0x106>
 80037c0:	f240 4249 	movw	r2, #1097	; 0x449
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d01a      	beq.n	80037fe <ai_platform_network_init+0x106>
 80037c8:	4a7e      	ldr	r2, [pc, #504]	; (80039c4 <ai_platform_network_init+0x2cc>)
 80037ca:	6813      	ldr	r3, [r2, #0]
 80037cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80037d4:	d02d      	beq.n	8003832 <ai_platform_network_init+0x13a>
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	f240 4183 	movw	r1, #1155	; 0x483
 80037dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e0:	428b      	cmp	r3, r1
 80037e2:	d072      	beq.n	80038ca <ai_platform_network_init+0x1d2>
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ea:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80037ee:	f000 809f 	beq.w	8003930 <ai_platform_network_init+0x238>
 80037f2:	2600      	movs	r6, #0
 80037f4:	f7fe fd4e 	bl	8002294 <_ai_platform_release_crc>
 80037f8:	4630      	mov	r0, r6
 80037fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037fe:	4a73      	ldr	r2, [pc, #460]	; (80039cc <ai_platform_network_init+0x2d4>)
 8003800:	2301      	movs	r3, #1
 8003802:	6093      	str	r3, [r2, #8]
 8003804:	6893      	ldr	r3, [r2, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1fc      	bne.n	8003804 <ai_platform_network_init+0x10c>
 800380a:	4971      	ldr	r1, [pc, #452]	; (80039d0 <ai_platform_network_init+0x2d8>)
 800380c:	4b71      	ldr	r3, [pc, #452]	; (80039d4 <ai_platform_network_init+0x2dc>)
 800380e:	6011      	str	r1, [r2, #0]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d0ed      	beq.n	80037f2 <ai_platform_network_init+0xfa>
 8003816:	e7fe      	b.n	8003816 <ai_platform_network_init+0x11e>
 8003818:	4a6c      	ldr	r2, [pc, #432]	; (80039cc <ai_platform_network_init+0x2d4>)
 800381a:	2301      	movs	r3, #1
 800381c:	6093      	str	r3, [r2, #8]
 800381e:	6893      	ldr	r3, [r2, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1fc      	bne.n	800381e <ai_platform_network_init+0x126>
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <ai_platform_network_init+0x2d8>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <ai_platform_network_init+0x2dc>)
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d098      	beq.n	8003762 <ai_platform_network_init+0x6a>
 8003830:	e7fe      	b.n	8003830 <ai_platform_network_init+0x138>
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <ai_platform_network_init+0x2e0>)
 8003834:	2301      	movs	r3, #1
 8003836:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800383a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1fb      	bne.n	800383a <ai_platform_network_init+0x142>
 8003842:	4963      	ldr	r1, [pc, #396]	; (80039d0 <ai_platform_network_init+0x2d8>)
 8003844:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <ai_platform_network_init+0x2dc>)
 8003846:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800384a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800384e:	429a      	cmp	r2, r3
 8003850:	d0cf      	beq.n	80037f2 <ai_platform_network_init+0xfa>
 8003852:	e7fe      	b.n	8003852 <ai_platform_network_init+0x15a>
 8003854:	4a60      	ldr	r2, [pc, #384]	; (80039d8 <ai_platform_network_init+0x2e0>)
 8003856:	2301      	movs	r3, #1
 8003858:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800385c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1fb      	bne.n	800385c <ai_platform_network_init+0x164>
 8003864:	4b5a      	ldr	r3, [pc, #360]	; (80039d0 <ai_platform_network_init+0x2d8>)
 8003866:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800386a:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <ai_platform_network_init+0x2dc>)
 800386c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003870:	429a      	cmp	r2, r3
 8003872:	f43f af76 	beq.w	8003762 <ai_platform_network_init+0x6a>
 8003876:	e7fe      	b.n	8003876 <ai_platform_network_init+0x17e>
 8003878:	2101      	movs	r1, #1
 800387a:	4628      	mov	r0, r5
 800387c:	f105 081c 	add.w	r8, r5, #28
 8003880:	686e      	ldr	r6, [r5, #4]
 8003882:	f7fe fcb7 	bl	80021f4 <ai_buffer_get_size>
 8003886:	4607      	mov	r7, r0
 8003888:	2101      	movs	r1, #1
 800388a:	4640      	mov	r0, r8
 800388c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8003890:	f7fe fcb0 	bl	80021f4 <ai_buffer_get_size>
 8003894:	2f00      	cmp	r7, #0
 8003896:	d13b      	bne.n	8003910 <ai_platform_network_init+0x218>
 8003898:	2800      	cmp	r0, #0
 800389a:	d079      	beq.n	8003990 <ai_platform_network_init+0x298>
 800389c:	f1b9 0f00 	cmp.w	r9, #0
 80038a0:	d07a      	beq.n	8003998 <ai_platform_network_init+0x2a0>
 80038a2:	f04f 0c01 	mov.w	ip, #1
 80038a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80038a8:	2600      	movs	r6, #0
 80038aa:	83e7      	strh	r7, [r4, #30]
 80038ac:	4563      	cmp	r3, ip
 80038ae:	83a6      	strh	r6, [r4, #28]
 80038b0:	d361      	bcc.n	8003976 <ai_platform_network_init+0x27e>
 80038b2:	f1bc 0f00 	cmp.w	ip, #0
 80038b6:	d07c      	beq.n	80039b2 <ai_platform_network_init+0x2ba>
 80038b8:	4647      	mov	r7, r8
 80038ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80038bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80038be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80038c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80038c8:	e75e      	b.n	8003788 <ai_platform_network_init+0x90>
 80038ca:	4a43      	ldr	r2, [pc, #268]	; (80039d8 <ai_platform_network_init+0x2e0>)
 80038cc:	2301      	movs	r3, #1
 80038ce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80038d2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1fb      	bne.n	80038d2 <ai_platform_network_init+0x1da>
 80038da:	493d      	ldr	r1, [pc, #244]	; (80039d0 <ai_platform_network_init+0x2d8>)
 80038dc:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <ai_platform_network_init+0x2dc>)
 80038de:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80038e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d083      	beq.n	80037f2 <ai_platform_network_init+0xfa>
 80038ea:	e7fe      	b.n	80038ea <ai_platform_network_init+0x1f2>
 80038ec:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <ai_platform_network_init+0x2e0>)
 80038ee:	2301      	movs	r3, #1
 80038f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80038f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1fb      	bne.n	80038f4 <ai_platform_network_init+0x1fc>
 80038fc:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <ai_platform_network_init+0x2d8>)
 80038fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003902:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <ai_platform_network_init+0x2dc>)
 8003904:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003908:	429a      	cmp	r2, r3
 800390a:	f43f af2a 	beq.w	8003762 <ai_platform_network_init+0x6a>
 800390e:	e7fe      	b.n	800390e <ai_platform_network_init+0x216>
 8003910:	2800      	cmp	r0, #0
 8003912:	d137      	bne.n	8003984 <ai_platform_network_init+0x28c>
 8003914:	4680      	mov	r8, r0
 8003916:	4684      	mov	ip, r0
 8003918:	2e00      	cmp	r6, #0
 800391a:	d044      	beq.n	80039a6 <ai_platform_network_init+0x2ae>
 800391c:	8be6      	ldrh	r6, [r4, #30]
 800391e:	2e00      	cmp	r6, #0
 8003920:	d15c      	bne.n	80039dc <ai_platform_network_init+0x2e4>
 8003922:	2212      	movs	r2, #18
 8003924:	2116      	movs	r1, #22
 8003926:	f104 0010 	add.w	r0, r4, #16
 800392a:	f000 fc4b 	bl	80041c4 <core_set_error>
 800392e:	e763      	b.n	80037f8 <ai_platform_network_init+0x100>
 8003930:	4a26      	ldr	r2, [pc, #152]	; (80039cc <ai_platform_network_init+0x2d4>)
 8003932:	2301      	movs	r3, #1
 8003934:	6093      	str	r3, [r2, #8]
 8003936:	6893      	ldr	r3, [r2, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1fc      	bne.n	8003936 <ai_platform_network_init+0x23e>
 800393c:	4924      	ldr	r1, [pc, #144]	; (80039d0 <ai_platform_network_init+0x2d8>)
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <ai_platform_network_init+0x2dc>)
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	f43f af54 	beq.w	80037f2 <ai_platform_network_init+0xfa>
 800394a:	e7fe      	b.n	800394a <ai_platform_network_init+0x252>
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <ai_platform_network_init+0x2d4>)
 800394e:	2301      	movs	r3, #1
 8003950:	6093      	str	r3, [r2, #8]
 8003952:	6893      	ldr	r3, [r2, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1fc      	bne.n	8003952 <ai_platform_network_init+0x25a>
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <ai_platform_network_init+0x2d8>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <ai_platform_network_init+0x2dc>)
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	f43f aefe 	beq.w	8003762 <ai_platform_network_init+0x6a>
 8003966:	e7fe      	b.n	8003966 <ai_platform_network_init+0x26e>
 8003968:	2110      	movs	r1, #16
 800396a:	2211      	movs	r2, #17
 800396c:	462e      	mov	r6, r5
 800396e:	1860      	adds	r0, r4, r1
 8003970:	f000 fc28 	bl	80041c4 <core_set_error>
 8003974:	e740      	b.n	80037f8 <ai_platform_network_init+0x100>
 8003976:	2213      	movs	r2, #19
 8003978:	2116      	movs	r1, #22
 800397a:	f104 0010 	add.w	r0, r4, #16
 800397e:	f000 fc21 	bl	80041c4 <core_set_error>
 8003982:	e739      	b.n	80037f8 <ai_platform_network_init+0x100>
 8003984:	f1b9 0f00 	cmp.w	r9, #0
 8003988:	d006      	beq.n	8003998 <ai_platform_network_init+0x2a0>
 800398a:	f04f 0c01 	mov.w	ip, #1
 800398e:	e7c3      	b.n	8003918 <ai_platform_network_init+0x220>
 8003990:	4607      	mov	r7, r0
 8003992:	4680      	mov	r8, r0
 8003994:	4684      	mov	ip, r0
 8003996:	e786      	b.n	80038a6 <ai_platform_network_init+0x1ae>
 8003998:	2110      	movs	r1, #16
 800399a:	2213      	movs	r2, #19
 800399c:	2600      	movs	r6, #0
 800399e:	1860      	adds	r0, r4, r1
 80039a0:	f000 fc10 	bl	80041c4 <core_set_error>
 80039a4:	e728      	b.n	80037f8 <ai_platform_network_init+0x100>
 80039a6:	2110      	movs	r1, #16
 80039a8:	2212      	movs	r2, #18
 80039aa:	1860      	adds	r0, r4, r1
 80039ac:	f000 fc0a 	bl	80041c4 <core_set_error>
 80039b0:	e722      	b.n	80037f8 <ai_platform_network_init+0x100>
 80039b2:	4666      	mov	r6, ip
 80039b4:	e6e8      	b.n	8003788 <ai_platform_network_init+0x90>
 80039b6:	bf00      	nop
 80039b8:	a1c00100 	.word	0xa1c00100
 80039bc:	e0002000 	.word	0xe0002000
 80039c0:	e0042000 	.word	0xe0042000
 80039c4:	5c001000 	.word	0x5c001000
 80039c8:	a1facade 	.word	0xa1facade
 80039cc:	40023000 	.word	0x40023000
 80039d0:	f407a5c2 	.word	0xf407a5c2
 80039d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80039d8:	58024000 	.word	0x58024000
 80039dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039de:	6a26      	ldr	r6, [r4, #32]
 80039e0:	2701      	movs	r7, #1
 80039e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80039e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039e8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80039ec:	e75b      	b.n	80038a6 <ai_platform_network_init+0x1ae>
 80039ee:	bf00      	nop

080039f0 <ai_platform_network_post_init>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d04a      	beq.n	8003a8c <ai_platform_network_post_init+0x9c>
 80039f6:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <ai_platform_network_post_init+0x1f8>)
 80039f8:	4604      	mov	r4, r0
 80039fa:	6802      	ldr	r2, [r0, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d145      	bne.n	8003a8c <ai_platform_network_post_init+0x9c>
 8003a00:	4a7a      	ldr	r2, [pc, #488]	; (8003bec <ai_platform_network_post_init+0x1fc>)
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	f7fe fc41 	bl	8002290 <_ai_platform_acquire_crc>
 8003a0e:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <ai_platform_network_post_init+0x200>)
 8003a10:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a1a:	189a      	adds	r2, r3, r2
 8003a1c:	2a01      	cmp	r2, #1
 8003a1e:	d96e      	bls.n	8003afe <ai_platform_network_post_init+0x10e>
 8003a20:	f240 4249 	movw	r2, #1097	; 0x449
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d06a      	beq.n	8003afe <ai_platform_network_post_init+0x10e>
 8003a28:	4a72      	ldr	r2, [pc, #456]	; (8003bf4 <ai_platform_network_post_init+0x204>)
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a30:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003a34:	f000 8081 	beq.w	8003b3a <ai_platform_network_post_init+0x14a>
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	f240 4183 	movw	r1, #1155	; 0x483
 8003a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a42:	428b      	cmp	r3, r1
 8003a44:	f000 80a3 	beq.w	8003b8e <ai_platform_network_post_init+0x19e>
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a4e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003a52:	f000 80bb 	beq.w	8003bcc <ai_platform_network_post_init+0x1dc>
 8003a56:	f7fe fc1d 	bl	8002294 <_ai_platform_release_crc>
 8003a5a:	68e3      	ldr	r3, [r4, #12]
 8003a5c:	f013 0502 	ands.w	r5, r3, #2
 8003a60:	d07d      	beq.n	8003b5e <ai_platform_network_post_init+0x16e>
 8003a62:	4620      	mov	r0, r4
 8003a64:	f001 fa52 	bl	8004f0c <ai_layers_post_init_all>
 8003a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a6a:	b16b      	cbz	r3, 8003a88 <ai_platform_network_post_init+0x98>
 8003a6c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003a6e:	e007      	b.n	8003a80 <ai_platform_network_post_init+0x90>
 8003a70:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003a74:	4798      	blx	r3
 8003a76:	692b      	ldr	r3, [r5, #16]
 8003a78:	b133      	cbz	r3, 8003a88 <ai_platform_network_post_init+0x98>
 8003a7a:	42ab      	cmp	r3, r5
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	d003      	beq.n	8003a88 <ai_platform_network_post_init+0x98>
 8003a80:	4629      	mov	r1, r5
 8003a82:	2000      	movs	r0, #0
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	d1f3      	bne.n	8003a70 <ai_platform_network_post_init+0x80>
 8003a88:	2001      	movs	r0, #1
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
 8003a8c:	4a57      	ldr	r2, [pc, #348]	; (8003bec <ai_platform_network_post_init+0x1fc>)
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	f7fe fbfb 	bl	8002290 <_ai_platform_acquire_crc>
 8003a9a:	4b55      	ldr	r3, [pc, #340]	; (8003bf0 <ai_platform_network_post_init+0x200>)
 8003a9c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa6:	185a      	adds	r2, r3, r1
 8003aa8:	2a01      	cmp	r2, #1
 8003aaa:	d91b      	bls.n	8003ae4 <ai_platform_network_post_init+0xf4>
 8003aac:	f240 4249 	movw	r2, #1097	; 0x449
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d017      	beq.n	8003ae4 <ai_platform_network_post_init+0xf4>
 8003ab4:	4a4f      	ldr	r2, [pc, #316]	; (8003bf4 <ai_platform_network_post_init+0x204>)
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003abc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003ac0:	d02a      	beq.n	8003b18 <ai_platform_network_post_init+0x128>
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	f240 4183 	movw	r1, #1155	; 0x483
 8003ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003acc:	428b      	cmp	r3, r1
 8003ace:	d04d      	beq.n	8003b6c <ai_platform_network_post_init+0x17c>
 8003ad0:	6813      	ldr	r3, [r2, #0]
 8003ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003ada:	d06a      	beq.n	8003bb2 <ai_platform_network_post_init+0x1c2>
 8003adc:	f7fe fbda 	bl	8002294 <_ai_platform_release_crc>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	4a44      	ldr	r2, [pc, #272]	; (8003bf8 <ai_platform_network_post_init+0x208>)
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	6093      	str	r3, [r2, #8]
 8003aea:	6893      	ldr	r3, [r2, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1fc      	bne.n	8003aea <ai_platform_network_post_init+0xfa>
 8003af0:	4942      	ldr	r1, [pc, #264]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003af2:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003af4:	6011      	str	r1, [r2, #0]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d0ef      	beq.n	8003adc <ai_platform_network_post_init+0xec>
 8003afc:	e7fe      	b.n	8003afc <ai_platform_network_post_init+0x10c>
 8003afe:	4a3e      	ldr	r2, [pc, #248]	; (8003bf8 <ai_platform_network_post_init+0x208>)
 8003b00:	2301      	movs	r3, #1
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	6893      	ldr	r3, [r2, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1fc      	bne.n	8003b04 <ai_platform_network_post_init+0x114>
 8003b0a:	493c      	ldr	r1, [pc, #240]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003b0e:	6011      	str	r1, [r2, #0]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d09f      	beq.n	8003a56 <ai_platform_network_post_init+0x66>
 8003b16:	e7fe      	b.n	8003b16 <ai_platform_network_post_init+0x126>
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <ai_platform_network_post_init+0x214>)
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1fb      	bne.n	8003b20 <ai_platform_network_post_init+0x130>
 8003b28:	4934      	ldr	r1, [pc, #208]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003b2c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003b30:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d0d1      	beq.n	8003adc <ai_platform_network_post_init+0xec>
 8003b38:	e7fe      	b.n	8003b38 <ai_platform_network_post_init+0x148>
 8003b3a:	4a32      	ldr	r2, [pc, #200]	; (8003c04 <ai_platform_network_post_init+0x214>)
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b42:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1fb      	bne.n	8003b42 <ai_platform_network_post_init+0x152>
 8003b4a:	492c      	ldr	r1, [pc, #176]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003b4e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003b52:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b56:	429a      	cmp	r2, r3
 8003b58:	f43f af7d 	beq.w	8003a56 <ai_platform_network_post_init+0x66>
 8003b5c:	e7fe      	b.n	8003b5c <ai_platform_network_post_init+0x16c>
 8003b5e:	2210      	movs	r2, #16
 8003b60:	2111      	movs	r1, #17
 8003b62:	18a0      	adds	r0, r4, r2
 8003b64:	f000 fb2e 	bl	80041c4 <core_set_error>
 8003b68:	4628      	mov	r0, r5
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <ai_platform_network_post_init+0x214>)
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1fb      	bne.n	8003b74 <ai_platform_network_post_init+0x184>
 8003b7c:	491f      	ldr	r1, [pc, #124]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003b80:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003b84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d0a7      	beq.n	8003adc <ai_platform_network_post_init+0xec>
 8003b8c:	e7fe      	b.n	8003b8c <ai_platform_network_post_init+0x19c>
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <ai_platform_network_post_init+0x214>)
 8003b90:	2301      	movs	r3, #1
 8003b92:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b96:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1fb      	bne.n	8003b96 <ai_platform_network_post_init+0x1a6>
 8003b9e:	4917      	ldr	r1, [pc, #92]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003ba2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8003ba6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003baa:	429a      	cmp	r2, r3
 8003bac:	f43f af53 	beq.w	8003a56 <ai_platform_network_post_init+0x66>
 8003bb0:	e7fe      	b.n	8003bb0 <ai_platform_network_post_init+0x1c0>
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <ai_platform_network_post_init+0x208>)
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	6093      	str	r3, [r2, #8]
 8003bb8:	6893      	ldr	r3, [r2, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1fc      	bne.n	8003bb8 <ai_platform_network_post_init+0x1c8>
 8003bbe:	490f      	ldr	r1, [pc, #60]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003bc2:	6011      	str	r1, [r2, #0]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d088      	beq.n	8003adc <ai_platform_network_post_init+0xec>
 8003bca:	e7fe      	b.n	8003bca <ai_platform_network_post_init+0x1da>
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <ai_platform_network_post_init+0x208>)
 8003bce:	2301      	movs	r3, #1
 8003bd0:	6093      	str	r3, [r2, #8]
 8003bd2:	6893      	ldr	r3, [r2, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1fc      	bne.n	8003bd2 <ai_platform_network_post_init+0x1e2>
 8003bd8:	4908      	ldr	r1, [pc, #32]	; (8003bfc <ai_platform_network_post_init+0x20c>)
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <ai_platform_network_post_init+0x210>)
 8003bdc:	6011      	str	r1, [r2, #0]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	f43f af38 	beq.w	8003a56 <ai_platform_network_post_init+0x66>
 8003be6:	e7fe      	b.n	8003be6 <ai_platform_network_post_init+0x1f6>
 8003be8:	a1c00100 	.word	0xa1c00100
 8003bec:	e0002000 	.word	0xe0002000
 8003bf0:	e0042000 	.word	0xe0042000
 8003bf4:	5c001000 	.word	0x5c001000
 8003bf8:	40023000 	.word	0x40023000
 8003bfc:	f407a5c2 	.word	0xf407a5c2
 8003c00:	b5e8b5cd 	.word	0xb5e8b5cd
 8003c04:	58024000 	.word	0x58024000

08003c08 <ai_platform_network_process>:
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	460e      	mov	r6, r1
 8003c10:	4605      	mov	r5, r0
 8003c12:	9202      	str	r2, [sp, #8]
 8003c14:	b120      	cbz	r0, 8003c20 <ai_platform_network_process+0x18>
 8003c16:	4bb5      	ldr	r3, [pc, #724]	; (8003eec <ai_platform_network_process+0x2e4>)
 8003c18:	6802      	ldr	r2, [r0, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	bf18      	it	ne
 8003c1e:	2500      	movne	r5, #0
 8003c20:	4ab3      	ldr	r2, [pc, #716]	; (8003ef0 <ai_platform_network_process+0x2e8>)
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	f7fe fb31 	bl	8002290 <_ai_platform_acquire_crc>
 8003c2e:	4bb1      	ldr	r3, [pc, #708]	; (8003ef4 <ai_platform_network_process+0x2ec>)
 8003c30:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c3a:	185a      	adds	r2, r3, r1
 8003c3c:	2a01      	cmp	r2, #1
 8003c3e:	f240 8147 	bls.w	8003ed0 <ai_platform_network_process+0x2c8>
 8003c42:	f240 4249 	movw	r2, #1097	; 0x449
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f000 8142 	beq.w	8003ed0 <ai_platform_network_process+0x2c8>
 8003c4c:	4aaa      	ldr	r2, [pc, #680]	; (8003ef8 <ai_platform_network_process+0x2f0>)
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c54:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003c58:	f000 8167 	beq.w	8003f2a <ai_platform_network_process+0x322>
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	f240 4183 	movw	r1, #1155	; 0x483
 8003c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c66:	428b      	cmp	r3, r1
 8003c68:	f000 8191 	beq.w	8003f8e <ai_platform_network_process+0x386>
 8003c6c:	6813      	ldr	r3, [r2, #0]
 8003c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c72:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003c76:	f000 816a 	beq.w	8003f4e <ai_platform_network_process+0x346>
 8003c7a:	f7fe fb0b 	bl	8002294 <_ai_platform_release_crc>
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	f000 8197 	beq.w	8003fb2 <ai_platform_network_process+0x3aa>
 8003c84:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 813e 	beq.w	8003f08 <ai_platform_network_process+0x300>
 8003c8c:	68eb      	ldr	r3, [r5, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	616a      	str	r2, [r5, #20]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	f040 813a 	bne.w	8003f14 <ai_platform_network_process+0x30c>
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	f000 8169 	beq.w	8003f78 <ai_platform_network_process+0x370>
 8003ca6:	fab8 f788 	clz	r7, r8
 8003caa:	097f      	lsrs	r7, r7, #5
 8003cac:	f1b8 0f00 	cmp.w	r8, #0
 8003cb0:	f000 8162 	beq.w	8003f78 <ai_platform_network_process+0x370>
 8003cb4:	f8b8 3000 	ldrh.w	r3, [r8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 815d 	beq.w	8003f78 <ai_platform_network_process+0x370>
 8003cbe:	69b3      	ldr	r3, [r6, #24]
 8003cc0:	9503      	str	r5, [sp, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d072      	beq.n	8003db4 <ai_platform_network_process+0x1ac>
 8003cce:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003cd2:	2c00      	cmp	r4, #0
 8003cd4:	d06e      	beq.n	8003db4 <ai_platform_network_process+0x1ac>
 8003cd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003cda:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003cde:	f8d3 a000 	ldr.w	sl, [r3]
 8003ce2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8003ce6:	f000 8146 	beq.w	8003f76 <ai_platform_network_process+0x36e>
 8003cea:	69a3      	ldr	r3, [r4, #24]
 8003cec:	2101      	movs	r1, #1
 8003cee:	4630      	mov	r0, r6
 8003cf0:	685d      	ldr	r5, [r3, #4]
 8003cf2:	f7fe fa7f 	bl	80021f4 <ai_buffer_get_size>
 8003cf6:	4285      	cmp	r5, r0
 8003cf8:	f0c0 815d 	bcc.w	8003fb6 <ai_platform_network_process+0x3ae>
 8003cfc:	68e0      	ldr	r0, [r4, #12]
 8003cfe:	69b1      	ldr	r1, [r6, #24]
 8003d00:	68c2      	ldr	r2, [r0, #12]
 8003d02:	68cb      	ldr	r3, [r1, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	f040 8156 	bne.w	8003fb6 <ai_platform_network_process+0x3ae>
 8003d0a:	6882      	ldr	r2, [r0, #8]
 8003d0c:	688b      	ldr	r3, [r1, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	f040 8151 	bne.w	8003fb6 <ai_platform_network_process+0x3ae>
 8003d14:	6842      	ldr	r2, [r0, #4]
 8003d16:	684b      	ldr	r3, [r1, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f040 814c 	bne.w	8003fb6 <ai_platform_network_process+0x3ae>
 8003d1e:	69a3      	ldr	r3, [r4, #24]
 8003d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d24:	f001 fa14 	bl	8005150 <ai_array_get_data_byte_size>
 8003d28:	4605      	mov	r5, r0
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f001 f966 	bl	8004ffc <get_tensor_byte_size>
 8003d30:	4285      	cmp	r5, r0
 8003d32:	f0c0 8140 	bcc.w	8003fb6 <ai_platform_network_process+0x3ae>
 8003d36:	69a3      	ldr	r3, [r4, #24]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	f001 f975 	bl	8005028 <ai_array_to_buffer_fmt>
 8003d3e:	6833      	ldr	r3, [r6, #0]
 8003d40:	4058      	eors	r0, r3
 8003d42:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003d46:	f040 81fa 	bne.w	800413e <ai_platform_network_process+0x536>
 8003d4a:	6873      	ldr	r3, [r6, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 81ed 	beq.w	800412c <ai_platform_network_process+0x524>
 8003d52:	69b3      	ldr	r3, [r6, #24]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 81df 	beq.w	800411a <ai_platform_network_process+0x512>
 8003d5c:	9a01      	ldr	r2, [sp, #4]
 8003d5e:	4620      	mov	r0, r4
 8003d60:	3701      	adds	r7, #1
 8003d62:	361c      	adds	r6, #28
 8003d64:	429a      	cmp	r2, r3
 8003d66:	bf38      	it	cc
 8003d68:	461a      	movcc	r2, r3
 8003d6a:	9201      	str	r2, [sp, #4]
 8003d6c:	f001 f946 	bl	8004ffc <get_tensor_byte_size>
 8003d70:	f8c9 0008 	str.w	r0, [r9, #8]
 8003d74:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	fb00 f303 	mul.w	r3, r0, r3
 8003d7e:	f8c9 300c 	str.w	r3, [r9, #12]
 8003d82:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8003d86:	440b      	add	r3, r1
 8003d88:	f8c9 1004 	str.w	r1, [r9, #4]
 8003d8c:	f84a 300b 	str.w	r3, [sl, fp]
 8003d90:	69a0      	ldr	r0, [r4, #24]
 8003d92:	6803      	ldr	r3, [r0, #0]
 8003d94:	009a      	lsls	r2, r3, #2
 8003d96:	f100 80e8 	bmi.w	8003f6a <ai_platform_network_process+0x362>
 8003d9a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	4419      	add	r1, r3
 8003da2:	6081      	str	r1, [r0, #8]
 8003da4:	69a3      	ldr	r3, [r4, #24]
 8003da6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	f8b8 3000 	ldrh.w	r3, [r8]
 8003db0:	42bb      	cmp	r3, r7
 8003db2:	d888      	bhi.n	8003cc6 <ai_platform_network_process+0xbe>
 8003db4:	9d03      	ldr	r5, [sp, #12]
 8003db6:	9b02      	ldr	r3, [sp, #8]
 8003db8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 81c8 	beq.w	8004150 <ai_platform_network_process+0x548>
 8003dc0:	2a01      	cmp	r2, #1
 8003dc2:	f240 81a2 	bls.w	800410a <ai_platform_network_process+0x502>
 8003dc6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8003dca:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 819b 	beq.w	800410a <ai_platform_network_process+0x502>
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	9f02      	ldr	r7, [sp, #8]
 8003dd8:	9502      	str	r5, [sp, #8]
 8003dda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80f7 	beq.w	8003fd2 <ai_platform_network_process+0x3ca>
 8003de4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8003de8:	2c00      	cmp	r4, #0
 8003dea:	f000 80f2 	beq.w	8003fd2 <ai_platform_network_process+0x3ca>
 8003dee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003df2:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 8003df6:	f8d3 8000 	ldr.w	r8, [r3]
 8003dfa:	eb18 1a06 	adds.w	sl, r8, r6, lsl #4
 8003dfe:	f000 81b4 	beq.w	800416a <ai_platform_network_process+0x562>
 8003e02:	69a3      	ldr	r3, [r4, #24]
 8003e04:	2101      	movs	r1, #1
 8003e06:	4638      	mov	r0, r7
 8003e08:	685d      	ldr	r5, [r3, #4]
 8003e0a:	f7fe f9f3 	bl	80021f4 <ai_buffer_get_size>
 8003e0e:	4285      	cmp	r5, r0
 8003e10:	f0c0 817a 	bcc.w	8004108 <ai_platform_network_process+0x500>
 8003e14:	68e0      	ldr	r0, [r4, #12]
 8003e16:	69b9      	ldr	r1, [r7, #24]
 8003e18:	68c2      	ldr	r2, [r0, #12]
 8003e1a:	68cb      	ldr	r3, [r1, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f040 8173 	bne.w	8004108 <ai_platform_network_process+0x500>
 8003e22:	6882      	ldr	r2, [r0, #8]
 8003e24:	688b      	ldr	r3, [r1, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	f040 816e 	bne.w	8004108 <ai_platform_network_process+0x500>
 8003e2c:	6842      	ldr	r2, [r0, #4]
 8003e2e:	684b      	ldr	r3, [r1, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f040 8169 	bne.w	8004108 <ai_platform_network_process+0x500>
 8003e36:	69a3      	ldr	r3, [r4, #24]
 8003e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e3c:	f001 f988 	bl	8005150 <ai_array_get_data_byte_size>
 8003e40:	9003      	str	r0, [sp, #12]
 8003e42:	4620      	mov	r0, r4
 8003e44:	f001 f8da 	bl	8004ffc <get_tensor_byte_size>
 8003e48:	9b03      	ldr	r3, [sp, #12]
 8003e4a:	4283      	cmp	r3, r0
 8003e4c:	f0c0 815c 	bcc.w	8004108 <ai_platform_network_process+0x500>
 8003e50:	69a3      	ldr	r3, [r4, #24]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	f001 f8e8 	bl	8005028 <ai_array_to_buffer_fmt>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4058      	eors	r0, r3
 8003e5c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003e60:	f040 817a 	bne.w	8004158 <ai_platform_network_process+0x550>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8193 	beq.w	8004192 <ai_platform_network_process+0x58a>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8185 	beq.w	8004180 <ai_platform_network_process+0x578>
 8003e76:	9a01      	ldr	r2, [sp, #4]
 8003e78:	4620      	mov	r0, r4
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	bf38      	it	cc
 8003e82:	461a      	movcc	r2, r3
 8003e84:	9201      	str	r2, [sp, #4]
 8003e86:	f001 f8b9 	bl	8004ffc <get_tensor_byte_size>
 8003e8a:	f8ca 0008 	str.w	r0, [sl, #8]
 8003e8e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	fb00 f303 	mul.w	r3, r0, r3
 8003e98:	f8ca 300c 	str.w	r3, [sl, #12]
 8003e9c:	f857 1c18 	ldr.w	r1, [r7, #-24]
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f8ca 1004 	str.w	r1, [sl, #4]
 8003ea6:	f848 300b 	str.w	r3, [r8, fp]
 8003eaa:	69a0      	ldr	r0, [r4, #24]
 8003eac:	6803      	ldr	r3, [r0, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	f100 808a 	bmi.w	8003fc8 <ai_platform_network_process+0x3c0>
 8003eb4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	4419      	add	r1, r3
 8003ebc:	6081      	str	r1, [r0, #8]
 8003ebe:	69a3      	ldr	r3, [r4, #24]
 8003ec0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003eca:	429e      	cmp	r6, r3
 8003ecc:	d385      	bcc.n	8003dda <ai_platform_network_process+0x1d2>
 8003ece:	e080      	b.n	8003fd2 <ai_platform_network_process+0x3ca>
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <ai_platform_network_process+0x2f4>)
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	6093      	str	r3, [r2, #8]
 8003ed6:	6893      	ldr	r3, [r2, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1fc      	bne.n	8003ed6 <ai_platform_network_process+0x2ce>
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <ai_platform_network_process+0x2f8>)
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <ai_platform_network_process+0x2fc>)
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	f43f aec8 	beq.w	8003c7a <ai_platform_network_process+0x72>
 8003eea:	e7fe      	b.n	8003eea <ai_platform_network_process+0x2e2>
 8003eec:	a1c00100 	.word	0xa1c00100
 8003ef0:	e0002000 	.word	0xe0002000
 8003ef4:	e0042000 	.word	0xe0042000
 8003ef8:	5c001000 	.word	0x5c001000
 8003efc:	40023000 	.word	0x40023000
 8003f00:	f407a5c2 	.word	0xf407a5c2
 8003f04:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f08:	68ea      	ldr	r2, [r5, #12]
 8003f0a:	616b      	str	r3, [r5, #20]
 8003f0c:	f002 0203 	and.w	r2, r2, #3
 8003f10:	2a03      	cmp	r2, #3
 8003f12:	d031      	beq.n	8003f78 <ai_platform_network_process+0x370>
 8003f14:	2230      	movs	r2, #48	; 0x30
 8003f16:	2111      	movs	r1, #17
 8003f18:	f105 0010 	add.w	r0, r5, #16
 8003f1c:	2400      	movs	r4, #0
 8003f1e:	f000 f951 	bl	80041c4 <core_set_error>
 8003f22:	4620      	mov	r0, r4
 8003f24:	b005      	add	sp, #20
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2a:	4a9e      	ldr	r2, [pc, #632]	; (80041a4 <ai_platform_network_process+0x59c>)
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1fb      	bne.n	8003f32 <ai_platform_network_process+0x32a>
 8003f3a:	4b9b      	ldr	r3, [pc, #620]	; (80041a8 <ai_platform_network_process+0x5a0>)
 8003f3c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003f40:	4b9a      	ldr	r3, [pc, #616]	; (80041ac <ai_platform_network_process+0x5a4>)
 8003f42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003f46:	429a      	cmp	r2, r3
 8003f48:	f43f ae97 	beq.w	8003c7a <ai_platform_network_process+0x72>
 8003f4c:	e7fe      	b.n	8003f4c <ai_platform_network_process+0x344>
 8003f4e:	4a98      	ldr	r2, [pc, #608]	; (80041b0 <ai_platform_network_process+0x5a8>)
 8003f50:	2301      	movs	r3, #1
 8003f52:	6093      	str	r3, [r2, #8]
 8003f54:	6893      	ldr	r3, [r2, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1fc      	bne.n	8003f54 <ai_platform_network_process+0x34c>
 8003f5a:	4b93      	ldr	r3, [pc, #588]	; (80041a8 <ai_platform_network_process+0x5a0>)
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b93      	ldr	r3, [pc, #588]	; (80041ac <ai_platform_network_process+0x5a4>)
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	f43f ae89 	beq.w	8003c7a <ai_platform_network_process+0x72>
 8003f68:	e7fe      	b.n	8003f68 <ai_platform_network_process+0x360>
 8003f6a:	f8b8 3000 	ldrh.w	r3, [r8]
 8003f6e:	429f      	cmp	r7, r3
 8003f70:	f4ff aea9 	bcc.w	8003cc6 <ai_platform_network_process+0xbe>
 8003f74:	e71e      	b.n	8003db4 <ai_platform_network_process+0x1ac>
 8003f76:	9d03      	ldr	r5, [sp, #12]
 8003f78:	2400      	movs	r4, #0
 8003f7a:	2217      	movs	r2, #23
 8003f7c:	2112      	movs	r1, #18
 8003f7e:	f105 0010 	add.w	r0, r5, #16
 8003f82:	f000 f91f 	bl	80041c4 <core_set_error>
 8003f86:	4620      	mov	r0, r4
 8003f88:	b005      	add	sp, #20
 8003f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8e:	4a85      	ldr	r2, [pc, #532]	; (80041a4 <ai_platform_network_process+0x59c>)
 8003f90:	2301      	movs	r3, #1
 8003f92:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f96:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1fb      	bne.n	8003f96 <ai_platform_network_process+0x38e>
 8003f9e:	4b82      	ldr	r3, [pc, #520]	; (80041a8 <ai_platform_network_process+0x5a0>)
 8003fa0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003fa4:	4b81      	ldr	r3, [pc, #516]	; (80041ac <ai_platform_network_process+0x5a4>)
 8003fa6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003faa:	429a      	cmp	r2, r3
 8003fac:	f43f ae65 	beq.w	8003c7a <ai_platform_network_process+0x72>
 8003fb0:	e7fe      	b.n	8003fb0 <ai_platform_network_process+0x3a8>
 8003fb2:	462c      	mov	r4, r5
 8003fb4:	e7b5      	b.n	8003f22 <ai_platform_network_process+0x31a>
 8003fb6:	9d03      	ldr	r5, [sp, #12]
 8003fb8:	2218      	movs	r2, #24
 8003fba:	2112      	movs	r1, #18
 8003fbc:	2400      	movs	r4, #0
 8003fbe:	f105 0010 	add.w	r0, r5, #16
 8003fc2:	f000 f8ff 	bl	80041c4 <core_set_error>
 8003fc6:	e7ac      	b.n	8003f22 <ai_platform_network_process+0x31a>
 8003fc8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003fcc:	429e      	cmp	r6, r3
 8003fce:	f4ff af04 	bcc.w	8003dda <ai_platform_network_process+0x1d2>
 8003fd2:	9d02      	ldr	r5, [sp, #8]
 8003fd4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003fd8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003fda:	82ab      	strh	r3, [r5, #20]
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	f040 808d 	bne.w	80040fc <ai_platform_network_process+0x4f4>
 8003fe2:	4616      	mov	r6, r2
 8003fe4:	4617      	mov	r7, r2
 8003fe6:	8aec      	ldrh	r4, [r5, #22]
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d29a      	bcs.n	8003f22 <ai_platform_network_process+0x31a>
 8003fec:	46ab      	mov	fp, r5
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d030      	beq.n	8004054 <ai_platform_network_process+0x44c>
 8003ff2:	f04f 0800 	mov.w	r8, #0
 8003ff6:	e014      	b.n	8004022 <ai_platform_network_process+0x41a>
 8003ff8:	6882      	ldr	r2, [r0, #8]
 8003ffa:	68c5      	ldr	r5, [r0, #12]
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	1b52      	subs	r2, r2, r5
 8004000:	4413      	add	r3, r2
 8004002:	6083      	str	r3, [r0, #8]
 8004004:	698b      	ldr	r3, [r1, #24]
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	f859 200a 	ldr.w	r2, [r9, sl]
 800400e:	f108 0801 	add.w	r8, r8, #1
 8004012:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8004016:	440b      	add	r3, r1
 8004018:	4293      	cmp	r3, r2
 800401a:	d301      	bcc.n	8004020 <ai_platform_network_process+0x418>
 800401c:	68e3      	ldr	r3, [r4, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	6063      	str	r3, [r4, #4]
 8004022:	8833      	ldrh	r3, [r6, #0]
 8004024:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8004028:	4543      	cmp	r3, r8
 800402a:	d913      	bls.n	8004054 <ai_platform_network_process+0x44c>
 800402c:	6873      	ldr	r3, [r6, #4]
 800402e:	b18b      	cbz	r3, 8004054 <ai_platform_network_process+0x44c>
 8004030:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8004034:	b171      	cbz	r1, 8004054 <ai_platform_network_process+0x44c>
 8004036:	6988      	ldr	r0, [r1, #24]
 8004038:	68b2      	ldr	r2, [r6, #8]
 800403a:	6803      	ldr	r3, [r0, #0]
 800403c:	f8d2 9000 	ldr.w	r9, [r2]
 8004040:	009d      	lsls	r5, r3, #2
 8004042:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004046:	d5d7      	bpl.n	8003ff8 <ai_platform_network_process+0x3f0>
 8004048:	6880      	ldr	r0, [r0, #8]
 800404a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800404e:	f001 f8c1 	bl	80051d4 <memcpy>
 8004052:	e7da      	b.n	800400a <ai_platform_network_process+0x402>
 8004054:	4658      	mov	r0, fp
 8004056:	f000 ff6d 	bl	8004f34 <ai_layers_forward_all>
 800405a:	2f00      	cmp	r7, #0
 800405c:	d03f      	beq.n	80040de <ai_platform_network_process+0x4d6>
 800405e:	2400      	movs	r4, #0
 8004060:	e016      	b.n	8004090 <ai_platform_network_process+0x488>
 8004062:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004066:	f859 100a 	ldr.w	r1, [r9, sl]
 800406a:	4413      	add	r3, r2
 800406c:	428b      	cmp	r3, r1
 800406e:	d302      	bcc.n	8004076 <ai_platform_network_process+0x46e>
 8004070:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004074:	1acb      	subs	r3, r1, r3
 8004076:	f8c8 3004 	str.w	r3, [r8, #4]
 800407a:	6981      	ldr	r1, [r0, #24]
 800407c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004080:	1b52      	subs	r2, r2, r5
 8004082:	4413      	add	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
 8004086:	6983      	ldr	r3, [r0, #24]
 8004088:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	3401      	adds	r4, #1
 8004090:	883b      	ldrh	r3, [r7, #0]
 8004092:	42a3      	cmp	r3, r4
 8004094:	d923      	bls.n	80040de <ai_platform_network_process+0x4d6>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	b30b      	cbz	r3, 80040de <ai_platform_network_process+0x4d6>
 800409a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800409e:	b1f0      	cbz	r0, 80040de <ai_platform_network_process+0x4d6>
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80040a6:	6983      	ldr	r3, [r0, #24]
 80040a8:	f8d2 9000 	ldr.w	r9, [r2]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	d5d5      	bpl.n	8004062 <ai_platform_network_process+0x45a>
 80040b6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80040ba:	6899      	ldr	r1, [r3, #8]
 80040bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80040c0:	f001 f888 	bl	80051d4 <memcpy>
 80040c4:	f859 200a 	ldr.w	r2, [r9, sl]
 80040c8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80040cc:	440b      	add	r3, r1
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d302      	bcc.n	80040d8 <ai_platform_network_process+0x4d0>
 80040d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80040dc:	e7d7      	b.n	800408e <ai_platform_network_process+0x486>
 80040de:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 80040e2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80040e6:	3401      	adds	r4, #1
 80040e8:	b2a4      	uxth	r4, r4
 80040ea:	42a3      	cmp	r3, r4
 80040ec:	f8ab 4016 	strh.w	r4, [fp, #22]
 80040f0:	f63f af7d 	bhi.w	8003fee <ai_platform_network_process+0x3e6>
 80040f4:	4620      	mov	r0, r4
 80040f6:	b005      	add	sp, #20
 80040f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fc:	2a01      	cmp	r2, #1
 80040fe:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004100:	d03c      	beq.n	800417c <ai_platform_network_process+0x574>
 8004102:	f106 070c 	add.w	r7, r6, #12
 8004106:	e76e      	b.n	8003fe6 <ai_platform_network_process+0x3de>
 8004108:	9d02      	ldr	r5, [sp, #8]
 800410a:	2218      	movs	r2, #24
 800410c:	2113      	movs	r1, #19
 800410e:	f105 0010 	add.w	r0, r5, #16
 8004112:	2400      	movs	r4, #0
 8004114:	f000 f856 	bl	80041c4 <core_set_error>
 8004118:	e703      	b.n	8003f22 <ai_platform_network_process+0x31a>
 800411a:	9d03      	ldr	r5, [sp, #12]
 800411c:	4604      	mov	r4, r0
 800411e:	2221      	movs	r2, #33	; 0x21
 8004120:	2112      	movs	r1, #18
 8004122:	f105 0010 	add.w	r0, r5, #16
 8004126:	f000 f84d 	bl	80041c4 <core_set_error>
 800412a:	e6fa      	b.n	8003f22 <ai_platform_network_process+0x31a>
 800412c:	9d03      	ldr	r5, [sp, #12]
 800412e:	4604      	mov	r4, r0
 8004130:	2217      	movs	r2, #23
 8004132:	2112      	movs	r1, #18
 8004134:	f105 0010 	add.w	r0, r5, #16
 8004138:	f000 f844 	bl	80041c4 <core_set_error>
 800413c:	e6f1      	b.n	8003f22 <ai_platform_network_process+0x31a>
 800413e:	9d03      	ldr	r5, [sp, #12]
 8004140:	2219      	movs	r2, #25
 8004142:	2112      	movs	r1, #18
 8004144:	2400      	movs	r4, #0
 8004146:	f105 0010 	add.w	r0, r5, #16
 800414a:	f000 f83b 	bl	80041c4 <core_set_error>
 800414e:	e6e8      	b.n	8003f22 <ai_platform_network_process+0x31a>
 8004150:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004154:	82ab      	strh	r3, [r5, #20]
 8004156:	e741      	b.n	8003fdc <ai_platform_network_process+0x3d4>
 8004158:	9d02      	ldr	r5, [sp, #8]
 800415a:	2219      	movs	r2, #25
 800415c:	2113      	movs	r1, #19
 800415e:	2400      	movs	r4, #0
 8004160:	f105 0010 	add.w	r0, r5, #16
 8004164:	f000 f82e 	bl	80041c4 <core_set_error>
 8004168:	e6db      	b.n	8003f22 <ai_platform_network_process+0x31a>
 800416a:	9d02      	ldr	r5, [sp, #8]
 800416c:	2217      	movs	r2, #23
 800416e:	2113      	movs	r1, #19
 8004170:	4654      	mov	r4, sl
 8004172:	f105 0010 	add.w	r0, r5, #16
 8004176:	f000 f825 	bl	80041c4 <core_set_error>
 800417a:	e6d2      	b.n	8003f22 <ai_platform_network_process+0x31a>
 800417c:	2700      	movs	r7, #0
 800417e:	e732      	b.n	8003fe6 <ai_platform_network_process+0x3de>
 8004180:	9d02      	ldr	r5, [sp, #8]
 8004182:	4604      	mov	r4, r0
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	2113      	movs	r1, #19
 8004188:	f105 0010 	add.w	r0, r5, #16
 800418c:	f000 f81a 	bl	80041c4 <core_set_error>
 8004190:	e6c7      	b.n	8003f22 <ai_platform_network_process+0x31a>
 8004192:	9d02      	ldr	r5, [sp, #8]
 8004194:	4604      	mov	r4, r0
 8004196:	2217      	movs	r2, #23
 8004198:	2113      	movs	r1, #19
 800419a:	f105 0010 	add.w	r0, r5, #16
 800419e:	f000 f811 	bl	80041c4 <core_set_error>
 80041a2:	e6be      	b.n	8003f22 <ai_platform_network_process+0x31a>
 80041a4:	58024000 	.word	0x58024000
 80041a8:	f407a5c2 	.word	0xf407a5c2
 80041ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80041b0:	40023000 	.word	0x40023000

080041b4 <core_init>:
 80041b4:	2001      	movs	r0, #1
 80041b6:	4770      	bx	lr

080041b8 <core_get_error>:
 80041b8:	4603      	mov	r3, r0
 80041ba:	2200      	movs	r2, #0
 80041bc:	6800      	ldr	r0, [r0, #0]
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <core_set_error>:
 80041c4:	4603      	mov	r3, r0
 80041c6:	7800      	ldrb	r0, [r0, #0]
 80041c8:	b108      	cbz	r0, 80041ce <core_set_error+0xa>
 80041ca:	2000      	movs	r0, #0
 80041cc:	4770      	bx	lr
 80041ce:	7019      	strb	r1, [r3, #0]
 80041d0:	2001      	movs	r0, #1
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	f362 211f 	bfi	r1, r2, #8, #24
 80041d8:	6019      	str	r1, [r3, #0]
 80041da:	4770      	bx	lr

080041dc <forward_dense>:
 80041dc:	6983      	ldr	r3, [r0, #24]
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	f000 80f7 	beq.w	80043d4 <forward_dense+0x1f8>
 80041e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	ed2d 8b0e 	vpush	{d8-d14}
 80041ee:	6858      	ldr	r0, [r3, #4]
 80041f0:	b09b      	sub	sp, #108	; 0x6c
 80041f2:	6847      	ldr	r7, [r0, #4]
 80041f4:	b107      	cbz	r7, 80041f8 <forward_dense+0x1c>
 80041f6:	683f      	ldr	r7, [r7, #0]
 80041f8:	2a01      	cmp	r2, #1
 80041fa:	f000 8523 	beq.w	8004c44 <forward_dense+0xa68>
 80041fe:	6905      	ldr	r5, [r0, #16]
 8004200:	b105      	cbz	r5, 8004204 <forward_dense+0x28>
 8004202:	682d      	ldr	r5, [r5, #0]
 8004204:	2a02      	cmp	r2, #2
 8004206:	f000 80e7 	beq.w	80043d8 <forward_dense+0x1fc>
 800420a:	69c3      	ldr	r3, [r0, #28]
 800420c:	930b      	str	r3, [sp, #44]	; 0x2c
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8509 	beq.w	8004c26 <forward_dense+0xa4a>
 8004214:	4619      	mov	r1, r3
 8004216:	8b03      	ldrh	r3, [r0, #24]
 8004218:	6809      	ldr	r1, [r1, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	910c      	str	r1, [sp, #48]	; 0x30
 800421e:	f240 8505 	bls.w	8004c2c <forward_dense+0xa50>
 8004222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	930b      	str	r3, [sp, #44]	; 0x2c
 8004228:	460b      	mov	r3, r1
 800422a:	6999      	ldr	r1, [r3, #24]
 800422c:	2a03      	cmp	r2, #3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68ec      	ldr	r4, [r5, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8004238:	9314      	str	r3, [sp, #80]	; 0x50
 800423a:	680b      	ldr	r3, [r1, #0]
 800423c:	e9d4 6c01 	ldrd	r6, ip, [r4, #4]
 8004240:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004244:	fb0c fb06 	mul.w	fp, ip, r6
 8004248:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800424c:	fa4e f40c 	asr.w	r4, lr, ip
 8004250:	9413      	str	r4, [sp, #76]	; 0x4c
 8004252:	f000 84f4 	beq.w	8004c3e <forward_dense+0xa62>
 8004256:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004258:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800425c:	2a00      	cmp	r2, #0
 800425e:	f000 84dc 	beq.w	8004c1a <forward_dense+0xa3e>
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	2a00      	cmp	r2, #0
 8004266:	f000 84d8 	beq.w	8004c1a <forward_dense+0xa3e>
 800426a:	2b04      	cmp	r3, #4
 800426c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004270:	f000 84bf 	beq.w	8004bf2 <forward_dense+0xa16>
 8004274:	2b08      	cmp	r3, #8
 8004276:	f000 84bc 	beq.w	8004bf2 <forward_dense+0xa16>
 800427a:	f04f 0a00 	mov.w	sl, #0
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	fb0b f408 	mul.w	r4, fp, r8
 8004284:	69aa      	ldr	r2, [r5, #24]
 8004286:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800428a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8004294:	9204      	str	r2, [sp, #16]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	428a      	cmp	r2, r1
 800429a:	910f      	str	r1, [sp, #60]	; 0x3c
 800429c:	9302      	str	r3, [sp, #8]
 800429e:	ea4f 0386 	mov.w	r3, r6, lsl #2
 80042a2:	930d      	str	r3, [sp, #52]	; 0x34
 80042a4:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	f080 849a 	bcs.w	8004be2 <forward_dense+0xa06>
 80042ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042b0:	4bbf      	ldr	r3, [pc, #764]	; (80045b0 <forward_dense+0x3d4>)
 80042b2:	08d0      	lsrs	r0, r2, #3
 80042b4:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80045b4 <forward_dense+0x3d8>
 80042b8:	4413      	add	r3, r2
 80042ba:	9007      	str	r0, [sp, #28]
 80042bc:	0099      	lsls	r1, r3, #2
 80042be:	f1a2 0310 	sub.w	r3, r2, #16
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f101 0420 	add.w	r4, r1, #32
 80042c8:	9115      	str	r1, [sp, #84]	; 0x54
 80042ca:	0949      	lsrs	r1, r1, #5
 80042cc:	3301      	adds	r3, #1
 80042ce:	940e      	str	r4, [sp, #56]	; 0x38
 80042d0:	445c      	add	r4, fp
 80042d2:	9116      	str	r1, [sp, #88]	; 0x58
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	46a1      	mov	r9, r4
 80042d8:	940a      	str	r4, [sp, #40]	; 0x28
 80042da:	9319      	str	r3, [sp, #100]	; 0x64
 80042dc:	f022 0301 	bic.w	r3, r2, #1
 80042e0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80042e4:	9303      	str	r3, [sp, #12]
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	9318      	str	r3, [sp, #96]	; 0x60
 80042ec:	00cb      	lsls	r3, r1, #3
 80042ee:	3310      	adds	r3, #16
 80042f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80042f2:	f002 0301 	and.w	r3, r2, #1
 80042f6:	9308      	str	r3, [sp, #32]
 80042f8:	eb0b 1340 	add.w	r3, fp, r0, lsl #5
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	4653      	mov	r3, sl
 8004300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004302:	6992      	ldr	r2, [r2, #24]
 8004304:	6897      	ldr	r7, [r2, #8]
 8004306:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004308:	2a00      	cmp	r2, #0
 800430a:	f000 8270 	beq.w	80047ee <forward_dense+0x612>
 800430e:	6992      	ldr	r2, [r2, #24]
 8004310:	6895      	ldr	r5, [r2, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 826f 	beq.w	80047f6 <forward_dense+0x61a>
 8004318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800431a:	2a04      	cmp	r2, #4
 800431c:	f000 837a 	beq.w	8004a14 <forward_dense+0x838>
 8004320:	9a01      	ldr	r2, [sp, #4]
 8004322:	9904      	ldr	r1, [sp, #16]
 8004324:	428a      	cmp	r2, r1
 8004326:	d93f      	bls.n	80043a8 <forward_dense+0x1cc>
 8004328:	468e      	mov	lr, r1
 800432a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800432c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800432e:	3201      	adds	r2, #1
 8004330:	eb01 0a0b 	add.w	sl, r1, fp
 8004334:	f10b 0104 	add.w	r1, fp, #4
 8004338:	9110      	str	r1, [sp, #64]	; 0x40
 800433a:	00d1      	lsls	r1, r2, #3
 800433c:	eb0b 1242 	add.w	r2, fp, r2, lsl #5
 8004340:	f8cd a018 	str.w	sl, [sp, #24]
 8004344:	9111      	str	r1, [sp, #68]	; 0x44
 8004346:	9212      	str	r2, [sp, #72]	; 0x48
 8004348:	f1aa 0204 	sub.w	r2, sl, #4
 800434c:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8004350:	9209      	str	r2, [sp, #36]	; 0x24
 8004352:	2d00      	cmp	r5, #0
 8004354:	f000 8128 	beq.w	80045a8 <forward_dense+0x3cc>
 8004358:	ecf5 4a01 	vldmia	r5!, {s9}
 800435c:	f1ba 0f07 	cmp.w	sl, #7
 8004360:	d83d      	bhi.n	80043de <forward_dense+0x202>
 8004362:	45cb      	cmp	fp, r9
 8004364:	d211      	bcs.n	800438a <forward_dense+0x1ae>
 8004366:	eddf 7a93 	vldr	s15, [pc, #588]	; 80045b4 <forward_dense+0x3d8>
 800436a:	4659      	mov	r1, fp
 800436c:	4638      	mov	r0, r7
 800436e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004372:	ecf1 6a01 	vldmia	r1!, {s13}
 8004376:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800437a:	4549      	cmp	r1, r9
 800437c:	ed92 6a00 	vldr	s12, [r2]
 8004380:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004384:	d3f3      	bcc.n	800436e <forward_dense+0x192>
 8004386:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800438a:	9a02      	ldr	r2, [sp, #8]
 800438c:	ecee 4a01 	vstmia	lr!, {s9}
 8004390:	4417      	add	r7, r2
 8004392:	9a01      	ldr	r2, [sp, #4]
 8004394:	4596      	cmp	lr, r2
 8004396:	d3dc      	bcc.n	8004352 <forward_dense+0x176>
 8004398:	9904      	ldr	r1, [sp, #16]
 800439a:	1a52      	subs	r2, r2, r1
 800439c:	3a01      	subs	r2, #1
 800439e:	f022 0203 	bic.w	r2, r2, #3
 80043a2:	3204      	adds	r2, #4
 80043a4:	188a      	adds	r2, r1, r2
 80043a6:	9204      	str	r2, [sp, #16]
 80043a8:	9a01      	ldr	r2, [sp, #4]
 80043aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043ac:	9804      	ldr	r0, [sp, #16]
 80043ae:	440a      	add	r2, r1
 80043b0:	9905      	ldr	r1, [sp, #20]
 80043b2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80043b4:	9201      	str	r2, [sp, #4]
 80043b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	4411      	add	r1, r2
 80043bc:	4491      	add	r9, r2
 80043be:	9105      	str	r1, [sp, #20]
 80043c0:	9903      	ldr	r1, [sp, #12]
 80043c2:	4411      	add	r1, r2
 80043c4:	9103      	str	r1, [sp, #12]
 80043c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043c8:	468b      	mov	fp, r1
 80043ca:	f080 840a 	bcs.w	8004be2 <forward_dense+0xa06>
 80043ce:	4411      	add	r1, r2
 80043d0:	910a      	str	r1, [sp, #40]	; 0x28
 80043d2:	e795      	b.n	8004300 <forward_dense+0x124>
 80043d4:	6853      	ldr	r3, [r2, #4]
 80043d6:	deff      	udf	#255	; 0xff
 80043d8:	2300      	movs	r3, #0
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	deff      	udf	#255	; 0xff
 80043de:	f007 0203 	and.w	r2, r7, #3
 80043e2:	2a02      	cmp	r2, #2
 80043e4:	f000 81e7 	beq.w	80047b6 <forward_dense+0x5da>
 80043e8:	2a03      	cmp	r2, #3
 80043ea:	f000 80e5 	beq.w	80045b8 <forward_dense+0x3dc>
 80043ee:	2a01      	cmp	r2, #1
 80043f0:	f000 81f0 	beq.w	80047d4 <forward_dense+0x5f8>
 80043f4:	9a06      	ldr	r2, [sp, #24]
 80043f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045b4 <forward_dense+0x3d8>
 80043fa:	4593      	cmp	fp, r2
 80043fc:	f200 83f6 	bhi.w	8004bec <forward_dense+0xa10>
 8004400:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004402:	f107 0208 	add.w	r2, r7, #8
 8004406:	f10b 0120 	add.w	r1, fp, #32
 800440a:	19c4      	adds	r4, r0, r7
 800440c:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8004410:	3208      	adds	r2, #8
 8004412:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8004416:	3120      	adds	r1, #32
 8004418:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800441c:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 8004420:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 8004424:	edd0 7a00 	vldr	s15, [r0]
 8004428:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800442c:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004430:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 8004434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004438:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 800443c:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8004440:	ed90 2a00 	vldr	s4, [r0]
 8004444:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8004448:	eee2 7a22 	vfma.f32	s15, s4, s5
 800444c:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8004450:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004454:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 8004458:	edd0 2a00 	vldr	s5, [r0]
 800445c:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8004460:	eee2 7a83 	vfma.f32	s15, s5, s6
 8004464:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004468:	ed90 3a00 	vldr	s6, [r0]
 800446c:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8004470:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004474:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004478:	edd0 3a00 	vldr	s7, [r0]
 800447c:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8004480:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004484:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004488:	ed90 4a00 	vldr	s8, [r0]
 800448c:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8004490:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004494:	eee4 7a05 	vfma.f32	s15, s8, s10
 8004498:	ed90 5a00 	vldr	s10, [r0]
 800449c:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 80044a0:	4294      	cmp	r4, r2
 80044a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044a6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80044aa:	edd0 5a00 	vldr	s11, [r0]
 80044ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 80044b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044b6:	d1a9      	bne.n	800440c <forward_dense+0x230>
 80044b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80044ba:	18b9      	adds	r1, r7, r2
 80044bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044be:	454a      	cmp	r2, r9
 80044c0:	d26f      	bcs.n	80045a2 <forward_dense+0x3c6>
 80044c2:	7808      	ldrb	r0, [r1, #0]
 80044c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044c8:	edd0 7a00 	vldr	s15, [r0]
 80044cc:	4610      	mov	r0, r2
 80044ce:	ecb0 6a01 	vldmia	r0!, {s12}
 80044d2:	4581      	cmp	r9, r0
 80044d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80044d8:	d963      	bls.n	80045a2 <forward_dense+0x3c6>
 80044da:	7848      	ldrb	r0, [r1, #1]
 80044dc:	ed92 6a01 	vldr	s12, [r2, #4]
 80044e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044e4:	edd0 7a00 	vldr	s15, [r0]
 80044e8:	f102 0008 	add.w	r0, r2, #8
 80044ec:	4581      	cmp	r9, r0
 80044ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80044f2:	d956      	bls.n	80045a2 <forward_dense+0x3c6>
 80044f4:	7888      	ldrb	r0, [r1, #2]
 80044f6:	ed92 6a02 	vldr	s12, [r2, #8]
 80044fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044fe:	edd0 7a00 	vldr	s15, [r0]
 8004502:	f102 000c 	add.w	r0, r2, #12
 8004506:	4581      	cmp	r9, r0
 8004508:	eee6 6a27 	vfma.f32	s13, s12, s15
 800450c:	d949      	bls.n	80045a2 <forward_dense+0x3c6>
 800450e:	78c8      	ldrb	r0, [r1, #3]
 8004510:	ed92 6a03 	vldr	s12, [r2, #12]
 8004514:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004518:	edd0 7a00 	vldr	s15, [r0]
 800451c:	f102 0010 	add.w	r0, r2, #16
 8004520:	4581      	cmp	r9, r0
 8004522:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004526:	d93c      	bls.n	80045a2 <forward_dense+0x3c6>
 8004528:	7908      	ldrb	r0, [r1, #4]
 800452a:	ed92 6a04 	vldr	s12, [r2, #16]
 800452e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004532:	edd0 7a00 	vldr	s15, [r0]
 8004536:	f102 0014 	add.w	r0, r2, #20
 800453a:	4581      	cmp	r9, r0
 800453c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004540:	d92f      	bls.n	80045a2 <forward_dense+0x3c6>
 8004542:	7948      	ldrb	r0, [r1, #5]
 8004544:	ed92 6a05 	vldr	s12, [r2, #20]
 8004548:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800454c:	edd0 7a00 	vldr	s15, [r0]
 8004550:	f102 0018 	add.w	r0, r2, #24
 8004554:	4581      	cmp	r9, r0
 8004556:	eee6 6a27 	vfma.f32	s13, s12, s15
 800455a:	d922      	bls.n	80045a2 <forward_dense+0x3c6>
 800455c:	7988      	ldrb	r0, [r1, #6]
 800455e:	ed92 6a06 	vldr	s12, [r2, #24]
 8004562:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004566:	edd0 7a00 	vldr	s15, [r0]
 800456a:	f102 001c 	add.w	r0, r2, #28
 800456e:	4581      	cmp	r9, r0
 8004570:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004574:	d915      	bls.n	80045a2 <forward_dense+0x3c6>
 8004576:	79c8      	ldrb	r0, [r1, #7]
 8004578:	ed92 6a07 	vldr	s12, [r2, #28]
 800457c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004580:	edd0 7a00 	vldr	s15, [r0]
 8004584:	f102 0020 	add.w	r0, r2, #32
 8004588:	4581      	cmp	r9, r0
 800458a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800458e:	d908      	bls.n	80045a2 <forward_dense+0x3c6>
 8004590:	edd2 7a08 	vldr	s15, [r2, #32]
 8004594:	7a0a      	ldrb	r2, [r1, #8]
 8004596:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800459a:	ed92 6a00 	vldr	s12, [r2]
 800459e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80045a2:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80045a6:	e6f0      	b.n	800438a <forward_dense+0x1ae>
 80045a8:	eddf 4a02 	vldr	s9, [pc, #8]	; 80045b4 <forward_dense+0x3d8>
 80045ac:	e6d6      	b.n	800435c <forward_dense+0x180>
 80045ae:	bf00      	nop
 80045b0:	3ffffff8 	.word	0x3ffffff8
 80045b4:	00000000 	.word	0x00000000
 80045b8:	eef0 6a47 	vmov.f32	s13, s14
 80045bc:	4659      	mov	r1, fp
 80045be:	463a      	mov	r2, r7
 80045c0:	4694      	mov	ip, r2
 80045c2:	460c      	mov	r4, r1
 80045c4:	f81c 0b01 	ldrb.w	r0, [ip], #1
 80045c8:	ecf4 7a01 	vldmia	r4!, {s15}
 80045cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80045d0:	ed90 6a00 	vldr	s12, [r0]
 80045d4:	9806      	ldr	r0, [sp, #24]
 80045d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80045da:	4284      	cmp	r4, r0
 80045dc:	d866      	bhi.n	80046ac <forward_dense+0x4d0>
 80045de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045e0:	f102 0611 	add.w	r6, r2, #17
 80045e4:	3209      	adds	r2, #9
 80045e6:	eba0 0801 	sub.w	r8, r0, r1
 80045ea:	3124      	adds	r1, #36	; 0x24
 80045ec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80045f0:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 80045f4:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80045f8:	3208      	adds	r2, #8
 80045fa:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80045fe:	3120      	adds	r1, #32
 8004600:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004604:	ed51 2a10 	vldr	s5, [r1, #-64]	; 0xffffffc0
 8004608:	ed11 3a0e 	vldr	s6, [r1, #-56]	; 0xffffffc8
 800460c:	edd0 7a00 	vldr	s15, [r0]
 8004610:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8004614:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004618:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 800461c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004620:	ed11 4a0c 	vldr	s8, [r1, #-48]	; 0xffffffd0
 8004624:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 8004628:	ed90 2a00 	vldr	s4, [r0]
 800462c:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8004630:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004634:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8004638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800463c:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 8004640:	edd0 2a00 	vldr	s5, [r0]
 8004644:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8004648:	eee2 7a83 	vfma.f32	s15, s5, s6
 800464c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004650:	ed90 3a00 	vldr	s6, [r0]
 8004654:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8004658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800465c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004660:	edd0 3a00 	vldr	s7, [r0]
 8004664:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8004668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800466c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004670:	ed90 4a00 	vldr	s8, [r0]
 8004674:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8004678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800467c:	eee4 7a05 	vfma.f32	s15, s8, s10
 8004680:	ed90 5a00 	vldr	s10, [r0]
 8004684:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8004688:	4296      	cmp	r6, r2
 800468a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800468e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004692:	edd0 5a00 	vldr	s11, [r0]
 8004696:	eee5 7a86 	vfma.f32	s15, s11, s12
 800469a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800469e:	d1a9      	bne.n	80045f4 <forward_dense+0x418>
 80046a0:	f108 0801 	add.w	r8, r8, #1
 80046a4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80046a8:	eb04 1448 	add.w	r4, r4, r8, lsl #5
 80046ac:	454c      	cmp	r4, r9
 80046ae:	f4bf af78 	bcs.w	80045a2 <forward_dense+0x3c6>
 80046b2:	f89c 2000 	ldrb.w	r2, [ip]
 80046b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80046ba:	edd2 7a00 	vldr	s15, [r2]
 80046be:	4622      	mov	r2, r4
 80046c0:	ecb2 6a01 	vldmia	r2!, {s12}
 80046c4:	4591      	cmp	r9, r2
 80046c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80046ca:	f67f af6a 	bls.w	80045a2 <forward_dense+0x3c6>
 80046ce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80046d2:	ed94 6a01 	vldr	s12, [r4, #4]
 80046d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80046da:	edd2 7a00 	vldr	s15, [r2]
 80046de:	f104 0208 	add.w	r2, r4, #8
 80046e2:	4591      	cmp	r9, r2
 80046e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80046e8:	f67f af5b 	bls.w	80045a2 <forward_dense+0x3c6>
 80046ec:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80046f0:	ed94 6a02 	vldr	s12, [r4, #8]
 80046f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80046f8:	edd2 7a00 	vldr	s15, [r2]
 80046fc:	f104 020c 	add.w	r2, r4, #12
 8004700:	4591      	cmp	r9, r2
 8004702:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004706:	f67f af4c 	bls.w	80045a2 <forward_dense+0x3c6>
 800470a:	f89c 2003 	ldrb.w	r2, [ip, #3]
 800470e:	ed94 6a03 	vldr	s12, [r4, #12]
 8004712:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004716:	edd2 7a00 	vldr	s15, [r2]
 800471a:	f104 0210 	add.w	r2, r4, #16
 800471e:	4591      	cmp	r9, r2
 8004720:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004724:	f67f af3d 	bls.w	80045a2 <forward_dense+0x3c6>
 8004728:	f89c 2004 	ldrb.w	r2, [ip, #4]
 800472c:	ed94 6a04 	vldr	s12, [r4, #16]
 8004730:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004734:	edd2 7a00 	vldr	s15, [r2]
 8004738:	f104 0214 	add.w	r2, r4, #20
 800473c:	4591      	cmp	r9, r2
 800473e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004742:	f67f af2e 	bls.w	80045a2 <forward_dense+0x3c6>
 8004746:	f89c 2005 	ldrb.w	r2, [ip, #5]
 800474a:	ed94 6a05 	vldr	s12, [r4, #20]
 800474e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004752:	edd2 7a00 	vldr	s15, [r2]
 8004756:	f104 0218 	add.w	r2, r4, #24
 800475a:	4591      	cmp	r9, r2
 800475c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004760:	f67f af1f 	bls.w	80045a2 <forward_dense+0x3c6>
 8004764:	f89c 2006 	ldrb.w	r2, [ip, #6]
 8004768:	ed94 6a06 	vldr	s12, [r4, #24]
 800476c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004770:	edd2 7a00 	vldr	s15, [r2]
 8004774:	f104 021c 	add.w	r2, r4, #28
 8004778:	4591      	cmp	r9, r2
 800477a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800477e:	f67f af10 	bls.w	80045a2 <forward_dense+0x3c6>
 8004782:	f89c 2007 	ldrb.w	r2, [ip, #7]
 8004786:	ed94 6a07 	vldr	s12, [r4, #28]
 800478a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800478e:	edd2 7a00 	vldr	s15, [r2]
 8004792:	f104 0220 	add.w	r2, r4, #32
 8004796:	4591      	cmp	r9, r2
 8004798:	eee6 6a27 	vfma.f32	s13, s12, s15
 800479c:	f67f af01 	bls.w	80045a2 <forward_dense+0x3c6>
 80047a0:	f89c 2008 	ldrb.w	r2, [ip, #8]
 80047a4:	edd4 7a08 	vldr	s15, [r4, #32]
 80047a8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80047ac:	ed92 6a00 	vldr	s12, [r2]
 80047b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80047b4:	e6f5      	b.n	80045a2 <forward_dense+0x3c6>
 80047b6:	eef0 6a47 	vmov.f32	s13, s14
 80047ba:	4659      	mov	r1, fp
 80047bc:	463a      	mov	r2, r7
 80047be:	f812 0b01 	ldrb.w	r0, [r2], #1
 80047c2:	ecf1 7a01 	vldmia	r1!, {s15}
 80047c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80047ca:	ed90 6a00 	vldr	s12, [r0]
 80047ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 80047d2:	e6f5      	b.n	80045c0 <forward_dense+0x3e4>
 80047d4:	463a      	mov	r2, r7
 80047d6:	eddb 7a00 	vldr	s15, [fp]
 80047da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80047dc:	f812 0b01 	ldrb.w	r0, [r2], #1
 80047e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80047e4:	edd0 6a00 	vldr	s13, [r0]
 80047e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80047ec:	e7e7      	b.n	80047be <forward_dense+0x5e2>
 80047ee:	4615      	mov	r5, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f47f ad91 	bne.w	8004318 <forward_dense+0x13c>
 80047f6:	9a01      	ldr	r2, [sp, #4]
 80047f8:	9904      	ldr	r1, [sp, #16]
 80047fa:	428a      	cmp	r2, r1
 80047fc:	f67f add4 	bls.w	80043a8 <forward_dense+0x1cc>
 8004800:	4690      	mov	r8, r2
 8004802:	9814      	ldr	r0, [sp, #80]	; 0x50
 8004804:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004806:	460c      	mov	r4, r1
 8004808:	f000 0c0f 	and.w	ip, r0, #15
 800480c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004810:	eb0b 0602 	add.w	r6, fp, r2
 8004814:	4692      	mov	sl, r2
 8004816:	9306      	str	r3, [sp, #24]
 8004818:	2d00      	cmp	r5, #0
 800481a:	f000 81d7 	beq.w	8004bcc <forward_dense+0x9f0>
 800481e:	280f      	cmp	r0, #15
 8004820:	ecb5 0a01 	vldmia	r5!, {s0}
 8004824:	ed5f 6a9d 	vldr	s13, [pc, #-628]	; 80045b4 <forward_dense+0x3d8>
 8004828:	f240 81d7 	bls.w	8004bda <forward_dense+0x9fe>
 800482c:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 8004830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004834:	4601      	mov	r1, r0
 8004836:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 800483a:	3910      	subs	r1, #16
 800483c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004840:	3340      	adds	r3, #64	; 0x40
 8004842:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 8004846:	290f      	cmp	r1, #15
 8004848:	ee67 7a86 	vmul.f32	s15, s15, s12
 800484c:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 8004850:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8004854:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004858:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 800485c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004860:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 8004864:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 8004868:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800486c:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 8004870:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 8004874:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8004878:	eee5 7a25 	vfma.f32	s15, s10, s11
 800487c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8004880:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8004884:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8004888:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800488c:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 8004890:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 8004894:	eeee 7a06 	vfma.f32	s15, s28, s12
 8004898:	ed52 8a17 	vldr	s17, [r2, #-92]	; 0xffffffa4
 800489c:	ed13 8a17 	vldr	s16, [r3, #-92]	; 0xffffffa4
 80048a0:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 80048a4:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 80048a8:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 80048ac:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 80048b0:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80048b4:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 80048b8:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 80048bc:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 80048c0:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 80048c4:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 80048c8:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 80048cc:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80048d0:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 80048d4:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 80048d8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80048dc:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80048e0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80048e4:	eee8 7a88 	vfma.f32	s15, s17, s16
 80048e8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80048ec:	eee1 7a82 	vfma.f32	s15, s3, s4
 80048f0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80048f4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80048f8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80048fc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004900:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004904:	d897      	bhi.n	8004836 <forward_dense+0x65a>
 8004906:	eb07 010a 	add.w	r1, r7, sl
 800490a:	4663      	mov	r3, ip
 800490c:	4632      	mov	r2, r6
 800490e:	2b00      	cmp	r3, #0
 8004910:	d075      	beq.n	80049fe <forward_dense+0x822>
 8004912:	ed92 6a00 	vldr	s12, [r2]
 8004916:	2b01      	cmp	r3, #1
 8004918:	edd1 7a00 	vldr	s15, [r1]
 800491c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004920:	d06d      	beq.n	80049fe <forward_dense+0x822>
 8004922:	ed92 6a01 	vldr	s12, [r2, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	edd1 7a01 	vldr	s15, [r1, #4]
 800492c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004930:	d065      	beq.n	80049fe <forward_dense+0x822>
 8004932:	ed92 6a02 	vldr	s12, [r2, #8]
 8004936:	2b03      	cmp	r3, #3
 8004938:	edd1 7a02 	vldr	s15, [r1, #8]
 800493c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004940:	d05d      	beq.n	80049fe <forward_dense+0x822>
 8004942:	ed92 6a03 	vldr	s12, [r2, #12]
 8004946:	2b04      	cmp	r3, #4
 8004948:	edd1 7a03 	vldr	s15, [r1, #12]
 800494c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004950:	d055      	beq.n	80049fe <forward_dense+0x822>
 8004952:	ed92 6a04 	vldr	s12, [r2, #16]
 8004956:	2b05      	cmp	r3, #5
 8004958:	edd1 7a04 	vldr	s15, [r1, #16]
 800495c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004960:	d04d      	beq.n	80049fe <forward_dense+0x822>
 8004962:	ed92 6a05 	vldr	s12, [r2, #20]
 8004966:	2b06      	cmp	r3, #6
 8004968:	edd1 7a05 	vldr	s15, [r1, #20]
 800496c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004970:	d045      	beq.n	80049fe <forward_dense+0x822>
 8004972:	ed92 6a06 	vldr	s12, [r2, #24]
 8004976:	2b07      	cmp	r3, #7
 8004978:	edd1 7a06 	vldr	s15, [r1, #24]
 800497c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004980:	d03d      	beq.n	80049fe <forward_dense+0x822>
 8004982:	ed92 6a07 	vldr	s12, [r2, #28]
 8004986:	2b08      	cmp	r3, #8
 8004988:	edd1 7a07 	vldr	s15, [r1, #28]
 800498c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004990:	d035      	beq.n	80049fe <forward_dense+0x822>
 8004992:	ed92 6a08 	vldr	s12, [r2, #32]
 8004996:	2b09      	cmp	r3, #9
 8004998:	edd1 7a08 	vldr	s15, [r1, #32]
 800499c:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049a0:	d02d      	beq.n	80049fe <forward_dense+0x822>
 80049a2:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 80049a6:	2b0a      	cmp	r3, #10
 80049a8:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 80049ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049b0:	d025      	beq.n	80049fe <forward_dense+0x822>
 80049b2:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
 80049b6:	2b0b      	cmp	r3, #11
 80049b8:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 80049bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049c0:	d01d      	beq.n	80049fe <forward_dense+0x822>
 80049c2:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 80049cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049d0:	d015      	beq.n	80049fe <forward_dense+0x822>
 80049d2:	ed92 6a0c 	vldr	s12, [r2, #48]	; 0x30
 80049d6:	3b0d      	subs	r3, #13
 80049d8:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 80049dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049e0:	d00d      	beq.n	80049fe <forward_dense+0x822>
 80049e2:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 80049ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049f0:	d005      	beq.n	80049fe <forward_dense+0x822>
 80049f2:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80049f6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80049fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80049fe:	ee70 6a26 	vadd.f32	s13, s0, s13
 8004a02:	4477      	add	r7, lr
 8004a04:	ece4 6a01 	vstmia	r4!, {s13}
 8004a08:	4544      	cmp	r4, r8
 8004a0a:	f4ff af05 	bcc.w	8004818 <forward_dense+0x63c>
 8004a0e:	9b06      	ldr	r3, [sp, #24]
 8004a10:	9a01      	ldr	r2, [sp, #4]
 8004a12:	e4c1      	b.n	8004398 <forward_dense+0x1bc>
 8004a14:	9901      	ldr	r1, [sp, #4]
 8004a16:	9a04      	ldr	r2, [sp, #16]
 8004a18:	4291      	cmp	r1, r2
 8004a1a:	f67f acc5 	bls.w	80043a8 <forward_dense+0x1cc>
 8004a1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004a24:	4691      	mov	r9, r2
 8004a26:	eb07 0c01 	add.w	ip, r7, r1
 8004a2a:	9903      	ldr	r1, [sp, #12]
 8004a2c:	3901      	subs	r1, #1
 8004a2e:	9106      	str	r1, [sp, #24]
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	f000 80c0 	beq.w	8004bb6 <forward_dense+0x9da>
 8004a36:	9a07      	ldr	r2, [sp, #28]
 8004a38:	ecb5 2a01 	vldmia	r5!, {s4}
 8004a3c:	eddf 6a83 	vldr	s13, [pc, #524]	; 8004c4c <forward_dense+0xa70>
 8004a40:	2a00      	cmp	r2, #0
 8004a42:	f000 80c0 	beq.w	8004bc6 <forward_dense+0x9ea>
 8004a46:	1d39      	adds	r1, r7, #4
 8004a48:	f10b 0220 	add.w	r2, fp, #32
 8004a4c:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 8004a50:	3104      	adds	r1, #4
 8004a52:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004a56:	3220      	adds	r2, #32
 8004a58:	f006 0e0f 	and.w	lr, r6, #15
 8004a5c:	0936      	lsrs	r6, r6, #4
 8004a5e:	f811 4c07 	ldrb.w	r4, [r1, #-7]
 8004a62:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8004a66:	ed52 3a10 	vldr	s7, [r2, #-64]	; 0xffffffc0
 8004a6a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8004a6e:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 8004a72:	edde 7a00 	vldr	s15, [lr]
 8004a76:	edd6 2a00 	vldr	s5, [r6]
 8004a7a:	0926      	lsrs	r6, r4, #4
 8004a7c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8004a80:	f004 040f 	and.w	r4, r4, #15
 8004a84:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8004a88:	f811 0c06 	ldrb.w	r0, [r1, #-6]
 8004a8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004a90:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8004a94:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8004a98:	edd6 2a00 	vldr	s5, [r6]
 8004a9c:	edd4 3a00 	vldr	s7, [r4]
 8004aa0:	0904      	lsrs	r4, r0, #4
 8004aa2:	ed12 4a0c 	vldr	s8, [r2, #-48]	; 0xffffffd0
 8004aa6:	f000 000f 	and.w	r0, r0, #15
 8004aaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004aae:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 8004ab2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ab6:	ed12 5a0a 	vldr	s10, [r2, #-40]	; 0xffffffd8
 8004aba:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 8004abe:	eee2 7a83 	vfma.f32	s15, s5, s6
 8004ac2:	eee3 7aa4 	vfma.f32	s15, s7, s9
 8004ac6:	edd4 3a00 	vldr	s7, [r4]
 8004aca:	edd0 4a00 	vldr	s9, [r0]
 8004ace:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 8004ad2:	4561      	cmp	r1, ip
 8004ad4:	ea4f 1410 	mov.w	r4, r0, lsr #4
 8004ad8:	f000 000f 	and.w	r0, r0, #15
 8004adc:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004ae0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ae4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ae8:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8004aec:	edd4 4a00 	vldr	s9, [r4]
 8004af0:	edd0 5a00 	vldr	s11, [r0]
 8004af4:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004af8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004afc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004b00:	d1a4      	bne.n	8004a4c <forward_dense+0x870>
 8004b02:	f1ac 0804 	sub.w	r8, ip, #4
 8004b06:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004b0a:	9a03      	ldr	r2, [sp, #12]
 8004b0c:	4596      	cmp	lr, r2
 8004b0e:	d229      	bcs.n	8004b64 <forward_dense+0x988>
 8004b10:	9a06      	ldr	r2, [sp, #24]
 8004b12:	f10e 0108 	add.w	r1, lr, #8
 8004b16:	f108 34ff 	add.w	r4, r8, #4294967295
 8004b1a:	eba2 060e 	sub.w	r6, r2, lr
 8004b1e:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8004b22:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8004b26:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8004b2a:	3108      	adds	r1, #8
 8004b2c:	ed11 5a03 	vldr	s10, [r1, #-12]
 8004b30:	f002 000f 	and.w	r0, r2, #15
 8004b34:	0912      	lsrs	r2, r2, #4
 8004b36:	ed11 6a04 	vldr	s12, [r1, #-16]
 8004b3a:	42a6      	cmp	r6, r4
 8004b3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b40:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004b44:	edd0 7a00 	vldr	s15, [r0]
 8004b48:	edd2 5a00 	vldr	s11, [r2]
 8004b4c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004b50:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004b54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004b58:	d1e5      	bne.n	8004b26 <forward_dense+0x94a>
 8004b5a:	f10a 0a01 	add.w	sl, sl, #1
 8004b5e:	44d0      	add	r8, sl
 8004b60:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004b64:	9a08      	ldr	r2, [sp, #32]
 8004b66:	b1ca      	cbz	r2, 8004b9c <forward_dense+0x9c0>
 8004b68:	f898 2000 	ldrb.w	r2, [r8]
 8004b6c:	edde 7a00 	vldr	s15, [lr]
 8004b70:	0912      	lsrs	r2, r2, #4
 8004b72:	9902      	ldr	r1, [sp, #8]
 8004b74:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004b78:	440f      	add	r7, r1
 8004b7a:	448c      	add	ip, r1
 8004b7c:	ed92 6a00 	vldr	s12, [r2]
 8004b80:	9a01      	ldr	r2, [sp, #4]
 8004b82:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004b86:	ee32 2a26 	vadd.f32	s4, s4, s13
 8004b8a:	eca9 2a01 	vstmia	r9!, {s4}
 8004b8e:	454a      	cmp	r2, r9
 8004b90:	f63f af4e 	bhi.w	8004a30 <forward_dense+0x854>
 8004b94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004b98:	f7ff bbfe 	b.w	8004398 <forward_dense+0x1bc>
 8004b9c:	9a02      	ldr	r2, [sp, #8]
 8004b9e:	ee72 6a26 	vadd.f32	s13, s4, s13
 8004ba2:	4417      	add	r7, r2
 8004ba4:	4494      	add	ip, r2
 8004ba6:	9a01      	ldr	r2, [sp, #4]
 8004ba8:	ece9 6a01 	vstmia	r9!, {s13}
 8004bac:	4591      	cmp	r9, r2
 8004bae:	d2f1      	bcs.n	8004b94 <forward_dense+0x9b8>
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	f47f af40 	bne.w	8004a36 <forward_dense+0x85a>
 8004bb6:	9a07      	ldr	r2, [sp, #28]
 8004bb8:	eeb0 2a47 	vmov.f32	s4, s14
 8004bbc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004c4c <forward_dense+0xa70>
 8004bc0:	2a00      	cmp	r2, #0
 8004bc2:	f47f af40 	bne.w	8004a46 <forward_dense+0x86a>
 8004bc6:	46de      	mov	lr, fp
 8004bc8:	46b8      	mov	r8, r7
 8004bca:	e79e      	b.n	8004b0a <forward_dense+0x92e>
 8004bcc:	280f      	cmp	r0, #15
 8004bce:	eeb0 0a47 	vmov.f32	s0, s14
 8004bd2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004c4c <forward_dense+0xa70>
 8004bd6:	f63f ae29 	bhi.w	800482c <forward_dense+0x650>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4639      	mov	r1, r7
 8004bde:	465a      	mov	r2, fp
 8004be0:	e695      	b.n	800490e <forward_dense+0x732>
 8004be2:	b01b      	add	sp, #108	; 0x6c
 8004be4:	ecbd 8b0e 	vpop	{d8-d14}
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	465a      	mov	r2, fp
 8004bee:	4639      	mov	r1, r7
 8004bf0:	e465      	b.n	80044be <forward_dense+0x2e2>
 8004bf2:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8004bf6:	f1b9 0f00 	cmp.w	r9, #0
 8004bfa:	f43f ab40 	beq.w	800427e <forward_dense+0xa2>
 8004bfe:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004c02:	f000 fa7d 	bl	8005100 <ai_array_get_byte_size>
 8004c06:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fae0 	bl	80051d4 <memcpy>
 8004c14:	4682      	mov	sl, r0
 8004c16:	f7ff bb32 	b.w	800427e <forward_dense+0xa2>
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d00b      	beq.n	8004c36 <forward_dense+0xa5a>
 8004c1e:	f04f 0900 	mov.w	r9, #0
 8004c22:	f7ff bb27 	b.w	8004274 <forward_dense+0x98>
 8004c26:	930c      	str	r3, [sp, #48]	; 0x30
 8004c28:	f7ff baff 	b.w	800422a <forward_dense+0x4e>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c30:	460b      	mov	r3, r1
 8004c32:	f7ff bafa 	b.w	800422a <forward_dense+0x4e>
 8004c36:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8004c3a:	f7ff bb20 	b.w	800427e <forward_dense+0xa2>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	deff      	udf	#255	; 0xff
 8004c44:	2300      	movs	r3, #0
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	deff      	udf	#255	; 0xff
 8004c4a:	bf00      	nop
 8004c4c:	00000000 	.word	0x00000000

08004c50 <nl_func_relu_generic_array_f32>:
 8004c50:	b430      	push	{r4, r5}
 8004c52:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c56:	ed93 7a00 	vldr	s14, [r3]
 8004c5a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004c5e:	ed93 6a01 	vldr	s12, [r3, #4]
 8004c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c66:	d430      	bmi.n	8004cca <nl_func_relu_generic_array_f32+0x7a>
 8004c68:	698c      	ldr	r4, [r1, #24]
 8004c6a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004c6e:	6981      	ldr	r1, [r0, #24]
 8004c70:	4413      	add	r3, r2
 8004c72:	68a0      	ldr	r0, [r4, #8]
 8004c74:	6889      	ldr	r1, [r1, #8]
 8004c76:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4290      	cmp	r0, r2
 8004c7e:	d822      	bhi.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004c80:	3304      	adds	r3, #4
 8004c82:	3204      	adds	r2, #4
 8004c84:	4419      	add	r1, r3
 8004c86:	e00e      	b.n	8004ca6 <nl_func_relu_generic_array_f32+0x56>
 8004c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c8c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	db01      	blt.n	8004c9a <nl_func_relu_generic_array_f32+0x4a>
 8004c96:	ee65 7a86 	vmul.f32	s15, s11, s12
 8004c9a:	3b08      	subs	r3, #8
 8004c9c:	ed61 7a01 	vstmdb	r1!, {s15}
 8004ca0:	68a0      	ldr	r0, [r4, #8]
 8004ca2:	4298      	cmp	r0, r3
 8004ca4:	d80f      	bhi.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	ed72 7a01 	vldmdb	r2!, {s15}
 8004cac:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb4:	dae8      	bge.n	8004c88 <nl_func_relu_generic_array_f32+0x38>
 8004cb6:	eef0 7a66 	vmov.f32	s15, s13
 8004cba:	3b08      	subs	r3, #8
 8004cbc:	ed61 7a01 	vstmdb	r1!, {s15}
 8004cc0:	68a0      	ldr	r0, [r4, #8]
 8004cc2:	4298      	cmp	r0, r3
 8004cc4:	d9ef      	bls.n	8004ca6 <nl_func_relu_generic_array_f32+0x56>
 8004cc6:	bc30      	pop	{r4, r5}
 8004cc8:	4770      	bx	lr
 8004cca:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004cce:	698d      	ldr	r5, [r1, #24]
 8004cd0:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8004cd4:	6983      	ldr	r3, [r0, #24]
 8004cd6:	68a8      	ldr	r0, [r5, #8]
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	4411      	add	r1, r2
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004ce4:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8004ce8:	d019      	beq.n	8004d1e <nl_func_relu_generic_array_f32+0xce>
 8004cea:	4298      	cmp	r0, r3
 8004cec:	d8eb      	bhi.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004cee:	3104      	adds	r1, #4
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	440a      	add	r2, r1
 8004cf4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004cf8:	1f19      	subs	r1, r3, #4
 8004cfa:	f1a3 0408 	sub.w	r4, r3, #8
 8004cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d02:	460b      	mov	r3, r1
 8004d04:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004d10:	d823      	bhi.n	8004d5a <nl_func_relu_generic_array_f32+0x10a>
 8004d12:	ed62 6a01 	vstmdb	r2!, {s13}
 8004d16:	68a9      	ldr	r1, [r5, #8]
 8004d18:	42a1      	cmp	r1, r4
 8004d1a:	d9eb      	bls.n	8004cf4 <nl_func_relu_generic_array_f32+0xa4>
 8004d1c:	e7d3      	b.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004d1e:	4298      	cmp	r0, r3
 8004d20:	d8d1      	bhi.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004d22:	3104      	adds	r1, #4
 8004d24:	3304      	adds	r3, #4
 8004d26:	f04f 0c00 	mov.w	ip, #0
 8004d2a:	440a      	add	r2, r1
 8004d2c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004d30:	1f19      	subs	r1, r3, #4
 8004d32:	f1a3 0408 	sub.w	r4, r3, #8
 8004d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d40:	dc05      	bgt.n	8004d4e <nl_func_relu_generic_array_f32+0xfe>
 8004d42:	f842 cd04 	str.w	ip, [r2, #-4]!
 8004d46:	68a9      	ldr	r1, [r5, #8]
 8004d48:	42a1      	cmp	r1, r4
 8004d4a:	d9ef      	bls.n	8004d2c <nl_func_relu_generic_array_f32+0xdc>
 8004d4c:	e7bb      	b.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004d4e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004d52:	68a9      	ldr	r1, [r5, #8]
 8004d54:	42a1      	cmp	r1, r4
 8004d56:	d9e9      	bls.n	8004d2c <nl_func_relu_generic_array_f32+0xdc>
 8004d58:	e7b5      	b.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004d5a:	ed62 7a01 	vstmdb	r2!, {s15}
 8004d5e:	68a9      	ldr	r1, [r5, #8]
 8004d60:	42a1      	cmp	r1, r4
 8004d62:	d9c7      	bls.n	8004cf4 <nl_func_relu_generic_array_f32+0xa4>
 8004d64:	e7af      	b.n	8004cc6 <nl_func_relu_generic_array_f32+0x76>
 8004d66:	bf00      	nop

08004d68 <forward_relu>:
 8004d68:	6982      	ldr	r2, [r0, #24]
 8004d6a:	8813      	ldrh	r3, [r2, #0]
 8004d6c:	b30b      	cbz	r3, 8004db2 <forward_relu+0x4a>
 8004d6e:	6852      	ldr	r2, [r2, #4]
 8004d70:	6851      	ldr	r1, [r2, #4]
 8004d72:	b101      	cbz	r1, 8004d76 <forward_relu+0xe>
 8004d74:	6809      	ldr	r1, [r1, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	f000 808d 	beq.w	8004e96 <forward_relu+0x12e>
 8004d7c:	b470      	push	{r4, r5, r6}
 8004d7e:	6916      	ldr	r6, [r2, #16]
 8004d80:	b106      	cbz	r6, 8004d84 <forward_relu+0x1c>
 8004d82:	6836      	ldr	r6, [r6, #0]
 8004d84:	69c0      	ldr	r0, [r0, #28]
 8004d86:	b1b0      	cbz	r0, 8004db6 <forward_relu+0x4e>
 8004d88:	6842      	ldr	r2, [r0, #4]
 8004d8a:	688b      	ldr	r3, [r1, #8]
 8004d8c:	2a01      	cmp	r2, #1
 8004d8e:	d03d      	beq.n	8004e0c <forward_relu+0xa4>
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	d071      	beq.n	8004e78 <forward_relu+0x110>
 8004d94:	68cd      	ldr	r5, [r1, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d9c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	fb04 f202 	mul.w	r2, r4, r2
 8004da6:	d1f9      	bne.n	8004d9c <forward_relu+0x34>
 8004da8:	6883      	ldr	r3, [r0, #8]
 8004daa:	4630      	mov	r0, r6
 8004dac:	bc70      	pop	{r4, r5, r6}
 8004dae:	f7ff bf4f 	b.w	8004c50 <nl_func_relu_generic_array_f32>
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	deff      	udf	#255	; 0xff
 8004db6:	688b      	ldr	r3, [r1, #8]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	d05f      	beq.n	8004e7c <forward_relu+0x114>
 8004dbc:	68cc      	ldr	r4, [r1, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004dc4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	fb00 f202 	mul.w	r2, r0, r2
 8004dce:	d1f9      	bne.n	8004dc4 <forward_relu+0x5c>
 8004dd0:	698c      	ldr	r4, [r1, #24]
 8004dd2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004dd6:	69b1      	ldr	r1, [r6, #24]
 8004dd8:	4413      	add	r3, r2
 8004dda:	68a0      	ldr	r0, [r4, #8]
 8004ddc:	6889      	ldr	r1, [r1, #8]
 8004dde:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8004de2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004de6:	4290      	cmp	r0, r2
 8004de8:	d80e      	bhi.n	8004e08 <forward_relu+0xa0>
 8004dea:	3204      	adds	r2, #4
 8004dec:	3104      	adds	r1, #4
 8004dee:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004e9c <forward_relu+0x134>
 8004df2:	4613      	mov	r3, r2
 8004df4:	ed72 7a01 	vldmdb	r2!, {s15}
 8004df8:	3b08      	subs	r3, #8
 8004dfa:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8004dfe:	ed61 7a01 	vstmdb	r1!, {s15}
 8004e02:	68a0      	ldr	r0, [r4, #8]
 8004e04:	4298      	cmp	r0, r3
 8004e06:	d9f4      	bls.n	8004df2 <forward_relu+0x8a>
 8004e08:	bc70      	pop	{r4, r5, r6}
 8004e0a:	4770      	bx	lr
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	d03a      	beq.n	8004e86 <forward_relu+0x11e>
 8004e10:	68cd      	ldr	r5, [r1, #12]
 8004e12:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004e16:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004e1a:	429d      	cmp	r5, r3
 8004e1c:	fb04 f202 	mul.w	r2, r4, r2
 8004e20:	d1f9      	bne.n	8004e16 <forward_relu+0xae>
 8004e22:	698c      	ldr	r4, [r1, #24]
 8004e24:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8004e28:	6883      	ldr	r3, [r0, #8]
 8004e2a:	4411      	add	r1, r2
 8004e2c:	68a0      	ldr	r0, [r4, #8]
 8004e2e:	69b5      	ldr	r5, [r6, #24]
 8004e30:	ed93 7a00 	vldr	s14, [r3]
 8004e34:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004e38:	68aa      	ldr	r2, [r5, #8]
 8004e3a:	4298      	cmp	r0, r3
 8004e3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004e40:	d8e2      	bhi.n	8004e08 <forward_relu+0xa0>
 8004e42:	3304      	adds	r3, #4
 8004e44:	3204      	adds	r2, #4
 8004e46:	2500      	movs	r5, #0
 8004e48:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004e4c:	1f19      	subs	r1, r3, #4
 8004e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e56:	d507      	bpl.n	8004e68 <forward_relu+0x100>
 8004e58:	3b08      	subs	r3, #8
 8004e5a:	ed62 7a01 	vstmdb	r2!, {s15}
 8004e5e:	68a0      	ldr	r0, [r4, #8]
 8004e60:	4298      	cmp	r0, r3
 8004e62:	d8d1      	bhi.n	8004e08 <forward_relu+0xa0>
 8004e64:	460b      	mov	r3, r1
 8004e66:	e7ef      	b.n	8004e48 <forward_relu+0xe0>
 8004e68:	3b08      	subs	r3, #8
 8004e6a:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004e6e:	68a0      	ldr	r0, [r4, #8]
 8004e70:	4298      	cmp	r0, r3
 8004e72:	d8c9      	bhi.n	8004e08 <forward_relu+0xa0>
 8004e74:	460b      	mov	r3, r1
 8004e76:	e7e7      	b.n	8004e48 <forward_relu+0xe0>
 8004e78:	2201      	movs	r2, #1
 8004e7a:	e795      	b.n	8004da8 <forward_relu+0x40>
 8004e7c:	698c      	ldr	r4, [r1, #24]
 8004e7e:	69b3      	ldr	r3, [r6, #24]
 8004e80:	68a2      	ldr	r2, [r4, #8]
 8004e82:	6899      	ldr	r1, [r3, #8]
 8004e84:	e7b1      	b.n	8004dea <forward_relu+0x82>
 8004e86:	6883      	ldr	r3, [r0, #8]
 8004e88:	698c      	ldr	r4, [r1, #24]
 8004e8a:	69b2      	ldr	r2, [r6, #24]
 8004e8c:	ed93 7a00 	vldr	s14, [r3]
 8004e90:	6892      	ldr	r2, [r2, #8]
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	e7d5      	b.n	8004e42 <forward_relu+0xda>
 8004e96:	2300      	movs	r3, #0
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	deff      	udf	#255	; 0xff
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <ai_check_custom_types>:
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <ai_check_custom_types+0x4c>)
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	b118      	cbz	r0, 8004eb0 <ai_check_custom_types+0x10>
 8004ea8:	7803      	ldrb	r3, [r0, #0]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d002      	beq.n	8004eb4 <ai_check_custom_types+0x14>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	b002      	add	sp, #8
 8004eb2:	4770      	bx	lr
 8004eb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <ai_check_custom_types+0x26>
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f080 0001 	eor.w	r0, r0, #1
 8004ec2:	b002      	add	sp, #8
 8004ec4:	4770      	bx	lr
 8004ec6:	7842      	ldrb	r2, [r0, #1]
 8004ec8:	3001      	adds	r0, #1
 8004eca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d1f4      	bne.n	8004ebc <ai_check_custom_types+0x1c>
 8004ed2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004ed6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d1ee      	bne.n	8004ebc <ai_check_custom_types+0x1c>
 8004ede:	7842      	ldrb	r2, [r0, #1]
 8004ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d1e9      	bne.n	8004ebc <ai_check_custom_types+0x1c>
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e7e8      	b.n	8004ebe <ai_check_custom_types+0x1e>
 8004eec:	84048403 	.word	0x84048403

08004ef0 <ai_layers_init_all>:
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ef4:	b13b      	cbz	r3, 8004f06 <ai_layers_init_all+0x16>
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	3101      	adds	r1, #1
 8004efa:	60d8      	str	r0, [r3, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	4613      	mov	r3, r2
 8004f00:	d001      	beq.n	8004f06 <ai_layers_init_all+0x16>
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	d1f6      	bne.n	8004ef4 <ai_layers_init_all+0x4>
 8004f06:	4608      	mov	r0, r1
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop

08004f0c <ai_layers_post_init_all>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	2500      	movs	r5, #0
 8004f10:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004f12:	b16c      	cbz	r4, 8004f30 <ai_layers_post_init_all+0x24>
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	07db      	lsls	r3, r3, #31
 8004f18:	d504      	bpl.n	8004f24 <ai_layers_post_init_all+0x18>
 8004f1a:	6a23      	ldr	r3, [r4, #32]
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	b10b      	cbz	r3, 8004f24 <ai_layers_post_init_all+0x18>
 8004f20:	3501      	adds	r5, #1
 8004f22:	4798      	blx	r3
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	461c      	mov	r4, r3
 8004f2a:	d001      	beq.n	8004f30 <ai_layers_post_init_all+0x24>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <ai_layers_post_init_all+0x6>
 8004f30:	4628      	mov	r0, r5
 8004f32:	bd38      	pop	{r3, r4, r5, pc}

08004f34 <ai_layers_forward_all>:
 8004f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f38:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	2f00      	cmp	r7, #0
 8004f3e:	d02c      	beq.n	8004f9a <ai_layers_forward_all+0x66>
 8004f40:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004f42:	b1e1      	cbz	r1, 8004f7e <ai_layers_forward_all+0x4a>
 8004f44:	2600      	movs	r6, #0
 8004f46:	6381      	str	r1, [r0, #56]	; 0x38
 8004f48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	47b8      	blx	r7
 8004f4e:	46b0      	mov	r8, r6
 8004f50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f54:	2002      	movs	r0, #2
 8004f56:	47b8      	blx	r7
 8004f58:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	696b      	ldr	r3, [r5, #20]
 8004f5e:	4798      	blx	r3
 8004f60:	692b      	ldr	r3, [r5, #16]
 8004f62:	2003      	movs	r0, #3
 8004f64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f66:	429d      	cmp	r5, r3
 8004f68:	4619      	mov	r1, r3
 8004f6a:	d00c      	beq.n	8004f86 <ai_layers_forward_all+0x52>
 8004f6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f6e:	3601      	adds	r6, #1
 8004f70:	47b8      	blx	r7
 8004f72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d1ec      	bne.n	8004f52 <ai_layers_forward_all+0x1e>
 8004f78:	4630      	mov	r0, r6
 8004f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f7e:	460e      	mov	r6, r1
 8004f80:	4630      	mov	r0, r6
 8004f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f86:	2100      	movs	r1, #0
 8004f88:	2003      	movs	r0, #3
 8004f8a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8004f8e:	3601      	adds	r6, #1
 8004f90:	47b8      	blx	r7
 8004f92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d1dc      	bne.n	8004f52 <ai_layers_forward_all+0x1e>
 8004f98:	e7ee      	b.n	8004f78 <ai_layers_forward_all+0x44>
 8004f9a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004f9c:	b19d      	cbz	r5, 8004fc6 <ai_layers_forward_all+0x92>
 8004f9e:	463e      	mov	r6, r7
 8004fa0:	6385      	str	r5, [r0, #56]	; 0x38
 8004fa2:	e003      	b.n	8004fac <ai_layers_forward_all+0x78>
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	63a5      	str	r5, [r4, #56]	; 0x38
 8004fa8:	2d00      	cmp	r5, #0
 8004faa:	d0e5      	beq.n	8004f78 <ai_layers_forward_all+0x44>
 8004fac:	696b      	ldr	r3, [r5, #20]
 8004fae:	4628      	mov	r0, r5
 8004fb0:	4798      	blx	r3
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	692d      	ldr	r5, [r5, #16]
 8004fb6:	429d      	cmp	r5, r3
 8004fb8:	d1f4      	bne.n	8004fa4 <ai_layers_forward_all+0x70>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc6:	462e      	mov	r6, r5
 8004fc8:	e7d6      	b.n	8004f78 <ai_layers_forward_all+0x44>
 8004fca:	bf00      	nop

08004fcc <ai_version_get>:
 8004fcc:	0212      	lsls	r2, r2, #8
 8004fce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fd2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8004fd6:	4770      	bx	lr

08004fd8 <ai_platform_version_get>:
 8004fd8:	0e01      	lsrs	r1, r0, #24
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8004fe0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004fe4:	f361 0307 	bfi	r3, r1, #0, #8
 8004fe8:	b082      	sub	sp, #8
 8004fea:	f362 230f 	bfi	r3, r2, #8, #8
 8004fee:	f360 4317 	bfi	r3, r0, #16, #8
 8004ff2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8004ff6:	b002      	add	sp, #8
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop

08004ffc <get_tensor_byte_size>:
 8004ffc:	b430      	push	{r4, r5}
 8004ffe:	6985      	ldr	r5, [r0, #24]
 8005000:	68c4      	ldr	r4, [r0, #12]
 8005002:	6941      	ldr	r1, [r0, #20]
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <get_tensor_byte_size+0x24>)
 8005006:	6828      	ldr	r0, [r5, #0]
 8005008:	4a06      	ldr	r2, [pc, #24]	; (8005024 <get_tensor_byte_size+0x28>)
 800500a:	4003      	ands	r3, r0
 800500c:	68c9      	ldr	r1, [r1, #12]
 800500e:	68e0      	ldr	r0, [r4, #12]
 8005010:	4293      	cmp	r3, r2
 8005012:	fb01 f000 	mul.w	r0, r1, r0
 8005016:	d101      	bne.n	800501c <get_tensor_byte_size+0x20>
 8005018:	3007      	adds	r0, #7
 800501a:	08c0      	lsrs	r0, r0, #3
 800501c:	bc30      	pop	{r4, r5}
 800501e:	4770      	bx	lr
 8005020:	017fffff 	.word	0x017fffff
 8005024:	000400c0 	.word	0x000400c0

08005028 <ai_array_to_buffer_fmt>:
 8005028:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800502c:	2b02      	cmp	r3, #2
 800502e:	d050      	beq.n	80050d2 <ai_array_to_buffer_fmt+0xaa>
 8005030:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <ai_array_to_buffer_fmt+0xb4>)
 8005036:	429a      	cmp	r2, r3
 8005038:	d00b      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 800503a:	dc1c      	bgt.n	8005076 <ai_array_to_buffer_fmt+0x4e>
 800503c:	4b28      	ldr	r3, [pc, #160]	; (80050e0 <ai_array_to_buffer_fmt+0xb8>)
 800503e:	429a      	cmp	r2, r3
 8005040:	d007      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 8005042:	dd0b      	ble.n	800505c <ai_array_to_buffer_fmt+0x34>
 8005044:	4b27      	ldr	r3, [pc, #156]	; (80050e4 <ai_array_to_buffer_fmt+0xbc>)
 8005046:	429a      	cmp	r2, r3
 8005048:	d003      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 800504a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800504e:	429a      	cmp	r2, r3
 8005050:	d131      	bne.n	80050b6 <ai_array_to_buffer_fmt+0x8e>
 8005052:	4613      	mov	r3, r2
 8005054:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005058:	4318      	orrs	r0, r3
 800505a:	4770      	bx	lr
 800505c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005060:	429a      	cmp	r2, r3
 8005062:	d0f6      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 8005064:	dd2c      	ble.n	80050c0 <ai_array_to_buffer_fmt+0x98>
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <ai_array_to_buffer_fmt+0xc0>)
 8005068:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800506c:	429a      	cmp	r2, r3
 800506e:	bf18      	it	ne
 8005070:	2340      	movne	r3, #64	; 0x40
 8005072:	4318      	orrs	r0, r3
 8005074:	4770      	bx	lr
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <ai_array_to_buffer_fmt+0xc4>)
 8005078:	429a      	cmp	r2, r3
 800507a:	d0ea      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 800507c:	dd0e      	ble.n	800509c <ai_array_to_buffer_fmt+0x74>
 800507e:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <ai_array_to_buffer_fmt+0xc8>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d0e6      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 8005084:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8005088:	429a      	cmp	r2, r3
 800508a:	d0e2      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <ai_array_to_buffer_fmt+0xcc>)
 800508e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005092:	429a      	cmp	r2, r3
 8005094:	bf18      	it	ne
 8005096:	2340      	movne	r3, #64	; 0x40
 8005098:	4318      	orrs	r0, r3
 800509a:	4770      	bx	lr
 800509c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d0d6      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 80050a4:	3307      	adds	r3, #7
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d0d3      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 80050aa:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80050ae:	429a      	cmp	r2, r3
 80050b0:	bf18      	it	ne
 80050b2:	2340      	movne	r3, #64	; 0x40
 80050b4:	e7ce      	b.n	8005054 <ai_array_to_buffer_fmt+0x2c>
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <ai_array_to_buffer_fmt+0xd0>)
 80050b8:	429a      	cmp	r2, r3
 80050ba:	bf18      	it	ne
 80050bc:	2340      	movne	r3, #64	; 0x40
 80050be:	e7c9      	b.n	8005054 <ai_array_to_buffer_fmt+0x2c>
 80050c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d0c4      	beq.n	8005052 <ai_array_to_buffer_fmt+0x2a>
 80050c8:	3380      	adds	r3, #128	; 0x80
 80050ca:	429a      	cmp	r2, r3
 80050cc:	bf18      	it	ne
 80050ce:	2340      	movne	r3, #64	; 0x40
 80050d0:	e7c0      	b.n	8005054 <ai_array_to_buffer_fmt+0x2c>
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <ai_array_to_buffer_fmt+0xd4>)
 80050d4:	4003      	ands	r3, r0
 80050d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050da:	e7bb      	b.n	8005054 <ai_array_to_buffer_fmt+0x2c>
 80050dc:	00840040 	.word	0x00840040
 80050e0:	00040840 	.word	0x00040840
 80050e4:	00041040 	.word	0x00041040
 80050e8:	00040447 	.word	0x00040447
 80050ec:	00840840 	.word	0x00840840
 80050f0:	00841040 	.word	0x00841040
 80050f4:	0084084f 	.word	0x0084084f
 80050f8:	0004084f 	.word	0x0004084f
 80050fc:	00803fff 	.word	0x00803fff

08005100 <ai_array_get_byte_size>:
 8005100:	b319      	cbz	r1, 800514a <ai_array_get_byte_size+0x4a>
 8005102:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005106:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800510a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800510e:	11c0      	asrs	r0, r0, #7
 8005110:	fb03 f101 	mul.w	r1, r3, r1
 8005114:	2a04      	cmp	r2, #4
 8005116:	f101 0107 	add.w	r1, r1, #7
 800511a:	f021 0107 	bic.w	r1, r1, #7
 800511e:	fa21 f10c 	lsr.w	r1, r1, ip
 8005122:	d00b      	beq.n	800513c <ai_array_get_byte_size+0x3c>
 8005124:	2a08      	cmp	r2, #8
 8005126:	d002      	beq.n	800512e <ai_array_get_byte_size+0x2e>
 8005128:	3107      	adds	r1, #7
 800512a:	08c8      	lsrs	r0, r1, #3
 800512c:	4770      	bx	lr
 800512e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005132:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8005136:	3107      	adds	r1, #7
 8005138:	08c8      	lsrs	r0, r1, #3
 800513a:	4770      	bx	lr
 800513c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005140:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8005144:	3107      	adds	r1, #7
 8005146:	08c8      	lsrs	r0, r1, #3
 8005148:	4770      	bx	lr
 800514a:	4608      	mov	r0, r1
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <ai_array_get_data_byte_size>:
 8005150:	b161      	cbz	r1, 800516c <ai_array_get_data_byte_size+0x1c>
 8005152:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005156:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800515a:	fb03 f101 	mul.w	r1, r3, r1
 800515e:	1dc8      	adds	r0, r1, #7
 8005160:	f020 0007 	bic.w	r0, r0, #7
 8005164:	40d0      	lsrs	r0, r2
 8005166:	3007      	adds	r0, #7
 8005168:	08c0      	lsrs	r0, r0, #3
 800516a:	4770      	bx	lr
 800516c:	4608      	mov	r0, r1
 800516e:	4770      	bx	lr

08005170 <__errno>:
 8005170:	4b01      	ldr	r3, [pc, #4]	; (8005178 <__errno+0x8>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	200006a0 	.word	0x200006a0

0800517c <__libc_init_array>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	4d0d      	ldr	r5, [pc, #52]	; (80051b4 <__libc_init_array+0x38>)
 8005180:	4c0d      	ldr	r4, [pc, #52]	; (80051b8 <__libc_init_array+0x3c>)
 8005182:	1b64      	subs	r4, r4, r5
 8005184:	10a4      	asrs	r4, r4, #2
 8005186:	2600      	movs	r6, #0
 8005188:	42a6      	cmp	r6, r4
 800518a:	d109      	bne.n	80051a0 <__libc_init_array+0x24>
 800518c:	4d0b      	ldr	r5, [pc, #44]	; (80051bc <__libc_init_array+0x40>)
 800518e:	4c0c      	ldr	r4, [pc, #48]	; (80051c0 <__libc_init_array+0x44>)
 8005190:	f002 fea4 	bl	8007edc <_init>
 8005194:	1b64      	subs	r4, r4, r5
 8005196:	10a4      	asrs	r4, r4, #2
 8005198:	2600      	movs	r6, #0
 800519a:	42a6      	cmp	r6, r4
 800519c:	d105      	bne.n	80051aa <__libc_init_array+0x2e>
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a4:	4798      	blx	r3
 80051a6:	3601      	adds	r6, #1
 80051a8:	e7ee      	b.n	8005188 <__libc_init_array+0xc>
 80051aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ae:	4798      	blx	r3
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7f2      	b.n	800519a <__libc_init_array+0x1e>
 80051b4:	0800899c 	.word	0x0800899c
 80051b8:	0800899c 	.word	0x0800899c
 80051bc:	0800899c 	.word	0x0800899c
 80051c0:	080089a0 	.word	0x080089a0

080051c4 <malloc>:
 80051c4:	4b02      	ldr	r3, [pc, #8]	; (80051d0 <malloc+0xc>)
 80051c6:	4601      	mov	r1, r0
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f000 b885 	b.w	80052d8 <_malloc_r>
 80051ce:	bf00      	nop
 80051d0:	200006a0 	.word	0x200006a0

080051d4 <memcpy>:
 80051d4:	440a      	add	r2, r1
 80051d6:	4291      	cmp	r1, r2
 80051d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051dc:	d100      	bne.n	80051e0 <memcpy+0xc>
 80051de:	4770      	bx	lr
 80051e0:	b510      	push	{r4, lr}
 80051e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ea:	4291      	cmp	r1, r2
 80051ec:	d1f9      	bne.n	80051e2 <memcpy+0xe>
 80051ee:	bd10      	pop	{r4, pc}

080051f0 <memset>:
 80051f0:	4402      	add	r2, r0
 80051f2:	4603      	mov	r3, r0
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d100      	bne.n	80051fa <memset+0xa>
 80051f8:	4770      	bx	lr
 80051fa:	f803 1b01 	strb.w	r1, [r3], #1
 80051fe:	e7f9      	b.n	80051f4 <memset+0x4>

08005200 <_free_r>:
 8005200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005202:	2900      	cmp	r1, #0
 8005204:	d044      	beq.n	8005290 <_free_r+0x90>
 8005206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800520a:	9001      	str	r0, [sp, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f1a1 0404 	sub.w	r4, r1, #4
 8005212:	bfb8      	it	lt
 8005214:	18e4      	addlt	r4, r4, r3
 8005216:	f001 fb4d 	bl	80068b4 <__malloc_lock>
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <_free_r+0x94>)
 800521c:	9801      	ldr	r0, [sp, #4]
 800521e:	6813      	ldr	r3, [r2, #0]
 8005220:	b933      	cbnz	r3, 8005230 <_free_r+0x30>
 8005222:	6063      	str	r3, [r4, #4]
 8005224:	6014      	str	r4, [r2, #0]
 8005226:	b003      	add	sp, #12
 8005228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800522c:	f001 bb48 	b.w	80068c0 <__malloc_unlock>
 8005230:	42a3      	cmp	r3, r4
 8005232:	d908      	bls.n	8005246 <_free_r+0x46>
 8005234:	6825      	ldr	r5, [r4, #0]
 8005236:	1961      	adds	r1, r4, r5
 8005238:	428b      	cmp	r3, r1
 800523a:	bf01      	itttt	eq
 800523c:	6819      	ldreq	r1, [r3, #0]
 800523e:	685b      	ldreq	r3, [r3, #4]
 8005240:	1949      	addeq	r1, r1, r5
 8005242:	6021      	streq	r1, [r4, #0]
 8005244:	e7ed      	b.n	8005222 <_free_r+0x22>
 8005246:	461a      	mov	r2, r3
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b10b      	cbz	r3, 8005250 <_free_r+0x50>
 800524c:	42a3      	cmp	r3, r4
 800524e:	d9fa      	bls.n	8005246 <_free_r+0x46>
 8005250:	6811      	ldr	r1, [r2, #0]
 8005252:	1855      	adds	r5, r2, r1
 8005254:	42a5      	cmp	r5, r4
 8005256:	d10b      	bne.n	8005270 <_free_r+0x70>
 8005258:	6824      	ldr	r4, [r4, #0]
 800525a:	4421      	add	r1, r4
 800525c:	1854      	adds	r4, r2, r1
 800525e:	42a3      	cmp	r3, r4
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	d1e0      	bne.n	8005226 <_free_r+0x26>
 8005264:	681c      	ldr	r4, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	6053      	str	r3, [r2, #4]
 800526a:	4421      	add	r1, r4
 800526c:	6011      	str	r1, [r2, #0]
 800526e:	e7da      	b.n	8005226 <_free_r+0x26>
 8005270:	d902      	bls.n	8005278 <_free_r+0x78>
 8005272:	230c      	movs	r3, #12
 8005274:	6003      	str	r3, [r0, #0]
 8005276:	e7d6      	b.n	8005226 <_free_r+0x26>
 8005278:	6825      	ldr	r5, [r4, #0]
 800527a:	1961      	adds	r1, r4, r5
 800527c:	428b      	cmp	r3, r1
 800527e:	bf04      	itt	eq
 8005280:	6819      	ldreq	r1, [r3, #0]
 8005282:	685b      	ldreq	r3, [r3, #4]
 8005284:	6063      	str	r3, [r4, #4]
 8005286:	bf04      	itt	eq
 8005288:	1949      	addeq	r1, r1, r5
 800528a:	6021      	streq	r1, [r4, #0]
 800528c:	6054      	str	r4, [r2, #4]
 800528e:	e7ca      	b.n	8005226 <_free_r+0x26>
 8005290:	b003      	add	sp, #12
 8005292:	bd30      	pop	{r4, r5, pc}
 8005294:	200009d8 	.word	0x200009d8

08005298 <sbrk_aligned>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4e0e      	ldr	r6, [pc, #56]	; (80052d4 <sbrk_aligned+0x3c>)
 800529c:	460c      	mov	r4, r1
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	4605      	mov	r5, r0
 80052a2:	b911      	cbnz	r1, 80052aa <sbrk_aligned+0x12>
 80052a4:	f000 fcce 	bl	8005c44 <_sbrk_r>
 80052a8:	6030      	str	r0, [r6, #0]
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fcc9 	bl	8005c44 <_sbrk_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d00a      	beq.n	80052cc <sbrk_aligned+0x34>
 80052b6:	1cc4      	adds	r4, r0, #3
 80052b8:	f024 0403 	bic.w	r4, r4, #3
 80052bc:	42a0      	cmp	r0, r4
 80052be:	d007      	beq.n	80052d0 <sbrk_aligned+0x38>
 80052c0:	1a21      	subs	r1, r4, r0
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 fcbe 	bl	8005c44 <_sbrk_r>
 80052c8:	3001      	adds	r0, #1
 80052ca:	d101      	bne.n	80052d0 <sbrk_aligned+0x38>
 80052cc:	f04f 34ff 	mov.w	r4, #4294967295
 80052d0:	4620      	mov	r0, r4
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	200009dc 	.word	0x200009dc

080052d8 <_malloc_r>:
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	1ccd      	adds	r5, r1, #3
 80052de:	f025 0503 	bic.w	r5, r5, #3
 80052e2:	3508      	adds	r5, #8
 80052e4:	2d0c      	cmp	r5, #12
 80052e6:	bf38      	it	cc
 80052e8:	250c      	movcc	r5, #12
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	4607      	mov	r7, r0
 80052ee:	db01      	blt.n	80052f4 <_malloc_r+0x1c>
 80052f0:	42a9      	cmp	r1, r5
 80052f2:	d905      	bls.n	8005300 <_malloc_r+0x28>
 80052f4:	230c      	movs	r3, #12
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	2600      	movs	r6, #0
 80052fa:	4630      	mov	r0, r6
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005300:	4e2e      	ldr	r6, [pc, #184]	; (80053bc <_malloc_r+0xe4>)
 8005302:	f001 fad7 	bl	80068b4 <__malloc_lock>
 8005306:	6833      	ldr	r3, [r6, #0]
 8005308:	461c      	mov	r4, r3
 800530a:	bb34      	cbnz	r4, 800535a <_malloc_r+0x82>
 800530c:	4629      	mov	r1, r5
 800530e:	4638      	mov	r0, r7
 8005310:	f7ff ffc2 	bl	8005298 <sbrk_aligned>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	4604      	mov	r4, r0
 8005318:	d14d      	bne.n	80053b6 <_malloc_r+0xde>
 800531a:	6834      	ldr	r4, [r6, #0]
 800531c:	4626      	mov	r6, r4
 800531e:	2e00      	cmp	r6, #0
 8005320:	d140      	bne.n	80053a4 <_malloc_r+0xcc>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	4631      	mov	r1, r6
 8005326:	4638      	mov	r0, r7
 8005328:	eb04 0803 	add.w	r8, r4, r3
 800532c:	f000 fc8a 	bl	8005c44 <_sbrk_r>
 8005330:	4580      	cmp	r8, r0
 8005332:	d13a      	bne.n	80053aa <_malloc_r+0xd2>
 8005334:	6821      	ldr	r1, [r4, #0]
 8005336:	3503      	adds	r5, #3
 8005338:	1a6d      	subs	r5, r5, r1
 800533a:	f025 0503 	bic.w	r5, r5, #3
 800533e:	3508      	adds	r5, #8
 8005340:	2d0c      	cmp	r5, #12
 8005342:	bf38      	it	cc
 8005344:	250c      	movcc	r5, #12
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ffa5 	bl	8005298 <sbrk_aligned>
 800534e:	3001      	adds	r0, #1
 8005350:	d02b      	beq.n	80053aa <_malloc_r+0xd2>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	442b      	add	r3, r5
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	e00e      	b.n	8005378 <_malloc_r+0xa0>
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	1b52      	subs	r2, r2, r5
 800535e:	d41e      	bmi.n	800539e <_malloc_r+0xc6>
 8005360:	2a0b      	cmp	r2, #11
 8005362:	d916      	bls.n	8005392 <_malloc_r+0xba>
 8005364:	1961      	adds	r1, r4, r5
 8005366:	42a3      	cmp	r3, r4
 8005368:	6025      	str	r5, [r4, #0]
 800536a:	bf18      	it	ne
 800536c:	6059      	strne	r1, [r3, #4]
 800536e:	6863      	ldr	r3, [r4, #4]
 8005370:	bf08      	it	eq
 8005372:	6031      	streq	r1, [r6, #0]
 8005374:	5162      	str	r2, [r4, r5]
 8005376:	604b      	str	r3, [r1, #4]
 8005378:	4638      	mov	r0, r7
 800537a:	f104 060b 	add.w	r6, r4, #11
 800537e:	f001 fa9f 	bl	80068c0 <__malloc_unlock>
 8005382:	f026 0607 	bic.w	r6, r6, #7
 8005386:	1d23      	adds	r3, r4, #4
 8005388:	1af2      	subs	r2, r6, r3
 800538a:	d0b6      	beq.n	80052fa <_malloc_r+0x22>
 800538c:	1b9b      	subs	r3, r3, r6
 800538e:	50a3      	str	r3, [r4, r2]
 8005390:	e7b3      	b.n	80052fa <_malloc_r+0x22>
 8005392:	6862      	ldr	r2, [r4, #4]
 8005394:	42a3      	cmp	r3, r4
 8005396:	bf0c      	ite	eq
 8005398:	6032      	streq	r2, [r6, #0]
 800539a:	605a      	strne	r2, [r3, #4]
 800539c:	e7ec      	b.n	8005378 <_malloc_r+0xa0>
 800539e:	4623      	mov	r3, r4
 80053a0:	6864      	ldr	r4, [r4, #4]
 80053a2:	e7b2      	b.n	800530a <_malloc_r+0x32>
 80053a4:	4634      	mov	r4, r6
 80053a6:	6876      	ldr	r6, [r6, #4]
 80053a8:	e7b9      	b.n	800531e <_malloc_r+0x46>
 80053aa:	230c      	movs	r3, #12
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4638      	mov	r0, r7
 80053b0:	f001 fa86 	bl	80068c0 <__malloc_unlock>
 80053b4:	e7a1      	b.n	80052fa <_malloc_r+0x22>
 80053b6:	6025      	str	r5, [r4, #0]
 80053b8:	e7de      	b.n	8005378 <_malloc_r+0xa0>
 80053ba:	bf00      	nop
 80053bc:	200009d8 	.word	0x200009d8

080053c0 <__cvt>:
 80053c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c2:	ed2d 8b02 	vpush	{d8}
 80053c6:	eeb0 8b40 	vmov.f64	d8, d0
 80053ca:	b085      	sub	sp, #20
 80053cc:	4617      	mov	r7, r2
 80053ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80053d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053d2:	ee18 2a90 	vmov	r2, s17
 80053d6:	f025 0520 	bic.w	r5, r5, #32
 80053da:	2a00      	cmp	r2, #0
 80053dc:	bfb6      	itet	lt
 80053de:	222d      	movlt	r2, #45	; 0x2d
 80053e0:	2200      	movge	r2, #0
 80053e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80053e6:	2d46      	cmp	r5, #70	; 0x46
 80053e8:	460c      	mov	r4, r1
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	d004      	beq.n	80053f8 <__cvt+0x38>
 80053ee:	2d45      	cmp	r5, #69	; 0x45
 80053f0:	d100      	bne.n	80053f4 <__cvt+0x34>
 80053f2:	3401      	adds	r4, #1
 80053f4:	2102      	movs	r1, #2
 80053f6:	e000      	b.n	80053fa <__cvt+0x3a>
 80053f8:	2103      	movs	r1, #3
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	ab02      	add	r3, sp, #8
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	4622      	mov	r2, r4
 8005404:	4633      	mov	r3, r6
 8005406:	eeb0 0b48 	vmov.f64	d0, d8
 800540a:	f000 fce1 	bl	8005dd0 <_dtoa_r>
 800540e:	2d47      	cmp	r5, #71	; 0x47
 8005410:	d101      	bne.n	8005416 <__cvt+0x56>
 8005412:	07fb      	lsls	r3, r7, #31
 8005414:	d51a      	bpl.n	800544c <__cvt+0x8c>
 8005416:	2d46      	cmp	r5, #70	; 0x46
 8005418:	eb00 0204 	add.w	r2, r0, r4
 800541c:	d10c      	bne.n	8005438 <__cvt+0x78>
 800541e:	7803      	ldrb	r3, [r0, #0]
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d107      	bne.n	8005434 <__cvt+0x74>
 8005424:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	bf1c      	itt	ne
 800542e:	f1c4 0401 	rsbne	r4, r4, #1
 8005432:	6034      	strne	r4, [r6, #0]
 8005434:	6833      	ldr	r3, [r6, #0]
 8005436:	441a      	add	r2, r3
 8005438:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800543c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005440:	bf08      	it	eq
 8005442:	9203      	streq	r2, [sp, #12]
 8005444:	2130      	movs	r1, #48	; 0x30
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	4293      	cmp	r3, r2
 800544a:	d307      	bcc.n	800545c <__cvt+0x9c>
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005450:	1a1b      	subs	r3, r3, r0
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	b005      	add	sp, #20
 8005456:	ecbd 8b02 	vpop	{d8}
 800545a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545c:	1c5c      	adds	r4, r3, #1
 800545e:	9403      	str	r4, [sp, #12]
 8005460:	7019      	strb	r1, [r3, #0]
 8005462:	e7f0      	b.n	8005446 <__cvt+0x86>

08005464 <__exponent>:
 8005464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005466:	4603      	mov	r3, r0
 8005468:	2900      	cmp	r1, #0
 800546a:	bfb8      	it	lt
 800546c:	4249      	neglt	r1, r1
 800546e:	f803 2b02 	strb.w	r2, [r3], #2
 8005472:	bfb4      	ite	lt
 8005474:	222d      	movlt	r2, #45	; 0x2d
 8005476:	222b      	movge	r2, #43	; 0x2b
 8005478:	2909      	cmp	r1, #9
 800547a:	7042      	strb	r2, [r0, #1]
 800547c:	dd2a      	ble.n	80054d4 <__exponent+0x70>
 800547e:	f10d 0407 	add.w	r4, sp, #7
 8005482:	46a4      	mov	ip, r4
 8005484:	270a      	movs	r7, #10
 8005486:	46a6      	mov	lr, r4
 8005488:	460a      	mov	r2, r1
 800548a:	fb91 f6f7 	sdiv	r6, r1, r7
 800548e:	fb07 1516 	mls	r5, r7, r6, r1
 8005492:	3530      	adds	r5, #48	; 0x30
 8005494:	2a63      	cmp	r2, #99	; 0x63
 8005496:	f104 34ff 	add.w	r4, r4, #4294967295
 800549a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800549e:	4631      	mov	r1, r6
 80054a0:	dcf1      	bgt.n	8005486 <__exponent+0x22>
 80054a2:	3130      	adds	r1, #48	; 0x30
 80054a4:	f1ae 0502 	sub.w	r5, lr, #2
 80054a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054ac:	1c44      	adds	r4, r0, #1
 80054ae:	4629      	mov	r1, r5
 80054b0:	4561      	cmp	r1, ip
 80054b2:	d30a      	bcc.n	80054ca <__exponent+0x66>
 80054b4:	f10d 0209 	add.w	r2, sp, #9
 80054b8:	eba2 020e 	sub.w	r2, r2, lr
 80054bc:	4565      	cmp	r5, ip
 80054be:	bf88      	it	hi
 80054c0:	2200      	movhi	r2, #0
 80054c2:	4413      	add	r3, r2
 80054c4:	1a18      	subs	r0, r3, r0
 80054c6:	b003      	add	sp, #12
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054d2:	e7ed      	b.n	80054b0 <__exponent+0x4c>
 80054d4:	2330      	movs	r3, #48	; 0x30
 80054d6:	3130      	adds	r1, #48	; 0x30
 80054d8:	7083      	strb	r3, [r0, #2]
 80054da:	70c1      	strb	r1, [r0, #3]
 80054dc:	1d03      	adds	r3, r0, #4
 80054de:	e7f1      	b.n	80054c4 <__exponent+0x60>

080054e0 <_printf_float>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	b08b      	sub	sp, #44	; 0x2c
 80054e6:	460c      	mov	r4, r1
 80054e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80054ec:	4616      	mov	r6, r2
 80054ee:	461f      	mov	r7, r3
 80054f0:	4605      	mov	r5, r0
 80054f2:	f001 f9db 	bl	80068ac <_localeconv_r>
 80054f6:	f8d0 b000 	ldr.w	fp, [r0]
 80054fa:	4658      	mov	r0, fp
 80054fc:	f7fa fea0 	bl	8000240 <strlen>
 8005500:	2300      	movs	r3, #0
 8005502:	9308      	str	r3, [sp, #32]
 8005504:	f8d8 3000 	ldr.w	r3, [r8]
 8005508:	f894 9018 	ldrb.w	r9, [r4, #24]
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	3307      	adds	r3, #7
 8005510:	f023 0307 	bic.w	r3, r3, #7
 8005514:	f103 0108 	add.w	r1, r3, #8
 8005518:	f8c8 1000 	str.w	r1, [r8]
 800551c:	4682      	mov	sl, r0
 800551e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005522:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005526:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005788 <_printf_float+0x2a8>
 800552a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800552e:	eeb0 6bc0 	vabs.f64	d6, d0
 8005532:	eeb4 6b47 	vcmp.f64	d6, d7
 8005536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553a:	dd24      	ble.n	8005586 <_printf_float+0xa6>
 800553c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005544:	d502      	bpl.n	800554c <_printf_float+0x6c>
 8005546:	232d      	movs	r3, #45	; 0x2d
 8005548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554c:	4b90      	ldr	r3, [pc, #576]	; (8005790 <_printf_float+0x2b0>)
 800554e:	4891      	ldr	r0, [pc, #580]	; (8005794 <_printf_float+0x2b4>)
 8005550:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005554:	bf94      	ite	ls
 8005556:	4698      	movls	r8, r3
 8005558:	4680      	movhi	r8, r0
 800555a:	2303      	movs	r3, #3
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	2300      	movs	r3, #0
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	9700      	str	r7, [sp, #0]
 800556a:	4633      	mov	r3, r6
 800556c:	aa09      	add	r2, sp, #36	; 0x24
 800556e:	4621      	mov	r1, r4
 8005570:	4628      	mov	r0, r5
 8005572:	f000 f9d3 	bl	800591c <_printf_common>
 8005576:	3001      	adds	r0, #1
 8005578:	f040 808a 	bne.w	8005690 <_printf_float+0x1b0>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	b00b      	add	sp, #44	; 0x2c
 8005582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005586:	eeb4 0b40 	vcmp.f64	d0, d0
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d709      	bvc.n	80055a4 <_printf_float+0xc4>
 8005590:	ee10 3a90 	vmov	r3, s1
 8005594:	2b00      	cmp	r3, #0
 8005596:	bfbc      	itt	lt
 8005598:	232d      	movlt	r3, #45	; 0x2d
 800559a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800559e:	487e      	ldr	r0, [pc, #504]	; (8005798 <_printf_float+0x2b8>)
 80055a0:	4b7e      	ldr	r3, [pc, #504]	; (800579c <_printf_float+0x2bc>)
 80055a2:	e7d5      	b.n	8005550 <_printf_float+0x70>
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80055aa:	9104      	str	r1, [sp, #16]
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	d13c      	bne.n	800562a <_printf_float+0x14a>
 80055b0:	2306      	movs	r3, #6
 80055b2:	6063      	str	r3, [r4, #4]
 80055b4:	2300      	movs	r3, #0
 80055b6:	9303      	str	r3, [sp, #12]
 80055b8:	ab08      	add	r3, sp, #32
 80055ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80055be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c2:	ab07      	add	r3, sp, #28
 80055c4:	6861      	ldr	r1, [r4, #4]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	6022      	str	r2, [r4, #0]
 80055ca:	f10d 031b 	add.w	r3, sp, #27
 80055ce:	4628      	mov	r0, r5
 80055d0:	f7ff fef6 	bl	80053c0 <__cvt>
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	9907      	ldr	r1, [sp, #28]
 80055d8:	2b47      	cmp	r3, #71	; 0x47
 80055da:	4680      	mov	r8, r0
 80055dc:	d108      	bne.n	80055f0 <_printf_float+0x110>
 80055de:	1cc8      	adds	r0, r1, #3
 80055e0:	db02      	blt.n	80055e8 <_printf_float+0x108>
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	4299      	cmp	r1, r3
 80055e6:	dd41      	ble.n	800566c <_printf_float+0x18c>
 80055e8:	f1a9 0902 	sub.w	r9, r9, #2
 80055ec:	fa5f f989 	uxtb.w	r9, r9
 80055f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055f4:	d820      	bhi.n	8005638 <_printf_float+0x158>
 80055f6:	3901      	subs	r1, #1
 80055f8:	464a      	mov	r2, r9
 80055fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055fe:	9107      	str	r1, [sp, #28]
 8005600:	f7ff ff30 	bl	8005464 <__exponent>
 8005604:	9a08      	ldr	r2, [sp, #32]
 8005606:	9004      	str	r0, [sp, #16]
 8005608:	1813      	adds	r3, r2, r0
 800560a:	2a01      	cmp	r2, #1
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	dc02      	bgt.n	8005616 <_printf_float+0x136>
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	07d2      	lsls	r2, r2, #31
 8005614:	d501      	bpl.n	800561a <_printf_float+0x13a>
 8005616:	3301      	adds	r3, #1
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0a2      	beq.n	8005568 <_printf_float+0x88>
 8005622:	232d      	movs	r3, #45	; 0x2d
 8005624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005628:	e79e      	b.n	8005568 <_printf_float+0x88>
 800562a:	9904      	ldr	r1, [sp, #16]
 800562c:	2947      	cmp	r1, #71	; 0x47
 800562e:	d1c1      	bne.n	80055b4 <_printf_float+0xd4>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1bf      	bne.n	80055b4 <_printf_float+0xd4>
 8005634:	2301      	movs	r3, #1
 8005636:	e7bc      	b.n	80055b2 <_printf_float+0xd2>
 8005638:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800563c:	d118      	bne.n	8005670 <_printf_float+0x190>
 800563e:	2900      	cmp	r1, #0
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	dd0b      	ble.n	800565c <_printf_float+0x17c>
 8005644:	6121      	str	r1, [r4, #16]
 8005646:	b913      	cbnz	r3, 800564e <_printf_float+0x16e>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	07d0      	lsls	r0, r2, #31
 800564c:	d502      	bpl.n	8005654 <_printf_float+0x174>
 800564e:	3301      	adds	r3, #1
 8005650:	440b      	add	r3, r1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	2300      	movs	r3, #0
 8005656:	65a1      	str	r1, [r4, #88]	; 0x58
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	e7de      	b.n	800561a <_printf_float+0x13a>
 800565c:	b913      	cbnz	r3, 8005664 <_printf_float+0x184>
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	07d2      	lsls	r2, r2, #31
 8005662:	d501      	bpl.n	8005668 <_printf_float+0x188>
 8005664:	3302      	adds	r3, #2
 8005666:	e7f4      	b.n	8005652 <_printf_float+0x172>
 8005668:	2301      	movs	r3, #1
 800566a:	e7f2      	b.n	8005652 <_printf_float+0x172>
 800566c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005670:	9b08      	ldr	r3, [sp, #32]
 8005672:	4299      	cmp	r1, r3
 8005674:	db05      	blt.n	8005682 <_printf_float+0x1a2>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	6121      	str	r1, [r4, #16]
 800567a:	07d8      	lsls	r0, r3, #31
 800567c:	d5ea      	bpl.n	8005654 <_printf_float+0x174>
 800567e:	1c4b      	adds	r3, r1, #1
 8005680:	e7e7      	b.n	8005652 <_printf_float+0x172>
 8005682:	2900      	cmp	r1, #0
 8005684:	bfd4      	ite	le
 8005686:	f1c1 0202 	rsble	r2, r1, #2
 800568a:	2201      	movgt	r2, #1
 800568c:	4413      	add	r3, r2
 800568e:	e7e0      	b.n	8005652 <_printf_float+0x172>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	055a      	lsls	r2, r3, #21
 8005694:	d407      	bmi.n	80056a6 <_printf_float+0x1c6>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	4642      	mov	r2, r8
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	d12a      	bne.n	80056fa <_printf_float+0x21a>
 80056a4:	e76a      	b.n	800557c <_printf_float+0x9c>
 80056a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056aa:	f240 80e2 	bls.w	8005872 <_printf_float+0x392>
 80056ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80056b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80056b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ba:	d133      	bne.n	8005724 <_printf_float+0x244>
 80056bc:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <_printf_float+0x2c0>)
 80056be:	2301      	movs	r3, #1
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	f43f af58 	beq.w	800557c <_printf_float+0x9c>
 80056cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	db02      	blt.n	80056da <_printf_float+0x1fa>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	07d8      	lsls	r0, r3, #31
 80056d8:	d50f      	bpl.n	80056fa <_printf_float+0x21a>
 80056da:	4653      	mov	r3, sl
 80056dc:	465a      	mov	r2, fp
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	f43f af49 	beq.w	800557c <_printf_float+0x9c>
 80056ea:	f04f 0800 	mov.w	r8, #0
 80056ee:	f104 091a 	add.w	r9, r4, #26
 80056f2:	9b08      	ldr	r3, [sp, #32]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	4543      	cmp	r3, r8
 80056f8:	dc09      	bgt.n	800570e <_printf_float+0x22e>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	079b      	lsls	r3, r3, #30
 80056fe:	f100 8108 	bmi.w	8005912 <_printf_float+0x432>
 8005702:	68e0      	ldr	r0, [r4, #12]
 8005704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005706:	4298      	cmp	r0, r3
 8005708:	bfb8      	it	lt
 800570a:	4618      	movlt	r0, r3
 800570c:	e738      	b.n	8005580 <_printf_float+0xa0>
 800570e:	2301      	movs	r3, #1
 8005710:	464a      	mov	r2, r9
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f af2f 	beq.w	800557c <_printf_float+0x9c>
 800571e:	f108 0801 	add.w	r8, r8, #1
 8005722:	e7e6      	b.n	80056f2 <_printf_float+0x212>
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	dc3c      	bgt.n	80057a4 <_printf_float+0x2c4>
 800572a:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <_printf_float+0x2c0>)
 800572c:	2301      	movs	r3, #1
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f af21 	beq.w	800557c <_printf_float+0x9c>
 800573a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800573e:	4313      	orrs	r3, r2
 8005740:	d102      	bne.n	8005748 <_printf_float+0x268>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	07d9      	lsls	r1, r3, #31
 8005746:	d5d8      	bpl.n	80056fa <_printf_float+0x21a>
 8005748:	4653      	mov	r3, sl
 800574a:	465a      	mov	r2, fp
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f af12 	beq.w	800557c <_printf_float+0x9c>
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	f104 0a1a 	add.w	sl, r4, #26
 8005760:	9b07      	ldr	r3, [sp, #28]
 8005762:	425b      	negs	r3, r3
 8005764:	454b      	cmp	r3, r9
 8005766:	dc01      	bgt.n	800576c <_printf_float+0x28c>
 8005768:	9b08      	ldr	r3, [sp, #32]
 800576a:	e795      	b.n	8005698 <_printf_float+0x1b8>
 800576c:	2301      	movs	r3, #1
 800576e:	4652      	mov	r2, sl
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f af00 	beq.w	800557c <_printf_float+0x9c>
 800577c:	f109 0901 	add.w	r9, r9, #1
 8005780:	e7ee      	b.n	8005760 <_printf_float+0x280>
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	ffffffff 	.word	0xffffffff
 800578c:	7fefffff 	.word	0x7fefffff
 8005790:	080085bc 	.word	0x080085bc
 8005794:	080085c0 	.word	0x080085c0
 8005798:	080085c8 	.word	0x080085c8
 800579c:	080085c4 	.word	0x080085c4
 80057a0:	080085cc 	.word	0x080085cc
 80057a4:	9a08      	ldr	r2, [sp, #32]
 80057a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057a8:	429a      	cmp	r2, r3
 80057aa:	bfa8      	it	ge
 80057ac:	461a      	movge	r2, r3
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	4691      	mov	r9, r2
 80057b2:	dc38      	bgt.n	8005826 <_printf_float+0x346>
 80057b4:	2300      	movs	r3, #0
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057bc:	f104 021a 	add.w	r2, r4, #26
 80057c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057c2:	9905      	ldr	r1, [sp, #20]
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	eba3 0309 	sub.w	r3, r3, r9
 80057ca:	428b      	cmp	r3, r1
 80057cc:	dc33      	bgt.n	8005836 <_printf_float+0x356>
 80057ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	db3c      	blt.n	8005850 <_printf_float+0x370>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	07da      	lsls	r2, r3, #31
 80057da:	d439      	bmi.n	8005850 <_printf_float+0x370>
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	9a04      	ldr	r2, [sp, #16]
 80057e0:	9907      	ldr	r1, [sp, #28]
 80057e2:	1a9a      	subs	r2, r3, r2
 80057e4:	eba3 0901 	sub.w	r9, r3, r1
 80057e8:	4591      	cmp	r9, r2
 80057ea:	bfa8      	it	ge
 80057ec:	4691      	movge	r9, r2
 80057ee:	f1b9 0f00 	cmp.w	r9, #0
 80057f2:	dc35      	bgt.n	8005860 <_printf_float+0x380>
 80057f4:	f04f 0800 	mov.w	r8, #0
 80057f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057fc:	f104 0a1a 	add.w	sl, r4, #26
 8005800:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	eba3 0309 	sub.w	r3, r3, r9
 800580a:	4543      	cmp	r3, r8
 800580c:	f77f af75 	ble.w	80056fa <_printf_float+0x21a>
 8005810:	2301      	movs	r3, #1
 8005812:	4652      	mov	r2, sl
 8005814:	4631      	mov	r1, r6
 8005816:	4628      	mov	r0, r5
 8005818:	47b8      	blx	r7
 800581a:	3001      	adds	r0, #1
 800581c:	f43f aeae 	beq.w	800557c <_printf_float+0x9c>
 8005820:	f108 0801 	add.w	r8, r8, #1
 8005824:	e7ec      	b.n	8005800 <_printf_float+0x320>
 8005826:	4613      	mov	r3, r2
 8005828:	4631      	mov	r1, r6
 800582a:	4642      	mov	r2, r8
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	d1bf      	bne.n	80057b4 <_printf_float+0x2d4>
 8005834:	e6a2      	b.n	800557c <_printf_float+0x9c>
 8005836:	2301      	movs	r3, #1
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	9204      	str	r2, [sp, #16]
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f ae9b 	beq.w	800557c <_printf_float+0x9c>
 8005846:	9b05      	ldr	r3, [sp, #20]
 8005848:	9a04      	ldr	r2, [sp, #16]
 800584a:	3301      	adds	r3, #1
 800584c:	9305      	str	r3, [sp, #20]
 800584e:	e7b7      	b.n	80057c0 <_printf_float+0x2e0>
 8005850:	4653      	mov	r3, sl
 8005852:	465a      	mov	r2, fp
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	d1be      	bne.n	80057dc <_printf_float+0x2fc>
 800585e:	e68d      	b.n	800557c <_printf_float+0x9c>
 8005860:	9a04      	ldr	r2, [sp, #16]
 8005862:	464b      	mov	r3, r9
 8005864:	4442      	add	r2, r8
 8005866:	4631      	mov	r1, r6
 8005868:	4628      	mov	r0, r5
 800586a:	47b8      	blx	r7
 800586c:	3001      	adds	r0, #1
 800586e:	d1c1      	bne.n	80057f4 <_printf_float+0x314>
 8005870:	e684      	b.n	800557c <_printf_float+0x9c>
 8005872:	9a08      	ldr	r2, [sp, #32]
 8005874:	2a01      	cmp	r2, #1
 8005876:	dc01      	bgt.n	800587c <_printf_float+0x39c>
 8005878:	07db      	lsls	r3, r3, #31
 800587a:	d537      	bpl.n	80058ec <_printf_float+0x40c>
 800587c:	2301      	movs	r3, #1
 800587e:	4642      	mov	r2, r8
 8005880:	4631      	mov	r1, r6
 8005882:	4628      	mov	r0, r5
 8005884:	47b8      	blx	r7
 8005886:	3001      	adds	r0, #1
 8005888:	f43f ae78 	beq.w	800557c <_printf_float+0x9c>
 800588c:	4653      	mov	r3, sl
 800588e:	465a      	mov	r2, fp
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f ae70 	beq.w	800557c <_printf_float+0x9c>
 800589c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80058a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80058a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a8:	d01b      	beq.n	80058e2 <_printf_float+0x402>
 80058aa:	9b08      	ldr	r3, [sp, #32]
 80058ac:	f108 0201 	add.w	r2, r8, #1
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4631      	mov	r1, r6
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b8      	blx	r7
 80058b8:	3001      	adds	r0, #1
 80058ba:	d10e      	bne.n	80058da <_printf_float+0x3fa>
 80058bc:	e65e      	b.n	800557c <_printf_float+0x9c>
 80058be:	2301      	movs	r3, #1
 80058c0:	464a      	mov	r2, r9
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	f43f ae57 	beq.w	800557c <_printf_float+0x9c>
 80058ce:	f108 0801 	add.w	r8, r8, #1
 80058d2:	9b08      	ldr	r3, [sp, #32]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	4543      	cmp	r3, r8
 80058d8:	dcf1      	bgt.n	80058be <_printf_float+0x3de>
 80058da:	9b04      	ldr	r3, [sp, #16]
 80058dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058e0:	e6db      	b.n	800569a <_printf_float+0x1ba>
 80058e2:	f04f 0800 	mov.w	r8, #0
 80058e6:	f104 091a 	add.w	r9, r4, #26
 80058ea:	e7f2      	b.n	80058d2 <_printf_float+0x3f2>
 80058ec:	2301      	movs	r3, #1
 80058ee:	4642      	mov	r2, r8
 80058f0:	e7df      	b.n	80058b2 <_printf_float+0x3d2>
 80058f2:	2301      	movs	r3, #1
 80058f4:	464a      	mov	r2, r9
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f ae3d 	beq.w	800557c <_printf_float+0x9c>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	9909      	ldr	r1, [sp, #36]	; 0x24
 800590a:	1a5b      	subs	r3, r3, r1
 800590c:	4543      	cmp	r3, r8
 800590e:	dcf0      	bgt.n	80058f2 <_printf_float+0x412>
 8005910:	e6f7      	b.n	8005702 <_printf_float+0x222>
 8005912:	f04f 0800 	mov.w	r8, #0
 8005916:	f104 0919 	add.w	r9, r4, #25
 800591a:	e7f4      	b.n	8005906 <_printf_float+0x426>

0800591c <_printf_common>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	4616      	mov	r6, r2
 8005922:	4699      	mov	r9, r3
 8005924:	688a      	ldr	r2, [r1, #8]
 8005926:	690b      	ldr	r3, [r1, #16]
 8005928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800592c:	4293      	cmp	r3, r2
 800592e:	bfb8      	it	lt
 8005930:	4613      	movlt	r3, r2
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005938:	4607      	mov	r7, r0
 800593a:	460c      	mov	r4, r1
 800593c:	b10a      	cbz	r2, 8005942 <_printf_common+0x26>
 800593e:	3301      	adds	r3, #1
 8005940:	6033      	str	r3, [r6, #0]
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	0699      	lsls	r1, r3, #26
 8005946:	bf42      	ittt	mi
 8005948:	6833      	ldrmi	r3, [r6, #0]
 800594a:	3302      	addmi	r3, #2
 800594c:	6033      	strmi	r3, [r6, #0]
 800594e:	6825      	ldr	r5, [r4, #0]
 8005950:	f015 0506 	ands.w	r5, r5, #6
 8005954:	d106      	bne.n	8005964 <_printf_common+0x48>
 8005956:	f104 0a19 	add.w	sl, r4, #25
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	6832      	ldr	r2, [r6, #0]
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	42ab      	cmp	r3, r5
 8005962:	dc26      	bgt.n	80059b2 <_printf_common+0x96>
 8005964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005968:	1e13      	subs	r3, r2, #0
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	bf18      	it	ne
 800596e:	2301      	movne	r3, #1
 8005970:	0692      	lsls	r2, r2, #26
 8005972:	d42b      	bmi.n	80059cc <_printf_common+0xb0>
 8005974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005978:	4649      	mov	r1, r9
 800597a:	4638      	mov	r0, r7
 800597c:	47c0      	blx	r8
 800597e:	3001      	adds	r0, #1
 8005980:	d01e      	beq.n	80059c0 <_printf_common+0xa4>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	68e5      	ldr	r5, [r4, #12]
 8005986:	6832      	ldr	r2, [r6, #0]
 8005988:	f003 0306 	and.w	r3, r3, #6
 800598c:	2b04      	cmp	r3, #4
 800598e:	bf08      	it	eq
 8005990:	1aad      	subeq	r5, r5, r2
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	6922      	ldr	r2, [r4, #16]
 8005996:	bf0c      	ite	eq
 8005998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800599c:	2500      	movne	r5, #0
 800599e:	4293      	cmp	r3, r2
 80059a0:	bfc4      	itt	gt
 80059a2:	1a9b      	subgt	r3, r3, r2
 80059a4:	18ed      	addgt	r5, r5, r3
 80059a6:	2600      	movs	r6, #0
 80059a8:	341a      	adds	r4, #26
 80059aa:	42b5      	cmp	r5, r6
 80059ac:	d11a      	bne.n	80059e4 <_printf_common+0xc8>
 80059ae:	2000      	movs	r0, #0
 80059b0:	e008      	b.n	80059c4 <_printf_common+0xa8>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4652      	mov	r2, sl
 80059b6:	4649      	mov	r1, r9
 80059b8:	4638      	mov	r0, r7
 80059ba:	47c0      	blx	r8
 80059bc:	3001      	adds	r0, #1
 80059be:	d103      	bne.n	80059c8 <_printf_common+0xac>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c8:	3501      	adds	r5, #1
 80059ca:	e7c6      	b.n	800595a <_printf_common+0x3e>
 80059cc:	18e1      	adds	r1, r4, r3
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	2030      	movs	r0, #48	; 0x30
 80059d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059d6:	4422      	add	r2, r4
 80059d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059e0:	3302      	adds	r3, #2
 80059e2:	e7c7      	b.n	8005974 <_printf_common+0x58>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4622      	mov	r2, r4
 80059e8:	4649      	mov	r1, r9
 80059ea:	4638      	mov	r0, r7
 80059ec:	47c0      	blx	r8
 80059ee:	3001      	adds	r0, #1
 80059f0:	d0e6      	beq.n	80059c0 <_printf_common+0xa4>
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7d9      	b.n	80059aa <_printf_common+0x8e>
	...

080059f8 <_printf_i>:
 80059f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	7e0f      	ldrb	r7, [r1, #24]
 80059fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a00:	2f78      	cmp	r7, #120	; 0x78
 8005a02:	4691      	mov	r9, r2
 8005a04:	4680      	mov	r8, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	469a      	mov	sl, r3
 8005a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a0e:	d807      	bhi.n	8005a20 <_printf_i+0x28>
 8005a10:	2f62      	cmp	r7, #98	; 0x62
 8005a12:	d80a      	bhi.n	8005a2a <_printf_i+0x32>
 8005a14:	2f00      	cmp	r7, #0
 8005a16:	f000 80d8 	beq.w	8005bca <_printf_i+0x1d2>
 8005a1a:	2f58      	cmp	r7, #88	; 0x58
 8005a1c:	f000 80a3 	beq.w	8005b66 <_printf_i+0x16e>
 8005a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a28:	e03a      	b.n	8005aa0 <_printf_i+0xa8>
 8005a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a2e:	2b15      	cmp	r3, #21
 8005a30:	d8f6      	bhi.n	8005a20 <_printf_i+0x28>
 8005a32:	a101      	add	r1, pc, #4	; (adr r1, 8005a38 <_printf_i+0x40>)
 8005a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a38:	08005a91 	.word	0x08005a91
 8005a3c:	08005aa5 	.word	0x08005aa5
 8005a40:	08005a21 	.word	0x08005a21
 8005a44:	08005a21 	.word	0x08005a21
 8005a48:	08005a21 	.word	0x08005a21
 8005a4c:	08005a21 	.word	0x08005a21
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	08005a21 	.word	0x08005a21
 8005a58:	08005a21 	.word	0x08005a21
 8005a5c:	08005a21 	.word	0x08005a21
 8005a60:	08005a21 	.word	0x08005a21
 8005a64:	08005bb1 	.word	0x08005bb1
 8005a68:	08005ad5 	.word	0x08005ad5
 8005a6c:	08005b93 	.word	0x08005b93
 8005a70:	08005a21 	.word	0x08005a21
 8005a74:	08005a21 	.word	0x08005a21
 8005a78:	08005bd3 	.word	0x08005bd3
 8005a7c:	08005a21 	.word	0x08005a21
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005a21 	.word	0x08005a21
 8005a88:	08005a21 	.word	0x08005a21
 8005a8c:	08005b9b 	.word	0x08005b9b
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	602a      	str	r2, [r5, #0]
 8005a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0a3      	b.n	8005bec <_printf_i+0x1f4>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	6829      	ldr	r1, [r5, #0]
 8005aa8:	0606      	lsls	r6, r0, #24
 8005aaa:	f101 0304 	add.w	r3, r1, #4
 8005aae:	d50a      	bpl.n	8005ac6 <_printf_i+0xce>
 8005ab0:	680e      	ldr	r6, [r1, #0]
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	2e00      	cmp	r6, #0
 8005ab6:	da03      	bge.n	8005ac0 <_printf_i+0xc8>
 8005ab8:	232d      	movs	r3, #45	; 0x2d
 8005aba:	4276      	negs	r6, r6
 8005abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac0:	485e      	ldr	r0, [pc, #376]	; (8005c3c <_printf_i+0x244>)
 8005ac2:	230a      	movs	r3, #10
 8005ac4:	e019      	b.n	8005afa <_printf_i+0x102>
 8005ac6:	680e      	ldr	r6, [r1, #0]
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ace:	bf18      	it	ne
 8005ad0:	b236      	sxthne	r6, r6
 8005ad2:	e7ef      	b.n	8005ab4 <_printf_i+0xbc>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	1d19      	adds	r1, r3, #4
 8005ada:	6029      	str	r1, [r5, #0]
 8005adc:	0601      	lsls	r1, r0, #24
 8005ade:	d501      	bpl.n	8005ae4 <_printf_i+0xec>
 8005ae0:	681e      	ldr	r6, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <_printf_i+0xf2>
 8005ae4:	0646      	lsls	r6, r0, #25
 8005ae6:	d5fb      	bpl.n	8005ae0 <_printf_i+0xe8>
 8005ae8:	881e      	ldrh	r6, [r3, #0]
 8005aea:	4854      	ldr	r0, [pc, #336]	; (8005c3c <_printf_i+0x244>)
 8005aec:	2f6f      	cmp	r7, #111	; 0x6f
 8005aee:	bf0c      	ite	eq
 8005af0:	2308      	moveq	r3, #8
 8005af2:	230a      	movne	r3, #10
 8005af4:	2100      	movs	r1, #0
 8005af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005afa:	6865      	ldr	r5, [r4, #4]
 8005afc:	60a5      	str	r5, [r4, #8]
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	bfa2      	ittt	ge
 8005b02:	6821      	ldrge	r1, [r4, #0]
 8005b04:	f021 0104 	bicge.w	r1, r1, #4
 8005b08:	6021      	strge	r1, [r4, #0]
 8005b0a:	b90e      	cbnz	r6, 8005b10 <_printf_i+0x118>
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	d04d      	beq.n	8005bac <_printf_i+0x1b4>
 8005b10:	4615      	mov	r5, r2
 8005b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b16:	fb03 6711 	mls	r7, r3, r1, r6
 8005b1a:	5dc7      	ldrb	r7, [r0, r7]
 8005b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b20:	4637      	mov	r7, r6
 8005b22:	42bb      	cmp	r3, r7
 8005b24:	460e      	mov	r6, r1
 8005b26:	d9f4      	bls.n	8005b12 <_printf_i+0x11a>
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d10b      	bne.n	8005b44 <_printf_i+0x14c>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07de      	lsls	r6, r3, #31
 8005b30:	d508      	bpl.n	8005b44 <_printf_i+0x14c>
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	6861      	ldr	r1, [r4, #4]
 8005b36:	4299      	cmp	r1, r3
 8005b38:	bfde      	ittt	le
 8005b3a:	2330      	movle	r3, #48	; 0x30
 8005b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b44:	1b52      	subs	r2, r2, r5
 8005b46:	6122      	str	r2, [r4, #16]
 8005b48:	f8cd a000 	str.w	sl, [sp]
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	aa03      	add	r2, sp, #12
 8005b50:	4621      	mov	r1, r4
 8005b52:	4640      	mov	r0, r8
 8005b54:	f7ff fee2 	bl	800591c <_printf_common>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d14c      	bne.n	8005bf6 <_printf_i+0x1fe>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	b004      	add	sp, #16
 8005b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b66:	4835      	ldr	r0, [pc, #212]	; (8005c3c <_printf_i+0x244>)
 8005b68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b6c:	6829      	ldr	r1, [r5, #0]
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b74:	6029      	str	r1, [r5, #0]
 8005b76:	061d      	lsls	r5, r3, #24
 8005b78:	d514      	bpl.n	8005ba4 <_printf_i+0x1ac>
 8005b7a:	07df      	lsls	r7, r3, #31
 8005b7c:	bf44      	itt	mi
 8005b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b82:	6023      	strmi	r3, [r4, #0]
 8005b84:	b91e      	cbnz	r6, 8005b8e <_printf_i+0x196>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	f023 0320 	bic.w	r3, r3, #32
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	2310      	movs	r3, #16
 8005b90:	e7b0      	b.n	8005af4 <_printf_i+0xfc>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	f043 0320 	orr.w	r3, r3, #32
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	2378      	movs	r3, #120	; 0x78
 8005b9c:	4828      	ldr	r0, [pc, #160]	; (8005c40 <_printf_i+0x248>)
 8005b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ba2:	e7e3      	b.n	8005b6c <_printf_i+0x174>
 8005ba4:	0659      	lsls	r1, r3, #25
 8005ba6:	bf48      	it	mi
 8005ba8:	b2b6      	uxthmi	r6, r6
 8005baa:	e7e6      	b.n	8005b7a <_printf_i+0x182>
 8005bac:	4615      	mov	r5, r2
 8005bae:	e7bb      	b.n	8005b28 <_printf_i+0x130>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	6826      	ldr	r6, [r4, #0]
 8005bb4:	6961      	ldr	r1, [r4, #20]
 8005bb6:	1d18      	adds	r0, r3, #4
 8005bb8:	6028      	str	r0, [r5, #0]
 8005bba:	0635      	lsls	r5, r6, #24
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	d501      	bpl.n	8005bc4 <_printf_i+0x1cc>
 8005bc0:	6019      	str	r1, [r3, #0]
 8005bc2:	e002      	b.n	8005bca <_printf_i+0x1d2>
 8005bc4:	0670      	lsls	r0, r6, #25
 8005bc6:	d5fb      	bpl.n	8005bc0 <_printf_i+0x1c8>
 8005bc8:	8019      	strh	r1, [r3, #0]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	4615      	mov	r5, r2
 8005bd0:	e7ba      	b.n	8005b48 <_printf_i+0x150>
 8005bd2:	682b      	ldr	r3, [r5, #0]
 8005bd4:	1d1a      	adds	r2, r3, #4
 8005bd6:	602a      	str	r2, [r5, #0]
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	6862      	ldr	r2, [r4, #4]
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4628      	mov	r0, r5
 8005be0:	f7fa fb36 	bl	8000250 <memchr>
 8005be4:	b108      	cbz	r0, 8005bea <_printf_i+0x1f2>
 8005be6:	1b40      	subs	r0, r0, r5
 8005be8:	6060      	str	r0, [r4, #4]
 8005bea:	6863      	ldr	r3, [r4, #4]
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf4:	e7a8      	b.n	8005b48 <_printf_i+0x150>
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	462a      	mov	r2, r5
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	47d0      	blx	sl
 8005c00:	3001      	adds	r0, #1
 8005c02:	d0ab      	beq.n	8005b5c <_printf_i+0x164>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	079b      	lsls	r3, r3, #30
 8005c08:	d413      	bmi.n	8005c32 <_printf_i+0x23a>
 8005c0a:	68e0      	ldr	r0, [r4, #12]
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	4298      	cmp	r0, r3
 8005c10:	bfb8      	it	lt
 8005c12:	4618      	movlt	r0, r3
 8005c14:	e7a4      	b.n	8005b60 <_printf_i+0x168>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4632      	mov	r2, r6
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	47d0      	blx	sl
 8005c20:	3001      	adds	r0, #1
 8005c22:	d09b      	beq.n	8005b5c <_printf_i+0x164>
 8005c24:	3501      	adds	r5, #1
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	9903      	ldr	r1, [sp, #12]
 8005c2a:	1a5b      	subs	r3, r3, r1
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	dcf2      	bgt.n	8005c16 <_printf_i+0x21e>
 8005c30:	e7eb      	b.n	8005c0a <_printf_i+0x212>
 8005c32:	2500      	movs	r5, #0
 8005c34:	f104 0619 	add.w	r6, r4, #25
 8005c38:	e7f5      	b.n	8005c26 <_printf_i+0x22e>
 8005c3a:	bf00      	nop
 8005c3c:	080085ce 	.word	0x080085ce
 8005c40:	080085df 	.word	0x080085df

08005c44 <_sbrk_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d06      	ldr	r5, [pc, #24]	; (8005c60 <_sbrk_r+0x1c>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fa fea2 	bl	8000998 <_sbrk>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_sbrk_r+0x1a>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_sbrk_r+0x1a>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	200009e0 	.word	0x200009e0

08005c64 <siprintf>:
 8005c64:	b40e      	push	{r1, r2, r3}
 8005c66:	b500      	push	{lr}
 8005c68:	b09c      	sub	sp, #112	; 0x70
 8005c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c6c:	9002      	str	r0, [sp, #8]
 8005c6e:	9006      	str	r0, [sp, #24]
 8005c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c74:	4809      	ldr	r0, [pc, #36]	; (8005c9c <siprintf+0x38>)
 8005c76:	9107      	str	r1, [sp, #28]
 8005c78:	9104      	str	r1, [sp, #16]
 8005c7a:	4909      	ldr	r1, [pc, #36]	; (8005ca0 <siprintf+0x3c>)
 8005c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c80:	9105      	str	r1, [sp, #20]
 8005c82:	6800      	ldr	r0, [r0, #0]
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	a902      	add	r1, sp, #8
 8005c88:	f001 fa44 	bl	8007114 <_svfiprintf_r>
 8005c8c:	9b02      	ldr	r3, [sp, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	b01c      	add	sp, #112	; 0x70
 8005c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c98:	b003      	add	sp, #12
 8005c9a:	4770      	bx	lr
 8005c9c:	200006a0 	.word	0x200006a0
 8005ca0:	ffff0208 	.word	0xffff0208

08005ca4 <strcpy>:
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005caa:	f803 2b01 	strb.w	r2, [r3], #1
 8005cae:	2a00      	cmp	r2, #0
 8005cb0:	d1f9      	bne.n	8005ca6 <strcpy+0x2>
 8005cb2:	4770      	bx	lr

08005cb4 <quorem>:
 8005cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	6903      	ldr	r3, [r0, #16]
 8005cba:	690c      	ldr	r4, [r1, #16]
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	f2c0 8081 	blt.w	8005dc6 <quorem+0x112>
 8005cc4:	3c01      	subs	r4, #1
 8005cc6:	f101 0814 	add.w	r8, r1, #20
 8005cca:	f100 0514 	add.w	r5, r0, #20
 8005cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cec:	d331      	bcc.n	8005d52 <quorem+0x9e>
 8005cee:	f04f 0e00 	mov.w	lr, #0
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	46ac      	mov	ip, r5
 8005cf6:	46f2      	mov	sl, lr
 8005cf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cfc:	b293      	uxth	r3, r2
 8005cfe:	fb06 e303 	mla	r3, r6, r3, lr
 8005d02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ebaa 0303 	sub.w	r3, sl, r3
 8005d0c:	f8dc a000 	ldr.w	sl, [ip]
 8005d10:	0c12      	lsrs	r2, r2, #16
 8005d12:	fa13 f38a 	uxtah	r3, r3, sl
 8005d16:	fb06 e202 	mla	r2, r6, r2, lr
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	9b00      	ldr	r3, [sp, #0]
 8005d1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d22:	b292      	uxth	r2, r2
 8005d24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d30:	4581      	cmp	r9, r0
 8005d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d36:	f84c 3b04 	str.w	r3, [ip], #4
 8005d3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d3e:	d2db      	bcs.n	8005cf8 <quorem+0x44>
 8005d40:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d44:	b92b      	cbnz	r3, 8005d52 <quorem+0x9e>
 8005d46:	9b01      	ldr	r3, [sp, #4]
 8005d48:	3b04      	subs	r3, #4
 8005d4a:	429d      	cmp	r5, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	d32e      	bcc.n	8005dae <quorem+0xfa>
 8005d50:	613c      	str	r4, [r7, #16]
 8005d52:	4638      	mov	r0, r7
 8005d54:	f001 f83c 	bl	8006dd0 <__mcmp>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	db24      	blt.n	8005da6 <quorem+0xf2>
 8005d5c:	3601      	adds	r6, #1
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f04f 0c00 	mov.w	ip, #0
 8005d64:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d68:	f8d0 e000 	ldr.w	lr, [r0]
 8005d6c:	b293      	uxth	r3, r2
 8005d6e:	ebac 0303 	sub.w	r3, ip, r3
 8005d72:	0c12      	lsrs	r2, r2, #16
 8005d74:	fa13 f38e 	uxtah	r3, r3, lr
 8005d78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d86:	45c1      	cmp	r9, r8
 8005d88:	f840 3b04 	str.w	r3, [r0], #4
 8005d8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d90:	d2e8      	bcs.n	8005d64 <quorem+0xb0>
 8005d92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d9a:	b922      	cbnz	r2, 8005da6 <quorem+0xf2>
 8005d9c:	3b04      	subs	r3, #4
 8005d9e:	429d      	cmp	r5, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	d30a      	bcc.n	8005dba <quorem+0x106>
 8005da4:	613c      	str	r4, [r7, #16]
 8005da6:	4630      	mov	r0, r6
 8005da8:	b003      	add	sp, #12
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	d1cc      	bne.n	8005d50 <quorem+0x9c>
 8005db6:	3c01      	subs	r4, #1
 8005db8:	e7c7      	b.n	8005d4a <quorem+0x96>
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	3b04      	subs	r3, #4
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	d1f0      	bne.n	8005da4 <quorem+0xf0>
 8005dc2:	3c01      	subs	r4, #1
 8005dc4:	e7eb      	b.n	8005d9e <quorem+0xea>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	e7ee      	b.n	8005da8 <quorem+0xf4>
 8005dca:	0000      	movs	r0, r0
 8005dcc:	0000      	movs	r0, r0
	...

08005dd0 <_dtoa_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	ed2d 8b02 	vpush	{d8}
 8005dd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dda:	b091      	sub	sp, #68	; 0x44
 8005ddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005de0:	ec59 8b10 	vmov	r8, r9, d0
 8005de4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005de6:	9106      	str	r1, [sp, #24]
 8005de8:	4606      	mov	r6, r0
 8005dea:	9208      	str	r2, [sp, #32]
 8005dec:	930c      	str	r3, [sp, #48]	; 0x30
 8005dee:	b975      	cbnz	r5, 8005e0e <_dtoa_r+0x3e>
 8005df0:	2010      	movs	r0, #16
 8005df2:	f7ff f9e7 	bl	80051c4 <malloc>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dfa:	b920      	cbnz	r0, 8005e06 <_dtoa_r+0x36>
 8005dfc:	4baa      	ldr	r3, [pc, #680]	; (80060a8 <_dtoa_r+0x2d8>)
 8005dfe:	21ea      	movs	r1, #234	; 0xea
 8005e00:	48aa      	ldr	r0, [pc, #680]	; (80060ac <_dtoa_r+0x2dc>)
 8005e02:	f001 fa87 	bl	8007314 <__assert_func>
 8005e06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e0a:	6005      	str	r5, [r0, #0]
 8005e0c:	60c5      	str	r5, [r0, #12]
 8005e0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e10:	6819      	ldr	r1, [r3, #0]
 8005e12:	b151      	cbz	r1, 8005e2a <_dtoa_r+0x5a>
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	604a      	str	r2, [r1, #4]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4093      	lsls	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f000 fd94 	bl	800694c <_Bfree>
 8005e24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f1b9 0300 	subs.w	r3, r9, #0
 8005e2e:	bfbb      	ittet	lt
 8005e30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	9303      	strlt	r3, [sp, #12]
 8005e36:	2300      	movge	r3, #0
 8005e38:	2201      	movlt	r2, #1
 8005e3a:	bfac      	ite	ge
 8005e3c:	6023      	strge	r3, [r4, #0]
 8005e3e:	6022      	strlt	r2, [r4, #0]
 8005e40:	4b9b      	ldr	r3, [pc, #620]	; (80060b0 <_dtoa_r+0x2e0>)
 8005e42:	9c03      	ldr	r4, [sp, #12]
 8005e44:	43a3      	bics	r3, r4
 8005e46:	d11c      	bne.n	8005e82 <_dtoa_r+0xb2>
 8005e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005e54:	ea53 0308 	orrs.w	r3, r3, r8
 8005e58:	f000 84fd 	beq.w	8006856 <_dtoa_r+0xa86>
 8005e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e5e:	b963      	cbnz	r3, 8005e7a <_dtoa_r+0xaa>
 8005e60:	4b94      	ldr	r3, [pc, #592]	; (80060b4 <_dtoa_r+0x2e4>)
 8005e62:	e01f      	b.n	8005ea4 <_dtoa_r+0xd4>
 8005e64:	4b94      	ldr	r3, [pc, #592]	; (80060b8 <_dtoa_r+0x2e8>)
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	9801      	ldr	r0, [sp, #4]
 8005e70:	b011      	add	sp, #68	; 0x44
 8005e72:	ecbd 8b02 	vpop	{d8}
 8005e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7a:	4b8e      	ldr	r3, [pc, #568]	; (80060b4 <_dtoa_r+0x2e4>)
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	3303      	adds	r3, #3
 8005e80:	e7f3      	b.n	8005e6a <_dtoa_r+0x9a>
 8005e82:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005e86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8e:	d10b      	bne.n	8005ea8 <_dtoa_r+0xd8>
 8005e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e92:	2301      	movs	r3, #1
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 84d9 	beq.w	8006850 <_dtoa_r+0xa80>
 8005e9e:	4887      	ldr	r0, [pc, #540]	; (80060bc <_dtoa_r+0x2ec>)
 8005ea0:	6018      	str	r0, [r3, #0]
 8005ea2:	1e43      	subs	r3, r0, #1
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	e7e2      	b.n	8005e6e <_dtoa_r+0x9e>
 8005ea8:	a90f      	add	r1, sp, #60	; 0x3c
 8005eaa:	aa0e      	add	r2, sp, #56	; 0x38
 8005eac:	4630      	mov	r0, r6
 8005eae:	eeb0 0b48 	vmov.f64	d0, d8
 8005eb2:	f001 f833 	bl	8006f1c <__d2b>
 8005eb6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005eba:	4605      	mov	r5, r0
 8005ebc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d046      	beq.n	8005f50 <_dtoa_r+0x180>
 8005ec2:	ee18 4a90 	vmov	r4, s17
 8005ec6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005eca:	ec53 2b18 	vmov	r2, r3, d8
 8005ece:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005ed2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ed6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005eda:	2400      	movs	r4, #0
 8005edc:	ec43 2b16 	vmov	d6, r2, r3
 8005ee0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005ee4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006090 <_dtoa_r+0x2c0>
 8005ee8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005eec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006098 <_dtoa_r+0x2c8>
 8005ef0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005ef4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80060a0 <_dtoa_r+0x2d0>
 8005ef8:	ee07 1a90 	vmov	s15, r1
 8005efc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005f00:	eeb0 7b46 	vmov.f64	d7, d6
 8005f04:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005f08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005f0c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	ee16 ba90 	vmov	fp, s13
 8005f18:	940a      	str	r4, [sp, #40]	; 0x28
 8005f1a:	d508      	bpl.n	8005f2e <_dtoa_r+0x15e>
 8005f1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005f20:	eeb4 6b47 	vcmp.f64	d6, d7
 8005f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f28:	bf18      	it	ne
 8005f2a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005f2e:	f1bb 0f16 	cmp.w	fp, #22
 8005f32:	d82f      	bhi.n	8005f94 <_dtoa_r+0x1c4>
 8005f34:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <_dtoa_r+0x2f0>)
 8005f36:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f3a:	ed93 7b00 	vldr	d7, [r3]
 8005f3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f46:	d501      	bpl.n	8005f4c <_dtoa_r+0x17c>
 8005f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e022      	b.n	8005f96 <_dtoa_r+0x1c6>
 8005f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f52:	4401      	add	r1, r0
 8005f54:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	bfc1      	itttt	gt
 8005f5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f60:	fa04 f303 	lslgt.w	r3, r4, r3
 8005f64:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005f68:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005f6c:	bfd6      	itet	le
 8005f6e:	f1c3 0320 	rsble	r3, r3, #32
 8005f72:	ea43 0808 	orrgt.w	r8, r3, r8
 8005f76:	fa08 f803 	lslle.w	r8, r8, r3
 8005f7a:	ee07 8a90 	vmov	s15, r8
 8005f7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f82:	3901      	subs	r1, #1
 8005f84:	ee17 4a90 	vmov	r4, s15
 8005f88:	ec53 2b17 	vmov	r2, r3, d7
 8005f8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005f90:	2401      	movs	r4, #1
 8005f92:	e7a3      	b.n	8005edc <_dtoa_r+0x10c>
 8005f94:	2301      	movs	r3, #1
 8005f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f98:	1a43      	subs	r3, r0, r1
 8005f9a:	1e5a      	subs	r2, r3, #1
 8005f9c:	bf45      	ittet	mi
 8005f9e:	f1c3 0301 	rsbmi	r3, r3, #1
 8005fa2:	9304      	strmi	r3, [sp, #16]
 8005fa4:	2300      	movpl	r3, #0
 8005fa6:	2300      	movmi	r3, #0
 8005fa8:	9205      	str	r2, [sp, #20]
 8005faa:	bf54      	ite	pl
 8005fac:	9304      	strpl	r3, [sp, #16]
 8005fae:	9305      	strmi	r3, [sp, #20]
 8005fb0:	f1bb 0f00 	cmp.w	fp, #0
 8005fb4:	db18      	blt.n	8005fe8 <_dtoa_r+0x218>
 8005fb6:	9b05      	ldr	r3, [sp, #20]
 8005fb8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005fbc:	445b      	add	r3, fp
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9a06      	ldr	r2, [sp, #24]
 8005fc4:	2a09      	cmp	r2, #9
 8005fc6:	d849      	bhi.n	800605c <_dtoa_r+0x28c>
 8005fc8:	2a05      	cmp	r2, #5
 8005fca:	bfc4      	itt	gt
 8005fcc:	3a04      	subgt	r2, #4
 8005fce:	9206      	strgt	r2, [sp, #24]
 8005fd0:	9a06      	ldr	r2, [sp, #24]
 8005fd2:	f1a2 0202 	sub.w	r2, r2, #2
 8005fd6:	bfcc      	ite	gt
 8005fd8:	2400      	movgt	r4, #0
 8005fda:	2401      	movle	r4, #1
 8005fdc:	2a03      	cmp	r2, #3
 8005fde:	d848      	bhi.n	8006072 <_dtoa_r+0x2a2>
 8005fe0:	e8df f002 	tbb	[pc, r2]
 8005fe4:	3a2c2e0b 	.word	0x3a2c2e0b
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	2200      	movs	r2, #0
 8005fec:	eba3 030b 	sub.w	r3, r3, fp
 8005ff0:	9304      	str	r3, [sp, #16]
 8005ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff4:	f1cb 0300 	rsb	r3, fp, #0
 8005ff8:	e7e3      	b.n	8005fc2 <_dtoa_r+0x1f2>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	9207      	str	r2, [sp, #28]
 8005ffe:	9a08      	ldr	r2, [sp, #32]
 8006000:	2a00      	cmp	r2, #0
 8006002:	dc39      	bgt.n	8006078 <_dtoa_r+0x2a8>
 8006004:	f04f 0a01 	mov.w	sl, #1
 8006008:	46d1      	mov	r9, sl
 800600a:	4652      	mov	r2, sl
 800600c:	f8cd a020 	str.w	sl, [sp, #32]
 8006010:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006012:	2100      	movs	r1, #0
 8006014:	6079      	str	r1, [r7, #4]
 8006016:	2004      	movs	r0, #4
 8006018:	f100 0c14 	add.w	ip, r0, #20
 800601c:	4594      	cmp	ip, r2
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	d92f      	bls.n	8006082 <_dtoa_r+0x2b2>
 8006022:	4630      	mov	r0, r6
 8006024:	930d      	str	r3, [sp, #52]	; 0x34
 8006026:	f000 fc51 	bl	80068cc <_Balloc>
 800602a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800602c:	9001      	str	r0, [sp, #4]
 800602e:	4602      	mov	r2, r0
 8006030:	2800      	cmp	r0, #0
 8006032:	d149      	bne.n	80060c8 <_dtoa_r+0x2f8>
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <_dtoa_r+0x2f4>)
 8006036:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800603a:	e6e1      	b.n	8005e00 <_dtoa_r+0x30>
 800603c:	2201      	movs	r2, #1
 800603e:	e7dd      	b.n	8005ffc <_dtoa_r+0x22c>
 8006040:	2200      	movs	r2, #0
 8006042:	9207      	str	r2, [sp, #28]
 8006044:	9a08      	ldr	r2, [sp, #32]
 8006046:	eb0b 0a02 	add.w	sl, fp, r2
 800604a:	f10a 0901 	add.w	r9, sl, #1
 800604e:	464a      	mov	r2, r9
 8006050:	2a01      	cmp	r2, #1
 8006052:	bfb8      	it	lt
 8006054:	2201      	movlt	r2, #1
 8006056:	e7db      	b.n	8006010 <_dtoa_r+0x240>
 8006058:	2201      	movs	r2, #1
 800605a:	e7f2      	b.n	8006042 <_dtoa_r+0x272>
 800605c:	2401      	movs	r4, #1
 800605e:	2200      	movs	r2, #0
 8006060:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006064:	f04f 3aff 	mov.w	sl, #4294967295
 8006068:	2100      	movs	r1, #0
 800606a:	46d1      	mov	r9, sl
 800606c:	2212      	movs	r2, #18
 800606e:	9108      	str	r1, [sp, #32]
 8006070:	e7ce      	b.n	8006010 <_dtoa_r+0x240>
 8006072:	2201      	movs	r2, #1
 8006074:	9207      	str	r2, [sp, #28]
 8006076:	e7f5      	b.n	8006064 <_dtoa_r+0x294>
 8006078:	f8dd a020 	ldr.w	sl, [sp, #32]
 800607c:	46d1      	mov	r9, sl
 800607e:	4652      	mov	r2, sl
 8006080:	e7c6      	b.n	8006010 <_dtoa_r+0x240>
 8006082:	3101      	adds	r1, #1
 8006084:	6079      	str	r1, [r7, #4]
 8006086:	0040      	lsls	r0, r0, #1
 8006088:	e7c6      	b.n	8006018 <_dtoa_r+0x248>
 800608a:	bf00      	nop
 800608c:	f3af 8000 	nop.w
 8006090:	636f4361 	.word	0x636f4361
 8006094:	3fd287a7 	.word	0x3fd287a7
 8006098:	8b60c8b3 	.word	0x8b60c8b3
 800609c:	3fc68a28 	.word	0x3fc68a28
 80060a0:	509f79fb 	.word	0x509f79fb
 80060a4:	3fd34413 	.word	0x3fd34413
 80060a8:	080085fd 	.word	0x080085fd
 80060ac:	08008614 	.word	0x08008614
 80060b0:	7ff00000 	.word	0x7ff00000
 80060b4:	080085f9 	.word	0x080085f9
 80060b8:	080085f0 	.word	0x080085f0
 80060bc:	080085cd 	.word	0x080085cd
 80060c0:	08008708 	.word	0x08008708
 80060c4:	0800866f 	.word	0x0800866f
 80060c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80060ca:	9901      	ldr	r1, [sp, #4]
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	f1b9 0f0e 	cmp.w	r9, #14
 80060d2:	d86c      	bhi.n	80061ae <_dtoa_r+0x3de>
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	d06a      	beq.n	80061ae <_dtoa_r+0x3de>
 80060d8:	f1bb 0f00 	cmp.w	fp, #0
 80060dc:	f340 80a0 	ble.w	8006220 <_dtoa_r+0x450>
 80060e0:	49c1      	ldr	r1, [pc, #772]	; (80063e8 <_dtoa_r+0x618>)
 80060e2:	f00b 020f 	and.w	r2, fp, #15
 80060e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80060ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060ee:	ed92 7b00 	vldr	d7, [r2]
 80060f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80060f6:	f000 8087 	beq.w	8006208 <_dtoa_r+0x438>
 80060fa:	4abc      	ldr	r2, [pc, #752]	; (80063ec <_dtoa_r+0x61c>)
 80060fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8006100:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006104:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006108:	f001 010f 	and.w	r1, r1, #15
 800610c:	2203      	movs	r2, #3
 800610e:	48b7      	ldr	r0, [pc, #732]	; (80063ec <_dtoa_r+0x61c>)
 8006110:	2900      	cmp	r1, #0
 8006112:	d17b      	bne.n	800620c <_dtoa_r+0x43c>
 8006114:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006118:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800611c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006122:	2900      	cmp	r1, #0
 8006124:	f000 80a2 	beq.w	800626c <_dtoa_r+0x49c>
 8006128:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800612c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006130:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006138:	f140 8098 	bpl.w	800626c <_dtoa_r+0x49c>
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	f000 8094 	beq.w	800626c <_dtoa_r+0x49c>
 8006144:	f1ba 0f00 	cmp.w	sl, #0
 8006148:	dd2f      	ble.n	80061aa <_dtoa_r+0x3da>
 800614a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800614e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006152:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006156:	f10b 37ff 	add.w	r7, fp, #4294967295
 800615a:	3201      	adds	r2, #1
 800615c:	4650      	mov	r0, sl
 800615e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006162:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006166:	ee07 2a90 	vmov	s15, r2
 800616a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800616e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006172:	ee15 4a90 	vmov	r4, s11
 8006176:	ec52 1b15 	vmov	r1, r2, d5
 800617a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800617e:	2800      	cmp	r0, #0
 8006180:	d177      	bne.n	8006272 <_dtoa_r+0x4a2>
 8006182:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006186:	ee36 6b47 	vsub.f64	d6, d6, d7
 800618a:	ec42 1b17 	vmov	d7, r1, r2
 800618e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	f300 8263 	bgt.w	8006660 <_dtoa_r+0x890>
 800619a:	eeb1 7b47 	vneg.f64	d7, d7
 800619e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a6:	f100 8258 	bmi.w	800665a <_dtoa_r+0x88a>
 80061aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80061ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061b0:	2a00      	cmp	r2, #0
 80061b2:	f2c0 811d 	blt.w	80063f0 <_dtoa_r+0x620>
 80061b6:	f1bb 0f0e 	cmp.w	fp, #14
 80061ba:	f300 8119 	bgt.w	80063f0 <_dtoa_r+0x620>
 80061be:	4b8a      	ldr	r3, [pc, #552]	; (80063e8 <_dtoa_r+0x618>)
 80061c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061c4:	ed93 6b00 	vldr	d6, [r3]
 80061c8:	9b08      	ldr	r3, [sp, #32]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f280 80b7 	bge.w	800633e <_dtoa_r+0x56e>
 80061d0:	f1b9 0f00 	cmp.w	r9, #0
 80061d4:	f300 80b3 	bgt.w	800633e <_dtoa_r+0x56e>
 80061d8:	f040 823f 	bne.w	800665a <_dtoa_r+0x88a>
 80061dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80061e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	464c      	mov	r4, r9
 80061f2:	464f      	mov	r7, r9
 80061f4:	f280 8215 	bge.w	8006622 <_dtoa_r+0x852>
 80061f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061fc:	2331      	movs	r3, #49	; 0x31
 80061fe:	f808 3b01 	strb.w	r3, [r8], #1
 8006202:	f10b 0b01 	add.w	fp, fp, #1
 8006206:	e211      	b.n	800662c <_dtoa_r+0x85c>
 8006208:	2202      	movs	r2, #2
 800620a:	e780      	b.n	800610e <_dtoa_r+0x33e>
 800620c:	07cc      	lsls	r4, r1, #31
 800620e:	d504      	bpl.n	800621a <_dtoa_r+0x44a>
 8006210:	ed90 6b00 	vldr	d6, [r0]
 8006214:	3201      	adds	r2, #1
 8006216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800621a:	1049      	asrs	r1, r1, #1
 800621c:	3008      	adds	r0, #8
 800621e:	e777      	b.n	8006110 <_dtoa_r+0x340>
 8006220:	d022      	beq.n	8006268 <_dtoa_r+0x498>
 8006222:	f1cb 0100 	rsb	r1, fp, #0
 8006226:	4a70      	ldr	r2, [pc, #448]	; (80063e8 <_dtoa_r+0x618>)
 8006228:	f001 000f 	and.w	r0, r1, #15
 800622c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006230:	ed92 7b00 	vldr	d7, [r2]
 8006234:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006238:	ed8d 7b02 	vstr	d7, [sp, #8]
 800623c:	486b      	ldr	r0, [pc, #428]	; (80063ec <_dtoa_r+0x61c>)
 800623e:	1109      	asrs	r1, r1, #4
 8006240:	2400      	movs	r4, #0
 8006242:	2202      	movs	r2, #2
 8006244:	b929      	cbnz	r1, 8006252 <_dtoa_r+0x482>
 8006246:	2c00      	cmp	r4, #0
 8006248:	f43f af6a 	beq.w	8006120 <_dtoa_r+0x350>
 800624c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006250:	e766      	b.n	8006120 <_dtoa_r+0x350>
 8006252:	07cf      	lsls	r7, r1, #31
 8006254:	d505      	bpl.n	8006262 <_dtoa_r+0x492>
 8006256:	ed90 6b00 	vldr	d6, [r0]
 800625a:	3201      	adds	r2, #1
 800625c:	2401      	movs	r4, #1
 800625e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006262:	1049      	asrs	r1, r1, #1
 8006264:	3008      	adds	r0, #8
 8006266:	e7ed      	b.n	8006244 <_dtoa_r+0x474>
 8006268:	2202      	movs	r2, #2
 800626a:	e759      	b.n	8006120 <_dtoa_r+0x350>
 800626c:	465f      	mov	r7, fp
 800626e:	4648      	mov	r0, r9
 8006270:	e775      	b.n	800615e <_dtoa_r+0x38e>
 8006272:	ec42 1b17 	vmov	d7, r1, r2
 8006276:	4a5c      	ldr	r2, [pc, #368]	; (80063e8 <_dtoa_r+0x618>)
 8006278:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800627c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006280:	9a01      	ldr	r2, [sp, #4]
 8006282:	1814      	adds	r4, r2, r0
 8006284:	9a07      	ldr	r2, [sp, #28]
 8006286:	b352      	cbz	r2, 80062de <_dtoa_r+0x50e>
 8006288:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800628c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006294:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006298:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800629c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80062a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062a4:	ee14 2a90 	vmov	r2, s9
 80062a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80062ac:	3230      	adds	r2, #48	; 0x30
 80062ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80062b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	f808 2b01 	strb.w	r2, [r8], #1
 80062be:	d439      	bmi.n	8006334 <_dtoa_r+0x564>
 80062c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80062c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80062c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062cc:	d472      	bmi.n	80063b4 <_dtoa_r+0x5e4>
 80062ce:	45a0      	cmp	r8, r4
 80062d0:	f43f af6b 	beq.w	80061aa <_dtoa_r+0x3da>
 80062d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80062d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80062dc:	e7e0      	b.n	80062a0 <_dtoa_r+0x4d0>
 80062de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80062e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062e6:	4621      	mov	r1, r4
 80062e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80062ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062f0:	ee14 2a90 	vmov	r2, s9
 80062f4:	3230      	adds	r2, #48	; 0x30
 80062f6:	f808 2b01 	strb.w	r2, [r8], #1
 80062fa:	45a0      	cmp	r8, r4
 80062fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006300:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006304:	d118      	bne.n	8006338 <_dtoa_r+0x568>
 8006306:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800630a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800630e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	dc4d      	bgt.n	80063b4 <_dtoa_r+0x5e4>
 8006318:	ee35 7b47 	vsub.f64	d7, d5, d7
 800631c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	f57f af41 	bpl.w	80061aa <_dtoa_r+0x3da>
 8006328:	4688      	mov	r8, r1
 800632a:	3901      	subs	r1, #1
 800632c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d0f9      	beq.n	8006328 <_dtoa_r+0x558>
 8006334:	46bb      	mov	fp, r7
 8006336:	e02a      	b.n	800638e <_dtoa_r+0x5be>
 8006338:	ee26 6b03 	vmul.f64	d6, d6, d3
 800633c:	e7d6      	b.n	80062ec <_dtoa_r+0x51c>
 800633e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006342:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006346:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800634a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800634e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006352:	ee15 3a10 	vmov	r3, s10
 8006356:	3330      	adds	r3, #48	; 0x30
 8006358:	f808 3b01 	strb.w	r3, [r8], #1
 800635c:	9b01      	ldr	r3, [sp, #4]
 800635e:	eba8 0303 	sub.w	r3, r8, r3
 8006362:	4599      	cmp	r9, r3
 8006364:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006368:	eea3 7b46 	vfms.f64	d7, d3, d6
 800636c:	d133      	bne.n	80063d6 <_dtoa_r+0x606>
 800636e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006372:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	dc1a      	bgt.n	80063b2 <_dtoa_r+0x5e2>
 800637c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d103      	bne.n	800638e <_dtoa_r+0x5be>
 8006386:	ee15 3a10 	vmov	r3, s10
 800638a:	07d9      	lsls	r1, r3, #31
 800638c:	d411      	bmi.n	80063b2 <_dtoa_r+0x5e2>
 800638e:	4629      	mov	r1, r5
 8006390:	4630      	mov	r0, r6
 8006392:	f000 fadb 	bl	800694c <_Bfree>
 8006396:	2300      	movs	r3, #0
 8006398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800639a:	f888 3000 	strb.w	r3, [r8]
 800639e:	f10b 0301 	add.w	r3, fp, #1
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f43f ad61 	beq.w	8005e6e <_dtoa_r+0x9e>
 80063ac:	f8c3 8000 	str.w	r8, [r3]
 80063b0:	e55d      	b.n	8005e6e <_dtoa_r+0x9e>
 80063b2:	465f      	mov	r7, fp
 80063b4:	4643      	mov	r3, r8
 80063b6:	4698      	mov	r8, r3
 80063b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063bc:	2a39      	cmp	r2, #57	; 0x39
 80063be:	d106      	bne.n	80063ce <_dtoa_r+0x5fe>
 80063c0:	9a01      	ldr	r2, [sp, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d1f7      	bne.n	80063b6 <_dtoa_r+0x5e6>
 80063c6:	9901      	ldr	r1, [sp, #4]
 80063c8:	2230      	movs	r2, #48	; 0x30
 80063ca:	3701      	adds	r7, #1
 80063cc:	700a      	strb	r2, [r1, #0]
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	3201      	adds	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	e7ae      	b.n	8006334 <_dtoa_r+0x564>
 80063d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80063da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e2:	d1b2      	bne.n	800634a <_dtoa_r+0x57a>
 80063e4:	e7d3      	b.n	800638e <_dtoa_r+0x5be>
 80063e6:	bf00      	nop
 80063e8:	08008708 	.word	0x08008708
 80063ec:	080086e0 	.word	0x080086e0
 80063f0:	9907      	ldr	r1, [sp, #28]
 80063f2:	2900      	cmp	r1, #0
 80063f4:	f000 80d0 	beq.w	8006598 <_dtoa_r+0x7c8>
 80063f8:	9906      	ldr	r1, [sp, #24]
 80063fa:	2901      	cmp	r1, #1
 80063fc:	f300 80b4 	bgt.w	8006568 <_dtoa_r+0x798>
 8006400:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006402:	2900      	cmp	r1, #0
 8006404:	f000 80ac 	beq.w	8006560 <_dtoa_r+0x790>
 8006408:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800640c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006410:	461c      	mov	r4, r3
 8006412:	930a      	str	r3, [sp, #40]	; 0x28
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	4413      	add	r3, r2
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	9b05      	ldr	r3, [sp, #20]
 800641c:	2101      	movs	r1, #1
 800641e:	4413      	add	r3, r2
 8006420:	4630      	mov	r0, r6
 8006422:	9305      	str	r3, [sp, #20]
 8006424:	f000 fb4a 	bl	8006abc <__i2b>
 8006428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642a:	4607      	mov	r7, r0
 800642c:	f1b8 0f00 	cmp.w	r8, #0
 8006430:	dd0d      	ble.n	800644e <_dtoa_r+0x67e>
 8006432:	9a05      	ldr	r2, [sp, #20]
 8006434:	2a00      	cmp	r2, #0
 8006436:	dd0a      	ble.n	800644e <_dtoa_r+0x67e>
 8006438:	4542      	cmp	r2, r8
 800643a:	9904      	ldr	r1, [sp, #16]
 800643c:	bfa8      	it	ge
 800643e:	4642      	movge	r2, r8
 8006440:	1a89      	subs	r1, r1, r2
 8006442:	9104      	str	r1, [sp, #16]
 8006444:	9905      	ldr	r1, [sp, #20]
 8006446:	eba8 0802 	sub.w	r8, r8, r2
 800644a:	1a8a      	subs	r2, r1, r2
 800644c:	9205      	str	r2, [sp, #20]
 800644e:	b303      	cbz	r3, 8006492 <_dtoa_r+0x6c2>
 8006450:	9a07      	ldr	r2, [sp, #28]
 8006452:	2a00      	cmp	r2, #0
 8006454:	f000 80a5 	beq.w	80065a2 <_dtoa_r+0x7d2>
 8006458:	2c00      	cmp	r4, #0
 800645a:	dd13      	ble.n	8006484 <_dtoa_r+0x6b4>
 800645c:	4639      	mov	r1, r7
 800645e:	4622      	mov	r2, r4
 8006460:	4630      	mov	r0, r6
 8006462:	930d      	str	r3, [sp, #52]	; 0x34
 8006464:	f000 fbea 	bl	8006c3c <__pow5mult>
 8006468:	462a      	mov	r2, r5
 800646a:	4601      	mov	r1, r0
 800646c:	4607      	mov	r7, r0
 800646e:	4630      	mov	r0, r6
 8006470:	f000 fb3a 	bl	8006ae8 <__multiply>
 8006474:	4629      	mov	r1, r5
 8006476:	900a      	str	r0, [sp, #40]	; 0x28
 8006478:	4630      	mov	r0, r6
 800647a:	f000 fa67 	bl	800694c <_Bfree>
 800647e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006482:	4615      	mov	r5, r2
 8006484:	1b1a      	subs	r2, r3, r4
 8006486:	d004      	beq.n	8006492 <_dtoa_r+0x6c2>
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f000 fbd6 	bl	8006c3c <__pow5mult>
 8006490:	4605      	mov	r5, r0
 8006492:	2101      	movs	r1, #1
 8006494:	4630      	mov	r0, r6
 8006496:	f000 fb11 	bl	8006abc <__i2b>
 800649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	f340 8081 	ble.w	80065a6 <_dtoa_r+0x7d6>
 80064a4:	461a      	mov	r2, r3
 80064a6:	4601      	mov	r1, r0
 80064a8:	4630      	mov	r0, r6
 80064aa:	f000 fbc7 	bl	8006c3c <__pow5mult>
 80064ae:	9b06      	ldr	r3, [sp, #24]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	4604      	mov	r4, r0
 80064b4:	dd7a      	ble.n	80065ac <_dtoa_r+0x7dc>
 80064b6:	2300      	movs	r3, #0
 80064b8:	930a      	str	r3, [sp, #40]	; 0x28
 80064ba:	6922      	ldr	r2, [r4, #16]
 80064bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80064c0:	6910      	ldr	r0, [r2, #16]
 80064c2:	f000 faab 	bl	8006a1c <__hi0bits>
 80064c6:	f1c0 0020 	rsb	r0, r0, #32
 80064ca:	9b05      	ldr	r3, [sp, #20]
 80064cc:	4418      	add	r0, r3
 80064ce:	f010 001f 	ands.w	r0, r0, #31
 80064d2:	f000 808c 	beq.w	80065ee <_dtoa_r+0x81e>
 80064d6:	f1c0 0220 	rsb	r2, r0, #32
 80064da:	2a04      	cmp	r2, #4
 80064dc:	f340 8085 	ble.w	80065ea <_dtoa_r+0x81a>
 80064e0:	f1c0 001c 	rsb	r0, r0, #28
 80064e4:	9b04      	ldr	r3, [sp, #16]
 80064e6:	4403      	add	r3, r0
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	9b05      	ldr	r3, [sp, #20]
 80064ec:	4403      	add	r3, r0
 80064ee:	4480      	add	r8, r0
 80064f0:	9305      	str	r3, [sp, #20]
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dd05      	ble.n	8006504 <_dtoa_r+0x734>
 80064f8:	4629      	mov	r1, r5
 80064fa:	461a      	mov	r2, r3
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 fbf7 	bl	8006cf0 <__lshift>
 8006502:	4605      	mov	r5, r0
 8006504:	9b05      	ldr	r3, [sp, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd05      	ble.n	8006516 <_dtoa_r+0x746>
 800650a:	4621      	mov	r1, r4
 800650c:	461a      	mov	r2, r3
 800650e:	4630      	mov	r0, r6
 8006510:	f000 fbee 	bl	8006cf0 <__lshift>
 8006514:	4604      	mov	r4, r0
 8006516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d06a      	beq.n	80065f2 <_dtoa_r+0x822>
 800651c:	4621      	mov	r1, r4
 800651e:	4628      	mov	r0, r5
 8006520:	f000 fc56 	bl	8006dd0 <__mcmp>
 8006524:	2800      	cmp	r0, #0
 8006526:	da64      	bge.n	80065f2 <_dtoa_r+0x822>
 8006528:	2300      	movs	r3, #0
 800652a:	4629      	mov	r1, r5
 800652c:	220a      	movs	r2, #10
 800652e:	4630      	mov	r0, r6
 8006530:	f000 fa2e 	bl	8006990 <__multadd>
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	f10b 3bff 	add.w	fp, fp, #4294967295
 800653a:	4605      	mov	r5, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8191 	beq.w	8006864 <_dtoa_r+0xa94>
 8006542:	4639      	mov	r1, r7
 8006544:	2300      	movs	r3, #0
 8006546:	220a      	movs	r2, #10
 8006548:	4630      	mov	r0, r6
 800654a:	f000 fa21 	bl	8006990 <__multadd>
 800654e:	f1ba 0f00 	cmp.w	sl, #0
 8006552:	4607      	mov	r7, r0
 8006554:	f300 808d 	bgt.w	8006672 <_dtoa_r+0x8a2>
 8006558:	9b06      	ldr	r3, [sp, #24]
 800655a:	2b02      	cmp	r3, #2
 800655c:	dc50      	bgt.n	8006600 <_dtoa_r+0x830>
 800655e:	e088      	b.n	8006672 <_dtoa_r+0x8a2>
 8006560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006562:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006566:	e751      	b.n	800640c <_dtoa_r+0x63c>
 8006568:	f109 34ff 	add.w	r4, r9, #4294967295
 800656c:	42a3      	cmp	r3, r4
 800656e:	bfbf      	itttt	lt
 8006570:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006572:	1ae3      	sublt	r3, r4, r3
 8006574:	18d2      	addlt	r2, r2, r3
 8006576:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006578:	bfb6      	itet	lt
 800657a:	4623      	movlt	r3, r4
 800657c:	1b1c      	subge	r4, r3, r4
 800657e:	2400      	movlt	r4, #0
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	bfb5      	itete	lt
 8006586:	9a04      	ldrlt	r2, [sp, #16]
 8006588:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800658c:	eba2 0809 	sublt.w	r8, r2, r9
 8006590:	464a      	movge	r2, r9
 8006592:	bfb8      	it	lt
 8006594:	2200      	movlt	r2, #0
 8006596:	e73c      	b.n	8006412 <_dtoa_r+0x642>
 8006598:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800659c:	9f07      	ldr	r7, [sp, #28]
 800659e:	461c      	mov	r4, r3
 80065a0:	e744      	b.n	800642c <_dtoa_r+0x65c>
 80065a2:	461a      	mov	r2, r3
 80065a4:	e770      	b.n	8006488 <_dtoa_r+0x6b8>
 80065a6:	9b06      	ldr	r3, [sp, #24]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	dc18      	bgt.n	80065de <_dtoa_r+0x80e>
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	b9b3      	cbnz	r3, 80065de <_dtoa_r+0x80e>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80065b6:	b9a2      	cbnz	r2, 80065e2 <_dtoa_r+0x812>
 80065b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065bc:	0d12      	lsrs	r2, r2, #20
 80065be:	0512      	lsls	r2, r2, #20
 80065c0:	b18a      	cbz	r2, 80065e6 <_dtoa_r+0x816>
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	3301      	adds	r3, #1
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	3301      	adds	r3, #1
 80065cc:	9305      	str	r3, [sp, #20]
 80065ce:	2301      	movs	r3, #1
 80065d0:	930a      	str	r3, [sp, #40]	; 0x28
 80065d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f47f af70 	bne.w	80064ba <_dtoa_r+0x6ea>
 80065da:	2001      	movs	r0, #1
 80065dc:	e775      	b.n	80064ca <_dtoa_r+0x6fa>
 80065de:	2300      	movs	r3, #0
 80065e0:	e7f6      	b.n	80065d0 <_dtoa_r+0x800>
 80065e2:	9b02      	ldr	r3, [sp, #8]
 80065e4:	e7f4      	b.n	80065d0 <_dtoa_r+0x800>
 80065e6:	920a      	str	r2, [sp, #40]	; 0x28
 80065e8:	e7f3      	b.n	80065d2 <_dtoa_r+0x802>
 80065ea:	d082      	beq.n	80064f2 <_dtoa_r+0x722>
 80065ec:	4610      	mov	r0, r2
 80065ee:	301c      	adds	r0, #28
 80065f0:	e778      	b.n	80064e4 <_dtoa_r+0x714>
 80065f2:	f1b9 0f00 	cmp.w	r9, #0
 80065f6:	dc37      	bgt.n	8006668 <_dtoa_r+0x898>
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	dd34      	ble.n	8006668 <_dtoa_r+0x898>
 80065fe:	46ca      	mov	sl, r9
 8006600:	f1ba 0f00 	cmp.w	sl, #0
 8006604:	d10d      	bne.n	8006622 <_dtoa_r+0x852>
 8006606:	4621      	mov	r1, r4
 8006608:	4653      	mov	r3, sl
 800660a:	2205      	movs	r2, #5
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f9bf 	bl	8006990 <__multadd>
 8006612:	4601      	mov	r1, r0
 8006614:	4604      	mov	r4, r0
 8006616:	4628      	mov	r0, r5
 8006618:	f000 fbda 	bl	8006dd0 <__mcmp>
 800661c:	2800      	cmp	r0, #0
 800661e:	f73f adeb 	bgt.w	80061f8 <_dtoa_r+0x428>
 8006622:	9b08      	ldr	r3, [sp, #32]
 8006624:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006628:	ea6f 0b03 	mvn.w	fp, r3
 800662c:	f04f 0900 	mov.w	r9, #0
 8006630:	4621      	mov	r1, r4
 8006632:	4630      	mov	r0, r6
 8006634:	f000 f98a 	bl	800694c <_Bfree>
 8006638:	2f00      	cmp	r7, #0
 800663a:	f43f aea8 	beq.w	800638e <_dtoa_r+0x5be>
 800663e:	f1b9 0f00 	cmp.w	r9, #0
 8006642:	d005      	beq.n	8006650 <_dtoa_r+0x880>
 8006644:	45b9      	cmp	r9, r7
 8006646:	d003      	beq.n	8006650 <_dtoa_r+0x880>
 8006648:	4649      	mov	r1, r9
 800664a:	4630      	mov	r0, r6
 800664c:	f000 f97e 	bl	800694c <_Bfree>
 8006650:	4639      	mov	r1, r7
 8006652:	4630      	mov	r0, r6
 8006654:	f000 f97a 	bl	800694c <_Bfree>
 8006658:	e699      	b.n	800638e <_dtoa_r+0x5be>
 800665a:	2400      	movs	r4, #0
 800665c:	4627      	mov	r7, r4
 800665e:	e7e0      	b.n	8006622 <_dtoa_r+0x852>
 8006660:	46bb      	mov	fp, r7
 8006662:	4604      	mov	r4, r0
 8006664:	4607      	mov	r7, r0
 8006666:	e5c7      	b.n	80061f8 <_dtoa_r+0x428>
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	46ca      	mov	sl, r9
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8100 	beq.w	8006872 <_dtoa_r+0xaa2>
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	dd05      	ble.n	8006684 <_dtoa_r+0x8b4>
 8006678:	4639      	mov	r1, r7
 800667a:	4642      	mov	r2, r8
 800667c:	4630      	mov	r0, r6
 800667e:	f000 fb37 	bl	8006cf0 <__lshift>
 8006682:	4607      	mov	r7, r0
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	2b00      	cmp	r3, #0
 8006688:	d05d      	beq.n	8006746 <_dtoa_r+0x976>
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f91d 	bl	80068cc <_Balloc>
 8006692:	4680      	mov	r8, r0
 8006694:	b928      	cbnz	r0, 80066a2 <_dtoa_r+0x8d2>
 8006696:	4b82      	ldr	r3, [pc, #520]	; (80068a0 <_dtoa_r+0xad0>)
 8006698:	4602      	mov	r2, r0
 800669a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800669e:	f7ff bbaf 	b.w	8005e00 <_dtoa_r+0x30>
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	3202      	adds	r2, #2
 80066a6:	0092      	lsls	r2, r2, #2
 80066a8:	f107 010c 	add.w	r1, r7, #12
 80066ac:	300c      	adds	r0, #12
 80066ae:	f7fe fd91 	bl	80051d4 <memcpy>
 80066b2:	2201      	movs	r2, #1
 80066b4:	4641      	mov	r1, r8
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 fb1a 	bl	8006cf0 <__lshift>
 80066bc:	9b01      	ldr	r3, [sp, #4]
 80066be:	3301      	adds	r3, #1
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	4453      	add	r3, sl
 80066c6:	9308      	str	r3, [sp, #32]
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	46b9      	mov	r9, r7
 80066d0:	9307      	str	r3, [sp, #28]
 80066d2:	4607      	mov	r7, r0
 80066d4:	9b04      	ldr	r3, [sp, #16]
 80066d6:	4621      	mov	r1, r4
 80066d8:	3b01      	subs	r3, #1
 80066da:	4628      	mov	r0, r5
 80066dc:	9302      	str	r3, [sp, #8]
 80066de:	f7ff fae9 	bl	8005cb4 <quorem>
 80066e2:	4603      	mov	r3, r0
 80066e4:	3330      	adds	r3, #48	; 0x30
 80066e6:	9005      	str	r0, [sp, #20]
 80066e8:	4649      	mov	r1, r9
 80066ea:	4628      	mov	r0, r5
 80066ec:	9309      	str	r3, [sp, #36]	; 0x24
 80066ee:	f000 fb6f 	bl	8006dd0 <__mcmp>
 80066f2:	463a      	mov	r2, r7
 80066f4:	4682      	mov	sl, r0
 80066f6:	4621      	mov	r1, r4
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 fb85 	bl	8006e08 <__mdiff>
 80066fe:	68c2      	ldr	r2, [r0, #12]
 8006700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006702:	4680      	mov	r8, r0
 8006704:	bb0a      	cbnz	r2, 800674a <_dtoa_r+0x97a>
 8006706:	4601      	mov	r1, r0
 8006708:	4628      	mov	r0, r5
 800670a:	f000 fb61 	bl	8006dd0 <__mcmp>
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	4602      	mov	r2, r0
 8006712:	4641      	mov	r1, r8
 8006714:	4630      	mov	r0, r6
 8006716:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800671a:	f000 f917 	bl	800694c <_Bfree>
 800671e:	9b06      	ldr	r3, [sp, #24]
 8006720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006722:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006726:	ea43 0102 	orr.w	r1, r3, r2
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	430b      	orrs	r3, r1
 800672e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006730:	d10d      	bne.n	800674e <_dtoa_r+0x97e>
 8006732:	2b39      	cmp	r3, #57	; 0x39
 8006734:	d029      	beq.n	800678a <_dtoa_r+0x9ba>
 8006736:	f1ba 0f00 	cmp.w	sl, #0
 800673a:	dd01      	ble.n	8006740 <_dtoa_r+0x970>
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	3331      	adds	r3, #49	; 0x31
 8006740:	9a02      	ldr	r2, [sp, #8]
 8006742:	7013      	strb	r3, [r2, #0]
 8006744:	e774      	b.n	8006630 <_dtoa_r+0x860>
 8006746:	4638      	mov	r0, r7
 8006748:	e7b8      	b.n	80066bc <_dtoa_r+0x8ec>
 800674a:	2201      	movs	r2, #1
 800674c:	e7e1      	b.n	8006712 <_dtoa_r+0x942>
 800674e:	f1ba 0f00 	cmp.w	sl, #0
 8006752:	db06      	blt.n	8006762 <_dtoa_r+0x992>
 8006754:	9906      	ldr	r1, [sp, #24]
 8006756:	ea41 0a0a 	orr.w	sl, r1, sl
 800675a:	9907      	ldr	r1, [sp, #28]
 800675c:	ea5a 0101 	orrs.w	r1, sl, r1
 8006760:	d120      	bne.n	80067a4 <_dtoa_r+0x9d4>
 8006762:	2a00      	cmp	r2, #0
 8006764:	ddec      	ble.n	8006740 <_dtoa_r+0x970>
 8006766:	4629      	mov	r1, r5
 8006768:	2201      	movs	r2, #1
 800676a:	4630      	mov	r0, r6
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	f000 fabf 	bl	8006cf0 <__lshift>
 8006772:	4621      	mov	r1, r4
 8006774:	4605      	mov	r5, r0
 8006776:	f000 fb2b 	bl	8006dd0 <__mcmp>
 800677a:	2800      	cmp	r0, #0
 800677c:	9b04      	ldr	r3, [sp, #16]
 800677e:	dc02      	bgt.n	8006786 <_dtoa_r+0x9b6>
 8006780:	d1de      	bne.n	8006740 <_dtoa_r+0x970>
 8006782:	07da      	lsls	r2, r3, #31
 8006784:	d5dc      	bpl.n	8006740 <_dtoa_r+0x970>
 8006786:	2b39      	cmp	r3, #57	; 0x39
 8006788:	d1d8      	bne.n	800673c <_dtoa_r+0x96c>
 800678a:	9a02      	ldr	r2, [sp, #8]
 800678c:	2339      	movs	r3, #57	; 0x39
 800678e:	7013      	strb	r3, [r2, #0]
 8006790:	4643      	mov	r3, r8
 8006792:	4698      	mov	r8, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800679a:	2a39      	cmp	r2, #57	; 0x39
 800679c:	d051      	beq.n	8006842 <_dtoa_r+0xa72>
 800679e:	3201      	adds	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e745      	b.n	8006630 <_dtoa_r+0x860>
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	dd03      	ble.n	80067b0 <_dtoa_r+0x9e0>
 80067a8:	2b39      	cmp	r3, #57	; 0x39
 80067aa:	d0ee      	beq.n	800678a <_dtoa_r+0x9ba>
 80067ac:	3301      	adds	r3, #1
 80067ae:	e7c7      	b.n	8006740 <_dtoa_r+0x970>
 80067b0:	9a04      	ldr	r2, [sp, #16]
 80067b2:	9908      	ldr	r1, [sp, #32]
 80067b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067b8:	428a      	cmp	r2, r1
 80067ba:	d02b      	beq.n	8006814 <_dtoa_r+0xa44>
 80067bc:	4629      	mov	r1, r5
 80067be:	2300      	movs	r3, #0
 80067c0:	220a      	movs	r2, #10
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 f8e4 	bl	8006990 <__multadd>
 80067c8:	45b9      	cmp	r9, r7
 80067ca:	4605      	mov	r5, r0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	f04f 020a 	mov.w	r2, #10
 80067d4:	4649      	mov	r1, r9
 80067d6:	4630      	mov	r0, r6
 80067d8:	d107      	bne.n	80067ea <_dtoa_r+0xa1a>
 80067da:	f000 f8d9 	bl	8006990 <__multadd>
 80067de:	4681      	mov	r9, r0
 80067e0:	4607      	mov	r7, r0
 80067e2:	9b04      	ldr	r3, [sp, #16]
 80067e4:	3301      	adds	r3, #1
 80067e6:	9304      	str	r3, [sp, #16]
 80067e8:	e774      	b.n	80066d4 <_dtoa_r+0x904>
 80067ea:	f000 f8d1 	bl	8006990 <__multadd>
 80067ee:	4639      	mov	r1, r7
 80067f0:	4681      	mov	r9, r0
 80067f2:	2300      	movs	r3, #0
 80067f4:	220a      	movs	r2, #10
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 f8ca 	bl	8006990 <__multadd>
 80067fc:	4607      	mov	r7, r0
 80067fe:	e7f0      	b.n	80067e2 <_dtoa_r+0xa12>
 8006800:	f1ba 0f00 	cmp.w	sl, #0
 8006804:	9a01      	ldr	r2, [sp, #4]
 8006806:	bfcc      	ite	gt
 8006808:	46d0      	movgt	r8, sl
 800680a:	f04f 0801 	movle.w	r8, #1
 800680e:	4490      	add	r8, r2
 8006810:	f04f 0900 	mov.w	r9, #0
 8006814:	4629      	mov	r1, r5
 8006816:	2201      	movs	r2, #1
 8006818:	4630      	mov	r0, r6
 800681a:	9302      	str	r3, [sp, #8]
 800681c:	f000 fa68 	bl	8006cf0 <__lshift>
 8006820:	4621      	mov	r1, r4
 8006822:	4605      	mov	r5, r0
 8006824:	f000 fad4 	bl	8006dd0 <__mcmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	dcb1      	bgt.n	8006790 <_dtoa_r+0x9c0>
 800682c:	d102      	bne.n	8006834 <_dtoa_r+0xa64>
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	07db      	lsls	r3, r3, #31
 8006832:	d4ad      	bmi.n	8006790 <_dtoa_r+0x9c0>
 8006834:	4643      	mov	r3, r8
 8006836:	4698      	mov	r8, r3
 8006838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800683c:	2a30      	cmp	r2, #48	; 0x30
 800683e:	d0fa      	beq.n	8006836 <_dtoa_r+0xa66>
 8006840:	e6f6      	b.n	8006630 <_dtoa_r+0x860>
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d1a4      	bne.n	8006792 <_dtoa_r+0x9c2>
 8006848:	f10b 0b01 	add.w	fp, fp, #1
 800684c:	2331      	movs	r3, #49	; 0x31
 800684e:	e778      	b.n	8006742 <_dtoa_r+0x972>
 8006850:	4b14      	ldr	r3, [pc, #80]	; (80068a4 <_dtoa_r+0xad4>)
 8006852:	f7ff bb27 	b.w	8005ea4 <_dtoa_r+0xd4>
 8006856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006858:	2b00      	cmp	r3, #0
 800685a:	f47f ab03 	bne.w	8005e64 <_dtoa_r+0x94>
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <_dtoa_r+0xad8>)
 8006860:	f7ff bb20 	b.w	8005ea4 <_dtoa_r+0xd4>
 8006864:	f1ba 0f00 	cmp.w	sl, #0
 8006868:	dc03      	bgt.n	8006872 <_dtoa_r+0xaa2>
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	2b02      	cmp	r3, #2
 800686e:	f73f aec7 	bgt.w	8006600 <_dtoa_r+0x830>
 8006872:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f7ff fa1b 	bl	8005cb4 <quorem>
 800687e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006882:	f808 3b01 	strb.w	r3, [r8], #1
 8006886:	9a01      	ldr	r2, [sp, #4]
 8006888:	eba8 0202 	sub.w	r2, r8, r2
 800688c:	4592      	cmp	sl, r2
 800688e:	ddb7      	ble.n	8006800 <_dtoa_r+0xa30>
 8006890:	4629      	mov	r1, r5
 8006892:	2300      	movs	r3, #0
 8006894:	220a      	movs	r2, #10
 8006896:	4630      	mov	r0, r6
 8006898:	f000 f87a 	bl	8006990 <__multadd>
 800689c:	4605      	mov	r5, r0
 800689e:	e7ea      	b.n	8006876 <_dtoa_r+0xaa6>
 80068a0:	0800866f 	.word	0x0800866f
 80068a4:	080085cc 	.word	0x080085cc
 80068a8:	080085f0 	.word	0x080085f0

080068ac <_localeconv_r>:
 80068ac:	4800      	ldr	r0, [pc, #0]	; (80068b0 <_localeconv_r+0x4>)
 80068ae:	4770      	bx	lr
 80068b0:	200007f4 	.word	0x200007f4

080068b4 <__malloc_lock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__malloc_lock+0x8>)
 80068b6:	f000 bd5e 	b.w	8007376 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	200009e4 	.word	0x200009e4

080068c0 <__malloc_unlock>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__malloc_unlock+0x8>)
 80068c2:	f000 bd59 	b.w	8007378 <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	200009e4 	.word	0x200009e4

080068cc <_Balloc>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	b976      	cbnz	r6, 80068f4 <_Balloc+0x28>
 80068d6:	2010      	movs	r0, #16
 80068d8:	f7fe fc74 	bl	80051c4 <malloc>
 80068dc:	4602      	mov	r2, r0
 80068de:	6260      	str	r0, [r4, #36]	; 0x24
 80068e0:	b920      	cbnz	r0, 80068ec <_Balloc+0x20>
 80068e2:	4b18      	ldr	r3, [pc, #96]	; (8006944 <_Balloc+0x78>)
 80068e4:	4818      	ldr	r0, [pc, #96]	; (8006948 <_Balloc+0x7c>)
 80068e6:	2166      	movs	r1, #102	; 0x66
 80068e8:	f000 fd14 	bl	8007314 <__assert_func>
 80068ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068f0:	6006      	str	r6, [r0, #0]
 80068f2:	60c6      	str	r6, [r0, #12]
 80068f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068f6:	68f3      	ldr	r3, [r6, #12]
 80068f8:	b183      	cbz	r3, 800691c <_Balloc+0x50>
 80068fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006902:	b9b8      	cbnz	r0, 8006934 <_Balloc+0x68>
 8006904:	2101      	movs	r1, #1
 8006906:	fa01 f605 	lsl.w	r6, r1, r5
 800690a:	1d72      	adds	r2, r6, #5
 800690c:	0092      	lsls	r2, r2, #2
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fb60 	bl	8006fd4 <_calloc_r>
 8006914:	b160      	cbz	r0, 8006930 <_Balloc+0x64>
 8006916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800691a:	e00e      	b.n	800693a <_Balloc+0x6e>
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	2104      	movs	r1, #4
 8006920:	4620      	mov	r0, r4
 8006922:	f000 fb57 	bl	8006fd4 <_calloc_r>
 8006926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006928:	60f0      	str	r0, [r6, #12]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e4      	bne.n	80068fa <_Balloc+0x2e>
 8006930:	2000      	movs	r0, #0
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	6802      	ldr	r2, [r0, #0]
 8006936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800693a:	2300      	movs	r3, #0
 800693c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006940:	e7f7      	b.n	8006932 <_Balloc+0x66>
 8006942:	bf00      	nop
 8006944:	080085fd 	.word	0x080085fd
 8006948:	08008680 	.word	0x08008680

0800694c <_Bfree>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006950:	4605      	mov	r5, r0
 8006952:	460c      	mov	r4, r1
 8006954:	b976      	cbnz	r6, 8006974 <_Bfree+0x28>
 8006956:	2010      	movs	r0, #16
 8006958:	f7fe fc34 	bl	80051c4 <malloc>
 800695c:	4602      	mov	r2, r0
 800695e:	6268      	str	r0, [r5, #36]	; 0x24
 8006960:	b920      	cbnz	r0, 800696c <_Bfree+0x20>
 8006962:	4b09      	ldr	r3, [pc, #36]	; (8006988 <_Bfree+0x3c>)
 8006964:	4809      	ldr	r0, [pc, #36]	; (800698c <_Bfree+0x40>)
 8006966:	218a      	movs	r1, #138	; 0x8a
 8006968:	f000 fcd4 	bl	8007314 <__assert_func>
 800696c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006970:	6006      	str	r6, [r0, #0]
 8006972:	60c6      	str	r6, [r0, #12]
 8006974:	b13c      	cbz	r4, 8006986 <_Bfree+0x3a>
 8006976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006978:	6862      	ldr	r2, [r4, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006980:	6021      	str	r1, [r4, #0]
 8006982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	080085fd 	.word	0x080085fd
 800698c:	08008680 	.word	0x08008680

08006990 <__multadd>:
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	690d      	ldr	r5, [r1, #16]
 8006996:	4607      	mov	r7, r0
 8006998:	460c      	mov	r4, r1
 800699a:	461e      	mov	r6, r3
 800699c:	f101 0c14 	add.w	ip, r1, #20
 80069a0:	2000      	movs	r0, #0
 80069a2:	f8dc 3000 	ldr.w	r3, [ip]
 80069a6:	b299      	uxth	r1, r3
 80069a8:	fb02 6101 	mla	r1, r2, r1, r6
 80069ac:	0c1e      	lsrs	r6, r3, #16
 80069ae:	0c0b      	lsrs	r3, r1, #16
 80069b0:	fb02 3306 	mla	r3, r2, r6, r3
 80069b4:	b289      	uxth	r1, r1
 80069b6:	3001      	adds	r0, #1
 80069b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069bc:	4285      	cmp	r5, r0
 80069be:	f84c 1b04 	str.w	r1, [ip], #4
 80069c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069c6:	dcec      	bgt.n	80069a2 <__multadd+0x12>
 80069c8:	b30e      	cbz	r6, 8006a0e <__multadd+0x7e>
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	42ab      	cmp	r3, r5
 80069ce:	dc19      	bgt.n	8006a04 <__multadd+0x74>
 80069d0:	6861      	ldr	r1, [r4, #4]
 80069d2:	4638      	mov	r0, r7
 80069d4:	3101      	adds	r1, #1
 80069d6:	f7ff ff79 	bl	80068cc <_Balloc>
 80069da:	4680      	mov	r8, r0
 80069dc:	b928      	cbnz	r0, 80069ea <__multadd+0x5a>
 80069de:	4602      	mov	r2, r0
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <__multadd+0x84>)
 80069e2:	480d      	ldr	r0, [pc, #52]	; (8006a18 <__multadd+0x88>)
 80069e4:	21b5      	movs	r1, #181	; 0xb5
 80069e6:	f000 fc95 	bl	8007314 <__assert_func>
 80069ea:	6922      	ldr	r2, [r4, #16]
 80069ec:	3202      	adds	r2, #2
 80069ee:	f104 010c 	add.w	r1, r4, #12
 80069f2:	0092      	lsls	r2, r2, #2
 80069f4:	300c      	adds	r0, #12
 80069f6:	f7fe fbed 	bl	80051d4 <memcpy>
 80069fa:	4621      	mov	r1, r4
 80069fc:	4638      	mov	r0, r7
 80069fe:	f7ff ffa5 	bl	800694c <_Bfree>
 8006a02:	4644      	mov	r4, r8
 8006a04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a08:	3501      	adds	r5, #1
 8006a0a:	615e      	str	r6, [r3, #20]
 8006a0c:	6125      	str	r5, [r4, #16]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a14:	0800866f 	.word	0x0800866f
 8006a18:	08008680 	.word	0x08008680

08006a1c <__hi0bits>:
 8006a1c:	0c03      	lsrs	r3, r0, #16
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	b9d3      	cbnz	r3, 8006a58 <__hi0bits+0x3c>
 8006a22:	0400      	lsls	r0, r0, #16
 8006a24:	2310      	movs	r3, #16
 8006a26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a2a:	bf04      	itt	eq
 8006a2c:	0200      	lsleq	r0, r0, #8
 8006a2e:	3308      	addeq	r3, #8
 8006a30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a34:	bf04      	itt	eq
 8006a36:	0100      	lsleq	r0, r0, #4
 8006a38:	3304      	addeq	r3, #4
 8006a3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a3e:	bf04      	itt	eq
 8006a40:	0080      	lsleq	r0, r0, #2
 8006a42:	3302      	addeq	r3, #2
 8006a44:	2800      	cmp	r0, #0
 8006a46:	db05      	blt.n	8006a54 <__hi0bits+0x38>
 8006a48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a4c:	f103 0301 	add.w	r3, r3, #1
 8006a50:	bf08      	it	eq
 8006a52:	2320      	moveq	r3, #32
 8006a54:	4618      	mov	r0, r3
 8006a56:	4770      	bx	lr
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e7e4      	b.n	8006a26 <__hi0bits+0xa>

08006a5c <__lo0bits>:
 8006a5c:	6803      	ldr	r3, [r0, #0]
 8006a5e:	f013 0207 	ands.w	r2, r3, #7
 8006a62:	4601      	mov	r1, r0
 8006a64:	d00b      	beq.n	8006a7e <__lo0bits+0x22>
 8006a66:	07da      	lsls	r2, r3, #31
 8006a68:	d423      	bmi.n	8006ab2 <__lo0bits+0x56>
 8006a6a:	0798      	lsls	r0, r3, #30
 8006a6c:	bf49      	itett	mi
 8006a6e:	085b      	lsrmi	r3, r3, #1
 8006a70:	089b      	lsrpl	r3, r3, #2
 8006a72:	2001      	movmi	r0, #1
 8006a74:	600b      	strmi	r3, [r1, #0]
 8006a76:	bf5c      	itt	pl
 8006a78:	600b      	strpl	r3, [r1, #0]
 8006a7a:	2002      	movpl	r0, #2
 8006a7c:	4770      	bx	lr
 8006a7e:	b298      	uxth	r0, r3
 8006a80:	b9a8      	cbnz	r0, 8006aae <__lo0bits+0x52>
 8006a82:	0c1b      	lsrs	r3, r3, #16
 8006a84:	2010      	movs	r0, #16
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	b90a      	cbnz	r2, 8006a8e <__lo0bits+0x32>
 8006a8a:	3008      	adds	r0, #8
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	071a      	lsls	r2, r3, #28
 8006a90:	bf04      	itt	eq
 8006a92:	091b      	lsreq	r3, r3, #4
 8006a94:	3004      	addeq	r0, #4
 8006a96:	079a      	lsls	r2, r3, #30
 8006a98:	bf04      	itt	eq
 8006a9a:	089b      	lsreq	r3, r3, #2
 8006a9c:	3002      	addeq	r0, #2
 8006a9e:	07da      	lsls	r2, r3, #31
 8006aa0:	d403      	bmi.n	8006aaa <__lo0bits+0x4e>
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	f100 0001 	add.w	r0, r0, #1
 8006aa8:	d005      	beq.n	8006ab6 <__lo0bits+0x5a>
 8006aaa:	600b      	str	r3, [r1, #0]
 8006aac:	4770      	bx	lr
 8006aae:	4610      	mov	r0, r2
 8006ab0:	e7e9      	b.n	8006a86 <__lo0bits+0x2a>
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	4770      	bx	lr
 8006ab6:	2020      	movs	r0, #32
 8006ab8:	4770      	bx	lr
	...

08006abc <__i2b>:
 8006abc:	b510      	push	{r4, lr}
 8006abe:	460c      	mov	r4, r1
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	f7ff ff03 	bl	80068cc <_Balloc>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <__i2b+0x1a>
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <__i2b+0x24>)
 8006acc:	4805      	ldr	r0, [pc, #20]	; (8006ae4 <__i2b+0x28>)
 8006ace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ad2:	f000 fc1f 	bl	8007314 <__assert_func>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	6144      	str	r4, [r0, #20]
 8006ada:	6103      	str	r3, [r0, #16]
 8006adc:	bd10      	pop	{r4, pc}
 8006ade:	bf00      	nop
 8006ae0:	0800866f 	.word	0x0800866f
 8006ae4:	08008680 	.word	0x08008680

08006ae8 <__multiply>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	4691      	mov	r9, r2
 8006aee:	690a      	ldr	r2, [r1, #16]
 8006af0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	bfb8      	it	lt
 8006af8:	460b      	movlt	r3, r1
 8006afa:	460c      	mov	r4, r1
 8006afc:	bfbc      	itt	lt
 8006afe:	464c      	movlt	r4, r9
 8006b00:	4699      	movlt	r9, r3
 8006b02:	6927      	ldr	r7, [r4, #16]
 8006b04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b08:	68a3      	ldr	r3, [r4, #8]
 8006b0a:	6861      	ldr	r1, [r4, #4]
 8006b0c:	eb07 060a 	add.w	r6, r7, sl
 8006b10:	42b3      	cmp	r3, r6
 8006b12:	b085      	sub	sp, #20
 8006b14:	bfb8      	it	lt
 8006b16:	3101      	addlt	r1, #1
 8006b18:	f7ff fed8 	bl	80068cc <_Balloc>
 8006b1c:	b930      	cbnz	r0, 8006b2c <__multiply+0x44>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	4b44      	ldr	r3, [pc, #272]	; (8006c34 <__multiply+0x14c>)
 8006b22:	4845      	ldr	r0, [pc, #276]	; (8006c38 <__multiply+0x150>)
 8006b24:	f240 115d 	movw	r1, #349	; 0x15d
 8006b28:	f000 fbf4 	bl	8007314 <__assert_func>
 8006b2c:	f100 0514 	add.w	r5, r0, #20
 8006b30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b34:	462b      	mov	r3, r5
 8006b36:	2200      	movs	r2, #0
 8006b38:	4543      	cmp	r3, r8
 8006b3a:	d321      	bcc.n	8006b80 <__multiply+0x98>
 8006b3c:	f104 0314 	add.w	r3, r4, #20
 8006b40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b44:	f109 0314 	add.w	r3, r9, #20
 8006b48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b4c:	9202      	str	r2, [sp, #8]
 8006b4e:	1b3a      	subs	r2, r7, r4
 8006b50:	3a15      	subs	r2, #21
 8006b52:	f022 0203 	bic.w	r2, r2, #3
 8006b56:	3204      	adds	r2, #4
 8006b58:	f104 0115 	add.w	r1, r4, #21
 8006b5c:	428f      	cmp	r7, r1
 8006b5e:	bf38      	it	cc
 8006b60:	2204      	movcc	r2, #4
 8006b62:	9201      	str	r2, [sp, #4]
 8006b64:	9a02      	ldr	r2, [sp, #8]
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d80c      	bhi.n	8006b86 <__multiply+0x9e>
 8006b6c:	2e00      	cmp	r6, #0
 8006b6e:	dd03      	ble.n	8006b78 <__multiply+0x90>
 8006b70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d05a      	beq.n	8006c2e <__multiply+0x146>
 8006b78:	6106      	str	r6, [r0, #16]
 8006b7a:	b005      	add	sp, #20
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	f843 2b04 	str.w	r2, [r3], #4
 8006b84:	e7d8      	b.n	8006b38 <__multiply+0x50>
 8006b86:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b8a:	f1ba 0f00 	cmp.w	sl, #0
 8006b8e:	d024      	beq.n	8006bda <__multiply+0xf2>
 8006b90:	f104 0e14 	add.w	lr, r4, #20
 8006b94:	46a9      	mov	r9, r5
 8006b96:	f04f 0c00 	mov.w	ip, #0
 8006b9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b9e:	f8d9 1000 	ldr.w	r1, [r9]
 8006ba2:	fa1f fb82 	uxth.w	fp, r2
 8006ba6:	b289      	uxth	r1, r1
 8006ba8:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8006bb4:	4461      	add	r1, ip
 8006bb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bba:	fb0a c20b 	mla	r2, sl, fp, ip
 8006bbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bc2:	b289      	uxth	r1, r1
 8006bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bc8:	4577      	cmp	r7, lr
 8006bca:	f849 1b04 	str.w	r1, [r9], #4
 8006bce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bd2:	d8e2      	bhi.n	8006b9a <__multiply+0xb2>
 8006bd4:	9a01      	ldr	r2, [sp, #4]
 8006bd6:	f845 c002 	str.w	ip, [r5, r2]
 8006bda:	9a03      	ldr	r2, [sp, #12]
 8006bdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006be0:	3304      	adds	r3, #4
 8006be2:	f1b9 0f00 	cmp.w	r9, #0
 8006be6:	d020      	beq.n	8006c2a <__multiply+0x142>
 8006be8:	6829      	ldr	r1, [r5, #0]
 8006bea:	f104 0c14 	add.w	ip, r4, #20
 8006bee:	46ae      	mov	lr, r5
 8006bf0:	f04f 0a00 	mov.w	sl, #0
 8006bf4:	f8bc b000 	ldrh.w	fp, [ip]
 8006bf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006bfc:	fb09 220b 	mla	r2, r9, fp, r2
 8006c00:	4492      	add	sl, r2
 8006c02:	b289      	uxth	r1, r1
 8006c04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c08:	f84e 1b04 	str.w	r1, [lr], #4
 8006c0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c10:	f8be 1000 	ldrh.w	r1, [lr]
 8006c14:	0c12      	lsrs	r2, r2, #16
 8006c16:	fb09 1102 	mla	r1, r9, r2, r1
 8006c1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006c1e:	4567      	cmp	r7, ip
 8006c20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c24:	d8e6      	bhi.n	8006bf4 <__multiply+0x10c>
 8006c26:	9a01      	ldr	r2, [sp, #4]
 8006c28:	50a9      	str	r1, [r5, r2]
 8006c2a:	3504      	adds	r5, #4
 8006c2c:	e79a      	b.n	8006b64 <__multiply+0x7c>
 8006c2e:	3e01      	subs	r6, #1
 8006c30:	e79c      	b.n	8006b6c <__multiply+0x84>
 8006c32:	bf00      	nop
 8006c34:	0800866f 	.word	0x0800866f
 8006c38:	08008680 	.word	0x08008680

08006c3c <__pow5mult>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	4615      	mov	r5, r2
 8006c42:	f012 0203 	ands.w	r2, r2, #3
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	d007      	beq.n	8006c5c <__pow5mult+0x20>
 8006c4c:	4c25      	ldr	r4, [pc, #148]	; (8006ce4 <__pow5mult+0xa8>)
 8006c4e:	3a01      	subs	r2, #1
 8006c50:	2300      	movs	r3, #0
 8006c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c56:	f7ff fe9b 	bl	8006990 <__multadd>
 8006c5a:	4607      	mov	r7, r0
 8006c5c:	10ad      	asrs	r5, r5, #2
 8006c5e:	d03d      	beq.n	8006cdc <__pow5mult+0xa0>
 8006c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c62:	b97c      	cbnz	r4, 8006c84 <__pow5mult+0x48>
 8006c64:	2010      	movs	r0, #16
 8006c66:	f7fe faad 	bl	80051c4 <malloc>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c6e:	b928      	cbnz	r0, 8006c7c <__pow5mult+0x40>
 8006c70:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <__pow5mult+0xac>)
 8006c72:	481e      	ldr	r0, [pc, #120]	; (8006cec <__pow5mult+0xb0>)
 8006c74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c78:	f000 fb4c 	bl	8007314 <__assert_func>
 8006c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c80:	6004      	str	r4, [r0, #0]
 8006c82:	60c4      	str	r4, [r0, #12]
 8006c84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c8c:	b94c      	cbnz	r4, 8006ca2 <__pow5mult+0x66>
 8006c8e:	f240 2171 	movw	r1, #625	; 0x271
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7ff ff12 	bl	8006abc <__i2b>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	6003      	str	r3, [r0, #0]
 8006ca2:	f04f 0900 	mov.w	r9, #0
 8006ca6:	07eb      	lsls	r3, r5, #31
 8006ca8:	d50a      	bpl.n	8006cc0 <__pow5mult+0x84>
 8006caa:	4639      	mov	r1, r7
 8006cac:	4622      	mov	r2, r4
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7ff ff1a 	bl	8006ae8 <__multiply>
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff fe47 	bl	800694c <_Bfree>
 8006cbe:	4647      	mov	r7, r8
 8006cc0:	106d      	asrs	r5, r5, #1
 8006cc2:	d00b      	beq.n	8006cdc <__pow5mult+0xa0>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	b938      	cbnz	r0, 8006cd8 <__pow5mult+0x9c>
 8006cc8:	4622      	mov	r2, r4
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff ff0b 	bl	8006ae8 <__multiply>
 8006cd2:	6020      	str	r0, [r4, #0]
 8006cd4:	f8c0 9000 	str.w	r9, [r0]
 8006cd8:	4604      	mov	r4, r0
 8006cda:	e7e4      	b.n	8006ca6 <__pow5mult+0x6a>
 8006cdc:	4638      	mov	r0, r7
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce2:	bf00      	nop
 8006ce4:	080087d0 	.word	0x080087d0
 8006ce8:	080085fd 	.word	0x080085fd
 8006cec:	08008680 	.word	0x08008680

08006cf0 <__lshift>:
 8006cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	6849      	ldr	r1, [r1, #4]
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cfe:	68a3      	ldr	r3, [r4, #8]
 8006d00:	4607      	mov	r7, r0
 8006d02:	4691      	mov	r9, r2
 8006d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d08:	f108 0601 	add.w	r6, r8, #1
 8006d0c:	42b3      	cmp	r3, r6
 8006d0e:	db0b      	blt.n	8006d28 <__lshift+0x38>
 8006d10:	4638      	mov	r0, r7
 8006d12:	f7ff fddb 	bl	80068cc <_Balloc>
 8006d16:	4605      	mov	r5, r0
 8006d18:	b948      	cbnz	r0, 8006d2e <__lshift+0x3e>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	4b2a      	ldr	r3, [pc, #168]	; (8006dc8 <__lshift+0xd8>)
 8006d1e:	482b      	ldr	r0, [pc, #172]	; (8006dcc <__lshift+0xdc>)
 8006d20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d24:	f000 faf6 	bl	8007314 <__assert_func>
 8006d28:	3101      	adds	r1, #1
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	e7ee      	b.n	8006d0c <__lshift+0x1c>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f100 0114 	add.w	r1, r0, #20
 8006d34:	f100 0210 	add.w	r2, r0, #16
 8006d38:	4618      	mov	r0, r3
 8006d3a:	4553      	cmp	r3, sl
 8006d3c:	db37      	blt.n	8006dae <__lshift+0xbe>
 8006d3e:	6920      	ldr	r0, [r4, #16]
 8006d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d44:	f104 0314 	add.w	r3, r4, #20
 8006d48:	f019 091f 	ands.w	r9, r9, #31
 8006d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006d54:	d02f      	beq.n	8006db6 <__lshift+0xc6>
 8006d56:	f1c9 0e20 	rsb	lr, r9, #32
 8006d5a:	468a      	mov	sl, r1
 8006d5c:	f04f 0c00 	mov.w	ip, #0
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	fa02 f209 	lsl.w	r2, r2, r9
 8006d66:	ea42 020c 	orr.w	r2, r2, ip
 8006d6a:	f84a 2b04 	str.w	r2, [sl], #4
 8006d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d72:	4298      	cmp	r0, r3
 8006d74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d78:	d8f2      	bhi.n	8006d60 <__lshift+0x70>
 8006d7a:	1b03      	subs	r3, r0, r4
 8006d7c:	3b15      	subs	r3, #21
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	3304      	adds	r3, #4
 8006d84:	f104 0215 	add.w	r2, r4, #21
 8006d88:	4290      	cmp	r0, r2
 8006d8a:	bf38      	it	cc
 8006d8c:	2304      	movcc	r3, #4
 8006d8e:	f841 c003 	str.w	ip, [r1, r3]
 8006d92:	f1bc 0f00 	cmp.w	ip, #0
 8006d96:	d001      	beq.n	8006d9c <__lshift+0xac>
 8006d98:	f108 0602 	add.w	r6, r8, #2
 8006d9c:	3e01      	subs	r6, #1
 8006d9e:	4638      	mov	r0, r7
 8006da0:	612e      	str	r6, [r5, #16]
 8006da2:	4621      	mov	r1, r4
 8006da4:	f7ff fdd2 	bl	800694c <_Bfree>
 8006da8:	4628      	mov	r0, r5
 8006daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dae:	f842 0f04 	str.w	r0, [r2, #4]!
 8006db2:	3301      	adds	r3, #1
 8006db4:	e7c1      	b.n	8006d3a <__lshift+0x4a>
 8006db6:	3904      	subs	r1, #4
 8006db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006dc0:	4298      	cmp	r0, r3
 8006dc2:	d8f9      	bhi.n	8006db8 <__lshift+0xc8>
 8006dc4:	e7ea      	b.n	8006d9c <__lshift+0xac>
 8006dc6:	bf00      	nop
 8006dc8:	0800866f 	.word	0x0800866f
 8006dcc:	08008680 	.word	0x08008680

08006dd0 <__mcmp>:
 8006dd0:	b530      	push	{r4, r5, lr}
 8006dd2:	6902      	ldr	r2, [r0, #16]
 8006dd4:	690c      	ldr	r4, [r1, #16]
 8006dd6:	1b12      	subs	r2, r2, r4
 8006dd8:	d10e      	bne.n	8006df8 <__mcmp+0x28>
 8006dda:	f100 0314 	add.w	r3, r0, #20
 8006dde:	3114      	adds	r1, #20
 8006de0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006de4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006de8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006dec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006df0:	42a5      	cmp	r5, r4
 8006df2:	d003      	beq.n	8006dfc <__mcmp+0x2c>
 8006df4:	d305      	bcc.n	8006e02 <__mcmp+0x32>
 8006df6:	2201      	movs	r2, #1
 8006df8:	4610      	mov	r0, r2
 8006dfa:	bd30      	pop	{r4, r5, pc}
 8006dfc:	4283      	cmp	r3, r0
 8006dfe:	d3f3      	bcc.n	8006de8 <__mcmp+0x18>
 8006e00:	e7fa      	b.n	8006df8 <__mcmp+0x28>
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295
 8006e06:	e7f7      	b.n	8006df8 <__mcmp+0x28>

08006e08 <__mdiff>:
 8006e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	4606      	mov	r6, r0
 8006e10:	4611      	mov	r1, r2
 8006e12:	4620      	mov	r0, r4
 8006e14:	4690      	mov	r8, r2
 8006e16:	f7ff ffdb 	bl	8006dd0 <__mcmp>
 8006e1a:	1e05      	subs	r5, r0, #0
 8006e1c:	d110      	bne.n	8006e40 <__mdiff+0x38>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff fd53 	bl	80068cc <_Balloc>
 8006e26:	b930      	cbnz	r0, 8006e36 <__mdiff+0x2e>
 8006e28:	4b3a      	ldr	r3, [pc, #232]	; (8006f14 <__mdiff+0x10c>)
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	f240 2132 	movw	r1, #562	; 0x232
 8006e30:	4839      	ldr	r0, [pc, #228]	; (8006f18 <__mdiff+0x110>)
 8006e32:	f000 fa6f 	bl	8007314 <__assert_func>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	bfa4      	itt	ge
 8006e42:	4643      	movge	r3, r8
 8006e44:	46a0      	movge	r8, r4
 8006e46:	4630      	mov	r0, r6
 8006e48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e4c:	bfa6      	itte	ge
 8006e4e:	461c      	movge	r4, r3
 8006e50:	2500      	movge	r5, #0
 8006e52:	2501      	movlt	r5, #1
 8006e54:	f7ff fd3a 	bl	80068cc <_Balloc>
 8006e58:	b920      	cbnz	r0, 8006e64 <__mdiff+0x5c>
 8006e5a:	4b2e      	ldr	r3, [pc, #184]	; (8006f14 <__mdiff+0x10c>)
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e62:	e7e5      	b.n	8006e30 <__mdiff+0x28>
 8006e64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e68:	6926      	ldr	r6, [r4, #16]
 8006e6a:	60c5      	str	r5, [r0, #12]
 8006e6c:	f104 0914 	add.w	r9, r4, #20
 8006e70:	f108 0514 	add.w	r5, r8, #20
 8006e74:	f100 0e14 	add.w	lr, r0, #20
 8006e78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e80:	f108 0210 	add.w	r2, r8, #16
 8006e84:	46f2      	mov	sl, lr
 8006e86:	2100      	movs	r1, #0
 8006e88:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e90:	fa1f f883 	uxth.w	r8, r3
 8006e94:	fa11 f18b 	uxtah	r1, r1, fp
 8006e98:	0c1b      	lsrs	r3, r3, #16
 8006e9a:	eba1 0808 	sub.w	r8, r1, r8
 8006e9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ea2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ea6:	fa1f f888 	uxth.w	r8, r8
 8006eaa:	1419      	asrs	r1, r3, #16
 8006eac:	454e      	cmp	r6, r9
 8006eae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006eb2:	f84a 3b04 	str.w	r3, [sl], #4
 8006eb6:	d8e7      	bhi.n	8006e88 <__mdiff+0x80>
 8006eb8:	1b33      	subs	r3, r6, r4
 8006eba:	3b15      	subs	r3, #21
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	3415      	adds	r4, #21
 8006ec4:	42a6      	cmp	r6, r4
 8006ec6:	bf38      	it	cc
 8006ec8:	2304      	movcc	r3, #4
 8006eca:	441d      	add	r5, r3
 8006ecc:	4473      	add	r3, lr
 8006ece:	469e      	mov	lr, r3
 8006ed0:	462e      	mov	r6, r5
 8006ed2:	4566      	cmp	r6, ip
 8006ed4:	d30e      	bcc.n	8006ef4 <__mdiff+0xec>
 8006ed6:	f10c 0203 	add.w	r2, ip, #3
 8006eda:	1b52      	subs	r2, r2, r5
 8006edc:	f022 0203 	bic.w	r2, r2, #3
 8006ee0:	3d03      	subs	r5, #3
 8006ee2:	45ac      	cmp	ip, r5
 8006ee4:	bf38      	it	cc
 8006ee6:	2200      	movcc	r2, #0
 8006ee8:	441a      	add	r2, r3
 8006eea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006eee:	b17b      	cbz	r3, 8006f10 <__mdiff+0x108>
 8006ef0:	6107      	str	r7, [r0, #16]
 8006ef2:	e7a3      	b.n	8006e3c <__mdiff+0x34>
 8006ef4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ef8:	fa11 f288 	uxtah	r2, r1, r8
 8006efc:	1414      	asrs	r4, r2, #16
 8006efe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f02:	b292      	uxth	r2, r2
 8006f04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f08:	f84e 2b04 	str.w	r2, [lr], #4
 8006f0c:	1421      	asrs	r1, r4, #16
 8006f0e:	e7e0      	b.n	8006ed2 <__mdiff+0xca>
 8006f10:	3f01      	subs	r7, #1
 8006f12:	e7ea      	b.n	8006eea <__mdiff+0xe2>
 8006f14:	0800866f 	.word	0x0800866f
 8006f18:	08008680 	.word	0x08008680

08006f1c <__d2b>:
 8006f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4689      	mov	r9, r1
 8006f22:	2101      	movs	r1, #1
 8006f24:	ec57 6b10 	vmov	r6, r7, d0
 8006f28:	4690      	mov	r8, r2
 8006f2a:	f7ff fccf 	bl	80068cc <_Balloc>
 8006f2e:	4604      	mov	r4, r0
 8006f30:	b930      	cbnz	r0, 8006f40 <__d2b+0x24>
 8006f32:	4602      	mov	r2, r0
 8006f34:	4b25      	ldr	r3, [pc, #148]	; (8006fcc <__d2b+0xb0>)
 8006f36:	4826      	ldr	r0, [pc, #152]	; (8006fd0 <__d2b+0xb4>)
 8006f38:	f240 310a 	movw	r1, #778	; 0x30a
 8006f3c:	f000 f9ea 	bl	8007314 <__assert_func>
 8006f40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f48:	bb35      	cbnz	r5, 8006f98 <__d2b+0x7c>
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	d028      	beq.n	8006fa2 <__d2b+0x86>
 8006f50:	4668      	mov	r0, sp
 8006f52:	9600      	str	r6, [sp, #0]
 8006f54:	f7ff fd82 	bl	8006a5c <__lo0bits>
 8006f58:	9900      	ldr	r1, [sp, #0]
 8006f5a:	b300      	cbz	r0, 8006f9e <__d2b+0x82>
 8006f5c:	9a01      	ldr	r2, [sp, #4]
 8006f5e:	f1c0 0320 	rsb	r3, r0, #32
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	430b      	orrs	r3, r1
 8006f68:	40c2      	lsrs	r2, r0
 8006f6a:	6163      	str	r3, [r4, #20]
 8006f6c:	9201      	str	r2, [sp, #4]
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	61a3      	str	r3, [r4, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bf14      	ite	ne
 8006f76:	2202      	movne	r2, #2
 8006f78:	2201      	moveq	r2, #1
 8006f7a:	6122      	str	r2, [r4, #16]
 8006f7c:	b1d5      	cbz	r5, 8006fb4 <__d2b+0x98>
 8006f7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f82:	4405      	add	r5, r0
 8006f84:	f8c9 5000 	str.w	r5, [r9]
 8006f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f8c:	f8c8 0000 	str.w	r0, [r8]
 8006f90:	4620      	mov	r0, r4
 8006f92:	b003      	add	sp, #12
 8006f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f9c:	e7d5      	b.n	8006f4a <__d2b+0x2e>
 8006f9e:	6161      	str	r1, [r4, #20]
 8006fa0:	e7e5      	b.n	8006f6e <__d2b+0x52>
 8006fa2:	a801      	add	r0, sp, #4
 8006fa4:	f7ff fd5a 	bl	8006a5c <__lo0bits>
 8006fa8:	9b01      	ldr	r3, [sp, #4]
 8006faa:	6163      	str	r3, [r4, #20]
 8006fac:	2201      	movs	r2, #1
 8006fae:	6122      	str	r2, [r4, #16]
 8006fb0:	3020      	adds	r0, #32
 8006fb2:	e7e3      	b.n	8006f7c <__d2b+0x60>
 8006fb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fbc:	f8c9 0000 	str.w	r0, [r9]
 8006fc0:	6918      	ldr	r0, [r3, #16]
 8006fc2:	f7ff fd2b 	bl	8006a1c <__hi0bits>
 8006fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fca:	e7df      	b.n	8006f8c <__d2b+0x70>
 8006fcc:	0800866f 	.word	0x0800866f
 8006fd0:	08008680 	.word	0x08008680

08006fd4 <_calloc_r>:
 8006fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fd6:	fba1 2402 	umull	r2, r4, r1, r2
 8006fda:	b94c      	cbnz	r4, 8006ff0 <_calloc_r+0x1c>
 8006fdc:	4611      	mov	r1, r2
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	f7fe f97a 	bl	80052d8 <_malloc_r>
 8006fe4:	9a01      	ldr	r2, [sp, #4]
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	b930      	cbnz	r0, 8006ff8 <_calloc_r+0x24>
 8006fea:	4628      	mov	r0, r5
 8006fec:	b003      	add	sp, #12
 8006fee:	bd30      	pop	{r4, r5, pc}
 8006ff0:	220c      	movs	r2, #12
 8006ff2:	6002      	str	r2, [r0, #0]
 8006ff4:	2500      	movs	r5, #0
 8006ff6:	e7f8      	b.n	8006fea <_calloc_r+0x16>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f7fe f8f9 	bl	80051f0 <memset>
 8006ffe:	e7f4      	b.n	8006fea <_calloc_r+0x16>

08007000 <_realloc_r>:
 8007000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007004:	4680      	mov	r8, r0
 8007006:	4614      	mov	r4, r2
 8007008:	460e      	mov	r6, r1
 800700a:	b921      	cbnz	r1, 8007016 <_realloc_r+0x16>
 800700c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007010:	4611      	mov	r1, r2
 8007012:	f7fe b961 	b.w	80052d8 <_malloc_r>
 8007016:	b92a      	cbnz	r2, 8007024 <_realloc_r+0x24>
 8007018:	f7fe f8f2 	bl	8005200 <_free_r>
 800701c:	4625      	mov	r5, r4
 800701e:	4628      	mov	r0, r5
 8007020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007024:	f000 f9d5 	bl	80073d2 <_malloc_usable_size_r>
 8007028:	4284      	cmp	r4, r0
 800702a:	4607      	mov	r7, r0
 800702c:	d802      	bhi.n	8007034 <_realloc_r+0x34>
 800702e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007032:	d812      	bhi.n	800705a <_realloc_r+0x5a>
 8007034:	4621      	mov	r1, r4
 8007036:	4640      	mov	r0, r8
 8007038:	f7fe f94e 	bl	80052d8 <_malloc_r>
 800703c:	4605      	mov	r5, r0
 800703e:	2800      	cmp	r0, #0
 8007040:	d0ed      	beq.n	800701e <_realloc_r+0x1e>
 8007042:	42bc      	cmp	r4, r7
 8007044:	4622      	mov	r2, r4
 8007046:	4631      	mov	r1, r6
 8007048:	bf28      	it	cs
 800704a:	463a      	movcs	r2, r7
 800704c:	f7fe f8c2 	bl	80051d4 <memcpy>
 8007050:	4631      	mov	r1, r6
 8007052:	4640      	mov	r0, r8
 8007054:	f7fe f8d4 	bl	8005200 <_free_r>
 8007058:	e7e1      	b.n	800701e <_realloc_r+0x1e>
 800705a:	4635      	mov	r5, r6
 800705c:	e7df      	b.n	800701e <_realloc_r+0x1e>

0800705e <__ssputs_r>:
 800705e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007062:	688e      	ldr	r6, [r1, #8]
 8007064:	429e      	cmp	r6, r3
 8007066:	4682      	mov	sl, r0
 8007068:	460c      	mov	r4, r1
 800706a:	4690      	mov	r8, r2
 800706c:	461f      	mov	r7, r3
 800706e:	d838      	bhi.n	80070e2 <__ssputs_r+0x84>
 8007070:	898a      	ldrh	r2, [r1, #12]
 8007072:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007076:	d032      	beq.n	80070de <__ssputs_r+0x80>
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	6909      	ldr	r1, [r1, #16]
 800707c:	eba5 0901 	sub.w	r9, r5, r1
 8007080:	6965      	ldr	r5, [r4, #20]
 8007082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800708a:	3301      	adds	r3, #1
 800708c:	444b      	add	r3, r9
 800708e:	106d      	asrs	r5, r5, #1
 8007090:	429d      	cmp	r5, r3
 8007092:	bf38      	it	cc
 8007094:	461d      	movcc	r5, r3
 8007096:	0553      	lsls	r3, r2, #21
 8007098:	d531      	bpl.n	80070fe <__ssputs_r+0xa0>
 800709a:	4629      	mov	r1, r5
 800709c:	f7fe f91c 	bl	80052d8 <_malloc_r>
 80070a0:	4606      	mov	r6, r0
 80070a2:	b950      	cbnz	r0, 80070ba <__ssputs_r+0x5c>
 80070a4:	230c      	movs	r3, #12
 80070a6:	f8ca 3000 	str.w	r3, [sl]
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	f04f 30ff 	mov.w	r0, #4294967295
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	6921      	ldr	r1, [r4, #16]
 80070bc:	464a      	mov	r2, r9
 80070be:	f7fe f889 	bl	80051d4 <memcpy>
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	6126      	str	r6, [r4, #16]
 80070d0:	6165      	str	r5, [r4, #20]
 80070d2:	444e      	add	r6, r9
 80070d4:	eba5 0509 	sub.w	r5, r5, r9
 80070d8:	6026      	str	r6, [r4, #0]
 80070da:	60a5      	str	r5, [r4, #8]
 80070dc:	463e      	mov	r6, r7
 80070de:	42be      	cmp	r6, r7
 80070e0:	d900      	bls.n	80070e4 <__ssputs_r+0x86>
 80070e2:	463e      	mov	r6, r7
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	4632      	mov	r2, r6
 80070e8:	4641      	mov	r1, r8
 80070ea:	f000 f958 	bl	800739e <memmove>
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	1b9b      	subs	r3, r3, r6
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	4433      	add	r3, r6
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	2000      	movs	r0, #0
 80070fc:	e7db      	b.n	80070b6 <__ssputs_r+0x58>
 80070fe:	462a      	mov	r2, r5
 8007100:	f7ff ff7e 	bl	8007000 <_realloc_r>
 8007104:	4606      	mov	r6, r0
 8007106:	2800      	cmp	r0, #0
 8007108:	d1e1      	bne.n	80070ce <__ssputs_r+0x70>
 800710a:	6921      	ldr	r1, [r4, #16]
 800710c:	4650      	mov	r0, sl
 800710e:	f7fe f877 	bl	8005200 <_free_r>
 8007112:	e7c7      	b.n	80070a4 <__ssputs_r+0x46>

08007114 <_svfiprintf_r>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	4698      	mov	r8, r3
 800711a:	898b      	ldrh	r3, [r1, #12]
 800711c:	061b      	lsls	r3, r3, #24
 800711e:	b09d      	sub	sp, #116	; 0x74
 8007120:	4607      	mov	r7, r0
 8007122:	460d      	mov	r5, r1
 8007124:	4614      	mov	r4, r2
 8007126:	d50e      	bpl.n	8007146 <_svfiprintf_r+0x32>
 8007128:	690b      	ldr	r3, [r1, #16]
 800712a:	b963      	cbnz	r3, 8007146 <_svfiprintf_r+0x32>
 800712c:	2140      	movs	r1, #64	; 0x40
 800712e:	f7fe f8d3 	bl	80052d8 <_malloc_r>
 8007132:	6028      	str	r0, [r5, #0]
 8007134:	6128      	str	r0, [r5, #16]
 8007136:	b920      	cbnz	r0, 8007142 <_svfiprintf_r+0x2e>
 8007138:	230c      	movs	r3, #12
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	e0d1      	b.n	80072e6 <_svfiprintf_r+0x1d2>
 8007142:	2340      	movs	r3, #64	; 0x40
 8007144:	616b      	str	r3, [r5, #20]
 8007146:	2300      	movs	r3, #0
 8007148:	9309      	str	r3, [sp, #36]	; 0x24
 800714a:	2320      	movs	r3, #32
 800714c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007150:	f8cd 800c 	str.w	r8, [sp, #12]
 8007154:	2330      	movs	r3, #48	; 0x30
 8007156:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007300 <_svfiprintf_r+0x1ec>
 800715a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800715e:	f04f 0901 	mov.w	r9, #1
 8007162:	4623      	mov	r3, r4
 8007164:	469a      	mov	sl, r3
 8007166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800716a:	b10a      	cbz	r2, 8007170 <_svfiprintf_r+0x5c>
 800716c:	2a25      	cmp	r2, #37	; 0x25
 800716e:	d1f9      	bne.n	8007164 <_svfiprintf_r+0x50>
 8007170:	ebba 0b04 	subs.w	fp, sl, r4
 8007174:	d00b      	beq.n	800718e <_svfiprintf_r+0x7a>
 8007176:	465b      	mov	r3, fp
 8007178:	4622      	mov	r2, r4
 800717a:	4629      	mov	r1, r5
 800717c:	4638      	mov	r0, r7
 800717e:	f7ff ff6e 	bl	800705e <__ssputs_r>
 8007182:	3001      	adds	r0, #1
 8007184:	f000 80aa 	beq.w	80072dc <_svfiprintf_r+0x1c8>
 8007188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800718a:	445a      	add	r2, fp
 800718c:	9209      	str	r2, [sp, #36]	; 0x24
 800718e:	f89a 3000 	ldrb.w	r3, [sl]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80a2 	beq.w	80072dc <_svfiprintf_r+0x1c8>
 8007198:	2300      	movs	r3, #0
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a2:	f10a 0a01 	add.w	sl, sl, #1
 80071a6:	9304      	str	r3, [sp, #16]
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ae:	931a      	str	r3, [sp, #104]	; 0x68
 80071b0:	4654      	mov	r4, sl
 80071b2:	2205      	movs	r2, #5
 80071b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b8:	4851      	ldr	r0, [pc, #324]	; (8007300 <_svfiprintf_r+0x1ec>)
 80071ba:	f7f9 f849 	bl	8000250 <memchr>
 80071be:	9a04      	ldr	r2, [sp, #16]
 80071c0:	b9d8      	cbnz	r0, 80071fa <_svfiprintf_r+0xe6>
 80071c2:	06d0      	lsls	r0, r2, #27
 80071c4:	bf44      	itt	mi
 80071c6:	2320      	movmi	r3, #32
 80071c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071cc:	0711      	lsls	r1, r2, #28
 80071ce:	bf44      	itt	mi
 80071d0:	232b      	movmi	r3, #43	; 0x2b
 80071d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d6:	f89a 3000 	ldrb.w	r3, [sl]
 80071da:	2b2a      	cmp	r3, #42	; 0x2a
 80071dc:	d015      	beq.n	800720a <_svfiprintf_r+0xf6>
 80071de:	9a07      	ldr	r2, [sp, #28]
 80071e0:	4654      	mov	r4, sl
 80071e2:	2000      	movs	r0, #0
 80071e4:	f04f 0c0a 	mov.w	ip, #10
 80071e8:	4621      	mov	r1, r4
 80071ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ee:	3b30      	subs	r3, #48	; 0x30
 80071f0:	2b09      	cmp	r3, #9
 80071f2:	d94e      	bls.n	8007292 <_svfiprintf_r+0x17e>
 80071f4:	b1b0      	cbz	r0, 8007224 <_svfiprintf_r+0x110>
 80071f6:	9207      	str	r2, [sp, #28]
 80071f8:	e014      	b.n	8007224 <_svfiprintf_r+0x110>
 80071fa:	eba0 0308 	sub.w	r3, r0, r8
 80071fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007202:	4313      	orrs	r3, r2
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	46a2      	mov	sl, r4
 8007208:	e7d2      	b.n	80071b0 <_svfiprintf_r+0x9c>
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	1d19      	adds	r1, r3, #4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	9103      	str	r1, [sp, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	bfbb      	ittet	lt
 8007216:	425b      	neglt	r3, r3
 8007218:	f042 0202 	orrlt.w	r2, r2, #2
 800721c:	9307      	strge	r3, [sp, #28]
 800721e:	9307      	strlt	r3, [sp, #28]
 8007220:	bfb8      	it	lt
 8007222:	9204      	strlt	r2, [sp, #16]
 8007224:	7823      	ldrb	r3, [r4, #0]
 8007226:	2b2e      	cmp	r3, #46	; 0x2e
 8007228:	d10c      	bne.n	8007244 <_svfiprintf_r+0x130>
 800722a:	7863      	ldrb	r3, [r4, #1]
 800722c:	2b2a      	cmp	r3, #42	; 0x2a
 800722e:	d135      	bne.n	800729c <_svfiprintf_r+0x188>
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	1d1a      	adds	r2, r3, #4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	9203      	str	r2, [sp, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	bfb8      	it	lt
 800723c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007240:	3402      	adds	r4, #2
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007310 <_svfiprintf_r+0x1fc>
 8007248:	7821      	ldrb	r1, [r4, #0]
 800724a:	2203      	movs	r2, #3
 800724c:	4650      	mov	r0, sl
 800724e:	f7f8 ffff 	bl	8000250 <memchr>
 8007252:	b140      	cbz	r0, 8007266 <_svfiprintf_r+0x152>
 8007254:	2340      	movs	r3, #64	; 0x40
 8007256:	eba0 000a 	sub.w	r0, r0, sl
 800725a:	fa03 f000 	lsl.w	r0, r3, r0
 800725e:	9b04      	ldr	r3, [sp, #16]
 8007260:	4303      	orrs	r3, r0
 8007262:	3401      	adds	r4, #1
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726a:	4826      	ldr	r0, [pc, #152]	; (8007304 <_svfiprintf_r+0x1f0>)
 800726c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007270:	2206      	movs	r2, #6
 8007272:	f7f8 ffed 	bl	8000250 <memchr>
 8007276:	2800      	cmp	r0, #0
 8007278:	d038      	beq.n	80072ec <_svfiprintf_r+0x1d8>
 800727a:	4b23      	ldr	r3, [pc, #140]	; (8007308 <_svfiprintf_r+0x1f4>)
 800727c:	bb1b      	cbnz	r3, 80072c6 <_svfiprintf_r+0x1b2>
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	3307      	adds	r3, #7
 8007282:	f023 0307 	bic.w	r3, r3, #7
 8007286:	3308      	adds	r3, #8
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728c:	4433      	add	r3, r6
 800728e:	9309      	str	r3, [sp, #36]	; 0x24
 8007290:	e767      	b.n	8007162 <_svfiprintf_r+0x4e>
 8007292:	fb0c 3202 	mla	r2, ip, r2, r3
 8007296:	460c      	mov	r4, r1
 8007298:	2001      	movs	r0, #1
 800729a:	e7a5      	b.n	80071e8 <_svfiprintf_r+0xd4>
 800729c:	2300      	movs	r3, #0
 800729e:	3401      	adds	r4, #1
 80072a0:	9305      	str	r3, [sp, #20]
 80072a2:	4619      	mov	r1, r3
 80072a4:	f04f 0c0a 	mov.w	ip, #10
 80072a8:	4620      	mov	r0, r4
 80072aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ae:	3a30      	subs	r2, #48	; 0x30
 80072b0:	2a09      	cmp	r2, #9
 80072b2:	d903      	bls.n	80072bc <_svfiprintf_r+0x1a8>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0c5      	beq.n	8007244 <_svfiprintf_r+0x130>
 80072b8:	9105      	str	r1, [sp, #20]
 80072ba:	e7c3      	b.n	8007244 <_svfiprintf_r+0x130>
 80072bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80072c0:	4604      	mov	r4, r0
 80072c2:	2301      	movs	r3, #1
 80072c4:	e7f0      	b.n	80072a8 <_svfiprintf_r+0x194>
 80072c6:	ab03      	add	r3, sp, #12
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	462a      	mov	r2, r5
 80072cc:	4b0f      	ldr	r3, [pc, #60]	; (800730c <_svfiprintf_r+0x1f8>)
 80072ce:	a904      	add	r1, sp, #16
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7fe f905 	bl	80054e0 <_printf_float>
 80072d6:	1c42      	adds	r2, r0, #1
 80072d8:	4606      	mov	r6, r0
 80072da:	d1d6      	bne.n	800728a <_svfiprintf_r+0x176>
 80072dc:	89ab      	ldrh	r3, [r5, #12]
 80072de:	065b      	lsls	r3, r3, #25
 80072e0:	f53f af2c 	bmi.w	800713c <_svfiprintf_r+0x28>
 80072e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072e6:	b01d      	add	sp, #116	; 0x74
 80072e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ec:	ab03      	add	r3, sp, #12
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	462a      	mov	r2, r5
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <_svfiprintf_r+0x1f8>)
 80072f4:	a904      	add	r1, sp, #16
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7fe fb7e 	bl	80059f8 <_printf_i>
 80072fc:	e7eb      	b.n	80072d6 <_svfiprintf_r+0x1c2>
 80072fe:	bf00      	nop
 8007300:	080087dc 	.word	0x080087dc
 8007304:	080087e6 	.word	0x080087e6
 8007308:	080054e1 	.word	0x080054e1
 800730c:	0800705f 	.word	0x0800705f
 8007310:	080087e2 	.word	0x080087e2

08007314 <__assert_func>:
 8007314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007316:	4614      	mov	r4, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <__assert_func+0x2c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4605      	mov	r5, r0
 8007320:	68d8      	ldr	r0, [r3, #12]
 8007322:	b14c      	cbz	r4, 8007338 <__assert_func+0x24>
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <__assert_func+0x30>)
 8007326:	9100      	str	r1, [sp, #0]
 8007328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800732c:	4906      	ldr	r1, [pc, #24]	; (8007348 <__assert_func+0x34>)
 800732e:	462b      	mov	r3, r5
 8007330:	f000 f80e 	bl	8007350 <fiprintf>
 8007334:	f000 fa7c 	bl	8007830 <abort>
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <__assert_func+0x38>)
 800733a:	461c      	mov	r4, r3
 800733c:	e7f3      	b.n	8007326 <__assert_func+0x12>
 800733e:	bf00      	nop
 8007340:	200006a0 	.word	0x200006a0
 8007344:	080087ed 	.word	0x080087ed
 8007348:	080087fa 	.word	0x080087fa
 800734c:	08007fe4 	.word	0x08007fe4

08007350 <fiprintf>:
 8007350:	b40e      	push	{r1, r2, r3}
 8007352:	b503      	push	{r0, r1, lr}
 8007354:	4601      	mov	r1, r0
 8007356:	ab03      	add	r3, sp, #12
 8007358:	4805      	ldr	r0, [pc, #20]	; (8007370 <fiprintf+0x20>)
 800735a:	f853 2b04 	ldr.w	r2, [r3], #4
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	f000 f867 	bl	8007434 <_vfiprintf_r>
 8007366:	b002      	add	sp, #8
 8007368:	f85d eb04 	ldr.w	lr, [sp], #4
 800736c:	b003      	add	sp, #12
 800736e:	4770      	bx	lr
 8007370:	200006a0 	.word	0x200006a0

08007374 <__retarget_lock_init_recursive>:
 8007374:	4770      	bx	lr

08007376 <__retarget_lock_acquire_recursive>:
 8007376:	4770      	bx	lr

08007378 <__retarget_lock_release_recursive>:
 8007378:	4770      	bx	lr

0800737a <__ascii_mbtowc>:
 800737a:	b082      	sub	sp, #8
 800737c:	b901      	cbnz	r1, 8007380 <__ascii_mbtowc+0x6>
 800737e:	a901      	add	r1, sp, #4
 8007380:	b142      	cbz	r2, 8007394 <__ascii_mbtowc+0x1a>
 8007382:	b14b      	cbz	r3, 8007398 <__ascii_mbtowc+0x1e>
 8007384:	7813      	ldrb	r3, [r2, #0]
 8007386:	600b      	str	r3, [r1, #0]
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	1e10      	subs	r0, r2, #0
 800738c:	bf18      	it	ne
 800738e:	2001      	movne	r0, #1
 8007390:	b002      	add	sp, #8
 8007392:	4770      	bx	lr
 8007394:	4610      	mov	r0, r2
 8007396:	e7fb      	b.n	8007390 <__ascii_mbtowc+0x16>
 8007398:	f06f 0001 	mvn.w	r0, #1
 800739c:	e7f8      	b.n	8007390 <__ascii_mbtowc+0x16>

0800739e <memmove>:
 800739e:	4288      	cmp	r0, r1
 80073a0:	b510      	push	{r4, lr}
 80073a2:	eb01 0402 	add.w	r4, r1, r2
 80073a6:	d902      	bls.n	80073ae <memmove+0x10>
 80073a8:	4284      	cmp	r4, r0
 80073aa:	4623      	mov	r3, r4
 80073ac:	d807      	bhi.n	80073be <memmove+0x20>
 80073ae:	1e43      	subs	r3, r0, #1
 80073b0:	42a1      	cmp	r1, r4
 80073b2:	d008      	beq.n	80073c6 <memmove+0x28>
 80073b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073bc:	e7f8      	b.n	80073b0 <memmove+0x12>
 80073be:	4402      	add	r2, r0
 80073c0:	4601      	mov	r1, r0
 80073c2:	428a      	cmp	r2, r1
 80073c4:	d100      	bne.n	80073c8 <memmove+0x2a>
 80073c6:	bd10      	pop	{r4, pc}
 80073c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073d0:	e7f7      	b.n	80073c2 <memmove+0x24>

080073d2 <_malloc_usable_size_r>:
 80073d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d6:	1f18      	subs	r0, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfbc      	itt	lt
 80073dc:	580b      	ldrlt	r3, [r1, r0]
 80073de:	18c0      	addlt	r0, r0, r3
 80073e0:	4770      	bx	lr

080073e2 <__sfputc_r>:
 80073e2:	6893      	ldr	r3, [r2, #8]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	b410      	push	{r4}
 80073ea:	6093      	str	r3, [r2, #8]
 80073ec:	da08      	bge.n	8007400 <__sfputc_r+0x1e>
 80073ee:	6994      	ldr	r4, [r2, #24]
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	db01      	blt.n	80073f8 <__sfputc_r+0x16>
 80073f4:	290a      	cmp	r1, #10
 80073f6:	d103      	bne.n	8007400 <__sfputc_r+0x1e>
 80073f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073fc:	f000 b94a 	b.w	8007694 <__swbuf_r>
 8007400:	6813      	ldr	r3, [r2, #0]
 8007402:	1c58      	adds	r0, r3, #1
 8007404:	6010      	str	r0, [r2, #0]
 8007406:	7019      	strb	r1, [r3, #0]
 8007408:	4608      	mov	r0, r1
 800740a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800740e:	4770      	bx	lr

08007410 <__sfputs_r>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	4614      	mov	r4, r2
 8007418:	18d5      	adds	r5, r2, r3
 800741a:	42ac      	cmp	r4, r5
 800741c:	d101      	bne.n	8007422 <__sfputs_r+0x12>
 800741e:	2000      	movs	r0, #0
 8007420:	e007      	b.n	8007432 <__sfputs_r+0x22>
 8007422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007426:	463a      	mov	r2, r7
 8007428:	4630      	mov	r0, r6
 800742a:	f7ff ffda 	bl	80073e2 <__sfputc_r>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	d1f3      	bne.n	800741a <__sfputs_r+0xa>
 8007432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007434 <_vfiprintf_r>:
 8007434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	460d      	mov	r5, r1
 800743a:	b09d      	sub	sp, #116	; 0x74
 800743c:	4614      	mov	r4, r2
 800743e:	4698      	mov	r8, r3
 8007440:	4606      	mov	r6, r0
 8007442:	b118      	cbz	r0, 800744c <_vfiprintf_r+0x18>
 8007444:	6983      	ldr	r3, [r0, #24]
 8007446:	b90b      	cbnz	r3, 800744c <_vfiprintf_r+0x18>
 8007448:	f000 fb14 	bl	8007a74 <__sinit>
 800744c:	4b89      	ldr	r3, [pc, #548]	; (8007674 <_vfiprintf_r+0x240>)
 800744e:	429d      	cmp	r5, r3
 8007450:	d11b      	bne.n	800748a <_vfiprintf_r+0x56>
 8007452:	6875      	ldr	r5, [r6, #4]
 8007454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007456:	07d9      	lsls	r1, r3, #31
 8007458:	d405      	bmi.n	8007466 <_vfiprintf_r+0x32>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	059a      	lsls	r2, r3, #22
 800745e:	d402      	bmi.n	8007466 <_vfiprintf_r+0x32>
 8007460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007462:	f7ff ff88 	bl	8007376 <__retarget_lock_acquire_recursive>
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	071b      	lsls	r3, r3, #28
 800746a:	d501      	bpl.n	8007470 <_vfiprintf_r+0x3c>
 800746c:	692b      	ldr	r3, [r5, #16]
 800746e:	b9eb      	cbnz	r3, 80074ac <_vfiprintf_r+0x78>
 8007470:	4629      	mov	r1, r5
 8007472:	4630      	mov	r0, r6
 8007474:	f000 f96e 	bl	8007754 <__swsetup_r>
 8007478:	b1c0      	cbz	r0, 80074ac <_vfiprintf_r+0x78>
 800747a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800747c:	07dc      	lsls	r4, r3, #31
 800747e:	d50e      	bpl.n	800749e <_vfiprintf_r+0x6a>
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	b01d      	add	sp, #116	; 0x74
 8007486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748a:	4b7b      	ldr	r3, [pc, #492]	; (8007678 <_vfiprintf_r+0x244>)
 800748c:	429d      	cmp	r5, r3
 800748e:	d101      	bne.n	8007494 <_vfiprintf_r+0x60>
 8007490:	68b5      	ldr	r5, [r6, #8]
 8007492:	e7df      	b.n	8007454 <_vfiprintf_r+0x20>
 8007494:	4b79      	ldr	r3, [pc, #484]	; (800767c <_vfiprintf_r+0x248>)
 8007496:	429d      	cmp	r5, r3
 8007498:	bf08      	it	eq
 800749a:	68f5      	ldreq	r5, [r6, #12]
 800749c:	e7da      	b.n	8007454 <_vfiprintf_r+0x20>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	0598      	lsls	r0, r3, #22
 80074a2:	d4ed      	bmi.n	8007480 <_vfiprintf_r+0x4c>
 80074a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a6:	f7ff ff67 	bl	8007378 <__retarget_lock_release_recursive>
 80074aa:	e7e9      	b.n	8007480 <_vfiprintf_r+0x4c>
 80074ac:	2300      	movs	r3, #0
 80074ae:	9309      	str	r3, [sp, #36]	; 0x24
 80074b0:	2320      	movs	r3, #32
 80074b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ba:	2330      	movs	r3, #48	; 0x30
 80074bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007680 <_vfiprintf_r+0x24c>
 80074c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074c4:	f04f 0901 	mov.w	r9, #1
 80074c8:	4623      	mov	r3, r4
 80074ca:	469a      	mov	sl, r3
 80074cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d0:	b10a      	cbz	r2, 80074d6 <_vfiprintf_r+0xa2>
 80074d2:	2a25      	cmp	r2, #37	; 0x25
 80074d4:	d1f9      	bne.n	80074ca <_vfiprintf_r+0x96>
 80074d6:	ebba 0b04 	subs.w	fp, sl, r4
 80074da:	d00b      	beq.n	80074f4 <_vfiprintf_r+0xc0>
 80074dc:	465b      	mov	r3, fp
 80074de:	4622      	mov	r2, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff ff94 	bl	8007410 <__sfputs_r>
 80074e8:	3001      	adds	r0, #1
 80074ea:	f000 80aa 	beq.w	8007642 <_vfiprintf_r+0x20e>
 80074ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f0:	445a      	add	r2, fp
 80074f2:	9209      	str	r2, [sp, #36]	; 0x24
 80074f4:	f89a 3000 	ldrb.w	r3, [sl]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 80a2 	beq.w	8007642 <_vfiprintf_r+0x20e>
 80074fe:	2300      	movs	r3, #0
 8007500:	f04f 32ff 	mov.w	r2, #4294967295
 8007504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007508:	f10a 0a01 	add.w	sl, sl, #1
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	9307      	str	r3, [sp, #28]
 8007510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007514:	931a      	str	r3, [sp, #104]	; 0x68
 8007516:	4654      	mov	r4, sl
 8007518:	2205      	movs	r2, #5
 800751a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800751e:	4858      	ldr	r0, [pc, #352]	; (8007680 <_vfiprintf_r+0x24c>)
 8007520:	f7f8 fe96 	bl	8000250 <memchr>
 8007524:	9a04      	ldr	r2, [sp, #16]
 8007526:	b9d8      	cbnz	r0, 8007560 <_vfiprintf_r+0x12c>
 8007528:	06d1      	lsls	r1, r2, #27
 800752a:	bf44      	itt	mi
 800752c:	2320      	movmi	r3, #32
 800752e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007532:	0713      	lsls	r3, r2, #28
 8007534:	bf44      	itt	mi
 8007536:	232b      	movmi	r3, #43	; 0x2b
 8007538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800753c:	f89a 3000 	ldrb.w	r3, [sl]
 8007540:	2b2a      	cmp	r3, #42	; 0x2a
 8007542:	d015      	beq.n	8007570 <_vfiprintf_r+0x13c>
 8007544:	9a07      	ldr	r2, [sp, #28]
 8007546:	4654      	mov	r4, sl
 8007548:	2000      	movs	r0, #0
 800754a:	f04f 0c0a 	mov.w	ip, #10
 800754e:	4621      	mov	r1, r4
 8007550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007554:	3b30      	subs	r3, #48	; 0x30
 8007556:	2b09      	cmp	r3, #9
 8007558:	d94e      	bls.n	80075f8 <_vfiprintf_r+0x1c4>
 800755a:	b1b0      	cbz	r0, 800758a <_vfiprintf_r+0x156>
 800755c:	9207      	str	r2, [sp, #28]
 800755e:	e014      	b.n	800758a <_vfiprintf_r+0x156>
 8007560:	eba0 0308 	sub.w	r3, r0, r8
 8007564:	fa09 f303 	lsl.w	r3, r9, r3
 8007568:	4313      	orrs	r3, r2
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	46a2      	mov	sl, r4
 800756e:	e7d2      	b.n	8007516 <_vfiprintf_r+0xe2>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	1d19      	adds	r1, r3, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	9103      	str	r1, [sp, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	bfbb      	ittet	lt
 800757c:	425b      	neglt	r3, r3
 800757e:	f042 0202 	orrlt.w	r2, r2, #2
 8007582:	9307      	strge	r3, [sp, #28]
 8007584:	9307      	strlt	r3, [sp, #28]
 8007586:	bfb8      	it	lt
 8007588:	9204      	strlt	r2, [sp, #16]
 800758a:	7823      	ldrb	r3, [r4, #0]
 800758c:	2b2e      	cmp	r3, #46	; 0x2e
 800758e:	d10c      	bne.n	80075aa <_vfiprintf_r+0x176>
 8007590:	7863      	ldrb	r3, [r4, #1]
 8007592:	2b2a      	cmp	r3, #42	; 0x2a
 8007594:	d135      	bne.n	8007602 <_vfiprintf_r+0x1ce>
 8007596:	9b03      	ldr	r3, [sp, #12]
 8007598:	1d1a      	adds	r2, r3, #4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	9203      	str	r2, [sp, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfb8      	it	lt
 80075a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80075a6:	3402      	adds	r4, #2
 80075a8:	9305      	str	r3, [sp, #20]
 80075aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007690 <_vfiprintf_r+0x25c>
 80075ae:	7821      	ldrb	r1, [r4, #0]
 80075b0:	2203      	movs	r2, #3
 80075b2:	4650      	mov	r0, sl
 80075b4:	f7f8 fe4c 	bl	8000250 <memchr>
 80075b8:	b140      	cbz	r0, 80075cc <_vfiprintf_r+0x198>
 80075ba:	2340      	movs	r3, #64	; 0x40
 80075bc:	eba0 000a 	sub.w	r0, r0, sl
 80075c0:	fa03 f000 	lsl.w	r0, r3, r0
 80075c4:	9b04      	ldr	r3, [sp, #16]
 80075c6:	4303      	orrs	r3, r0
 80075c8:	3401      	adds	r4, #1
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d0:	482c      	ldr	r0, [pc, #176]	; (8007684 <_vfiprintf_r+0x250>)
 80075d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075d6:	2206      	movs	r2, #6
 80075d8:	f7f8 fe3a 	bl	8000250 <memchr>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d03f      	beq.n	8007660 <_vfiprintf_r+0x22c>
 80075e0:	4b29      	ldr	r3, [pc, #164]	; (8007688 <_vfiprintf_r+0x254>)
 80075e2:	bb1b      	cbnz	r3, 800762c <_vfiprintf_r+0x1f8>
 80075e4:	9b03      	ldr	r3, [sp, #12]
 80075e6:	3307      	adds	r3, #7
 80075e8:	f023 0307 	bic.w	r3, r3, #7
 80075ec:	3308      	adds	r3, #8
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f2:	443b      	add	r3, r7
 80075f4:	9309      	str	r3, [sp, #36]	; 0x24
 80075f6:	e767      	b.n	80074c8 <_vfiprintf_r+0x94>
 80075f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075fc:	460c      	mov	r4, r1
 80075fe:	2001      	movs	r0, #1
 8007600:	e7a5      	b.n	800754e <_vfiprintf_r+0x11a>
 8007602:	2300      	movs	r3, #0
 8007604:	3401      	adds	r4, #1
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	4619      	mov	r1, r3
 800760a:	f04f 0c0a 	mov.w	ip, #10
 800760e:	4620      	mov	r0, r4
 8007610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007614:	3a30      	subs	r2, #48	; 0x30
 8007616:	2a09      	cmp	r2, #9
 8007618:	d903      	bls.n	8007622 <_vfiprintf_r+0x1ee>
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0c5      	beq.n	80075aa <_vfiprintf_r+0x176>
 800761e:	9105      	str	r1, [sp, #20]
 8007620:	e7c3      	b.n	80075aa <_vfiprintf_r+0x176>
 8007622:	fb0c 2101 	mla	r1, ip, r1, r2
 8007626:	4604      	mov	r4, r0
 8007628:	2301      	movs	r3, #1
 800762a:	e7f0      	b.n	800760e <_vfiprintf_r+0x1da>
 800762c:	ab03      	add	r3, sp, #12
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	462a      	mov	r2, r5
 8007632:	4b16      	ldr	r3, [pc, #88]	; (800768c <_vfiprintf_r+0x258>)
 8007634:	a904      	add	r1, sp, #16
 8007636:	4630      	mov	r0, r6
 8007638:	f7fd ff52 	bl	80054e0 <_printf_float>
 800763c:	4607      	mov	r7, r0
 800763e:	1c78      	adds	r0, r7, #1
 8007640:	d1d6      	bne.n	80075f0 <_vfiprintf_r+0x1bc>
 8007642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007644:	07d9      	lsls	r1, r3, #31
 8007646:	d405      	bmi.n	8007654 <_vfiprintf_r+0x220>
 8007648:	89ab      	ldrh	r3, [r5, #12]
 800764a:	059a      	lsls	r2, r3, #22
 800764c:	d402      	bmi.n	8007654 <_vfiprintf_r+0x220>
 800764e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007650:	f7ff fe92 	bl	8007378 <__retarget_lock_release_recursive>
 8007654:	89ab      	ldrh	r3, [r5, #12]
 8007656:	065b      	lsls	r3, r3, #25
 8007658:	f53f af12 	bmi.w	8007480 <_vfiprintf_r+0x4c>
 800765c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800765e:	e711      	b.n	8007484 <_vfiprintf_r+0x50>
 8007660:	ab03      	add	r3, sp, #12
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	462a      	mov	r2, r5
 8007666:	4b09      	ldr	r3, [pc, #36]	; (800768c <_vfiprintf_r+0x258>)
 8007668:	a904      	add	r1, sp, #16
 800766a:	4630      	mov	r0, r6
 800766c:	f7fe f9c4 	bl	80059f8 <_printf_i>
 8007670:	e7e4      	b.n	800763c <_vfiprintf_r+0x208>
 8007672:	bf00      	nop
 8007674:	08008954 	.word	0x08008954
 8007678:	08008974 	.word	0x08008974
 800767c:	08008934 	.word	0x08008934
 8007680:	080087dc 	.word	0x080087dc
 8007684:	080087e6 	.word	0x080087e6
 8007688:	080054e1 	.word	0x080054e1
 800768c:	08007411 	.word	0x08007411
 8007690:	080087e2 	.word	0x080087e2

08007694 <__swbuf_r>:
 8007694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007696:	460e      	mov	r6, r1
 8007698:	4614      	mov	r4, r2
 800769a:	4605      	mov	r5, r0
 800769c:	b118      	cbz	r0, 80076a6 <__swbuf_r+0x12>
 800769e:	6983      	ldr	r3, [r0, #24]
 80076a0:	b90b      	cbnz	r3, 80076a6 <__swbuf_r+0x12>
 80076a2:	f000 f9e7 	bl	8007a74 <__sinit>
 80076a6:	4b21      	ldr	r3, [pc, #132]	; (800772c <__swbuf_r+0x98>)
 80076a8:	429c      	cmp	r4, r3
 80076aa:	d12b      	bne.n	8007704 <__swbuf_r+0x70>
 80076ac:	686c      	ldr	r4, [r5, #4]
 80076ae:	69a3      	ldr	r3, [r4, #24]
 80076b0:	60a3      	str	r3, [r4, #8]
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	071a      	lsls	r2, r3, #28
 80076b6:	d52f      	bpl.n	8007718 <__swbuf_r+0x84>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	b36b      	cbz	r3, 8007718 <__swbuf_r+0x84>
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	6820      	ldr	r0, [r4, #0]
 80076c0:	1ac0      	subs	r0, r0, r3
 80076c2:	6963      	ldr	r3, [r4, #20]
 80076c4:	b2f6      	uxtb	r6, r6
 80076c6:	4283      	cmp	r3, r0
 80076c8:	4637      	mov	r7, r6
 80076ca:	dc04      	bgt.n	80076d6 <__swbuf_r+0x42>
 80076cc:	4621      	mov	r1, r4
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 f93c 	bl	800794c <_fflush_r>
 80076d4:	bb30      	cbnz	r0, 8007724 <__swbuf_r+0x90>
 80076d6:	68a3      	ldr	r3, [r4, #8]
 80076d8:	3b01      	subs	r3, #1
 80076da:	60a3      	str	r3, [r4, #8]
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	6022      	str	r2, [r4, #0]
 80076e2:	701e      	strb	r6, [r3, #0]
 80076e4:	6963      	ldr	r3, [r4, #20]
 80076e6:	3001      	adds	r0, #1
 80076e8:	4283      	cmp	r3, r0
 80076ea:	d004      	beq.n	80076f6 <__swbuf_r+0x62>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	07db      	lsls	r3, r3, #31
 80076f0:	d506      	bpl.n	8007700 <__swbuf_r+0x6c>
 80076f2:	2e0a      	cmp	r6, #10
 80076f4:	d104      	bne.n	8007700 <__swbuf_r+0x6c>
 80076f6:	4621      	mov	r1, r4
 80076f8:	4628      	mov	r0, r5
 80076fa:	f000 f927 	bl	800794c <_fflush_r>
 80076fe:	b988      	cbnz	r0, 8007724 <__swbuf_r+0x90>
 8007700:	4638      	mov	r0, r7
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007704:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <__swbuf_r+0x9c>)
 8007706:	429c      	cmp	r4, r3
 8007708:	d101      	bne.n	800770e <__swbuf_r+0x7a>
 800770a:	68ac      	ldr	r4, [r5, #8]
 800770c:	e7cf      	b.n	80076ae <__swbuf_r+0x1a>
 800770e:	4b09      	ldr	r3, [pc, #36]	; (8007734 <__swbuf_r+0xa0>)
 8007710:	429c      	cmp	r4, r3
 8007712:	bf08      	it	eq
 8007714:	68ec      	ldreq	r4, [r5, #12]
 8007716:	e7ca      	b.n	80076ae <__swbuf_r+0x1a>
 8007718:	4621      	mov	r1, r4
 800771a:	4628      	mov	r0, r5
 800771c:	f000 f81a 	bl	8007754 <__swsetup_r>
 8007720:	2800      	cmp	r0, #0
 8007722:	d0cb      	beq.n	80076bc <__swbuf_r+0x28>
 8007724:	f04f 37ff 	mov.w	r7, #4294967295
 8007728:	e7ea      	b.n	8007700 <__swbuf_r+0x6c>
 800772a:	bf00      	nop
 800772c:	08008954 	.word	0x08008954
 8007730:	08008974 	.word	0x08008974
 8007734:	08008934 	.word	0x08008934

08007738 <__ascii_wctomb>:
 8007738:	b149      	cbz	r1, 800774e <__ascii_wctomb+0x16>
 800773a:	2aff      	cmp	r2, #255	; 0xff
 800773c:	bf85      	ittet	hi
 800773e:	238a      	movhi	r3, #138	; 0x8a
 8007740:	6003      	strhi	r3, [r0, #0]
 8007742:	700a      	strbls	r2, [r1, #0]
 8007744:	f04f 30ff 	movhi.w	r0, #4294967295
 8007748:	bf98      	it	ls
 800774a:	2001      	movls	r0, #1
 800774c:	4770      	bx	lr
 800774e:	4608      	mov	r0, r1
 8007750:	4770      	bx	lr
	...

08007754 <__swsetup_r>:
 8007754:	4b32      	ldr	r3, [pc, #200]	; (8007820 <__swsetup_r+0xcc>)
 8007756:	b570      	push	{r4, r5, r6, lr}
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	4606      	mov	r6, r0
 800775c:	460c      	mov	r4, r1
 800775e:	b125      	cbz	r5, 800776a <__swsetup_r+0x16>
 8007760:	69ab      	ldr	r3, [r5, #24]
 8007762:	b913      	cbnz	r3, 800776a <__swsetup_r+0x16>
 8007764:	4628      	mov	r0, r5
 8007766:	f000 f985 	bl	8007a74 <__sinit>
 800776a:	4b2e      	ldr	r3, [pc, #184]	; (8007824 <__swsetup_r+0xd0>)
 800776c:	429c      	cmp	r4, r3
 800776e:	d10f      	bne.n	8007790 <__swsetup_r+0x3c>
 8007770:	686c      	ldr	r4, [r5, #4]
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007778:	0719      	lsls	r1, r3, #28
 800777a:	d42c      	bmi.n	80077d6 <__swsetup_r+0x82>
 800777c:	06dd      	lsls	r5, r3, #27
 800777e:	d411      	bmi.n	80077a4 <__swsetup_r+0x50>
 8007780:	2309      	movs	r3, #9
 8007782:	6033      	str	r3, [r6, #0]
 8007784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	e03e      	b.n	800780e <__swsetup_r+0xba>
 8007790:	4b25      	ldr	r3, [pc, #148]	; (8007828 <__swsetup_r+0xd4>)
 8007792:	429c      	cmp	r4, r3
 8007794:	d101      	bne.n	800779a <__swsetup_r+0x46>
 8007796:	68ac      	ldr	r4, [r5, #8]
 8007798:	e7eb      	b.n	8007772 <__swsetup_r+0x1e>
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <__swsetup_r+0xd8>)
 800779c:	429c      	cmp	r4, r3
 800779e:	bf08      	it	eq
 80077a0:	68ec      	ldreq	r4, [r5, #12]
 80077a2:	e7e6      	b.n	8007772 <__swsetup_r+0x1e>
 80077a4:	0758      	lsls	r0, r3, #29
 80077a6:	d512      	bpl.n	80077ce <__swsetup_r+0x7a>
 80077a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077aa:	b141      	cbz	r1, 80077be <__swsetup_r+0x6a>
 80077ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077b0:	4299      	cmp	r1, r3
 80077b2:	d002      	beq.n	80077ba <__swsetup_r+0x66>
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7fd fd23 	bl	8005200 <_free_r>
 80077ba:	2300      	movs	r3, #0
 80077bc:	6363      	str	r3, [r4, #52]	; 0x34
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	2300      	movs	r3, #0
 80077c8:	6063      	str	r3, [r4, #4]
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	f043 0308 	orr.w	r3, r3, #8
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	b94b      	cbnz	r3, 80077ee <__swsetup_r+0x9a>
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e4:	d003      	beq.n	80077ee <__swsetup_r+0x9a>
 80077e6:	4621      	mov	r1, r4
 80077e8:	4630      	mov	r0, r6
 80077ea:	f000 fa05 	bl	8007bf8 <__smakebuf_r>
 80077ee:	89a0      	ldrh	r0, [r4, #12]
 80077f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077f4:	f010 0301 	ands.w	r3, r0, #1
 80077f8:	d00a      	beq.n	8007810 <__swsetup_r+0xbc>
 80077fa:	2300      	movs	r3, #0
 80077fc:	60a3      	str	r3, [r4, #8]
 80077fe:	6963      	ldr	r3, [r4, #20]
 8007800:	425b      	negs	r3, r3
 8007802:	61a3      	str	r3, [r4, #24]
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	b943      	cbnz	r3, 800781a <__swsetup_r+0xc6>
 8007808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800780c:	d1ba      	bne.n	8007784 <__swsetup_r+0x30>
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	0781      	lsls	r1, r0, #30
 8007812:	bf58      	it	pl
 8007814:	6963      	ldrpl	r3, [r4, #20]
 8007816:	60a3      	str	r3, [r4, #8]
 8007818:	e7f4      	b.n	8007804 <__swsetup_r+0xb0>
 800781a:	2000      	movs	r0, #0
 800781c:	e7f7      	b.n	800780e <__swsetup_r+0xba>
 800781e:	bf00      	nop
 8007820:	200006a0 	.word	0x200006a0
 8007824:	08008954 	.word	0x08008954
 8007828:	08008974 	.word	0x08008974
 800782c:	08008934 	.word	0x08008934

08007830 <abort>:
 8007830:	b508      	push	{r3, lr}
 8007832:	2006      	movs	r0, #6
 8007834:	f000 fa48 	bl	8007cc8 <raise>
 8007838:	2001      	movs	r0, #1
 800783a:	f000 fb4d 	bl	8007ed8 <_exit>
	...

08007840 <__sflush_r>:
 8007840:	898a      	ldrh	r2, [r1, #12]
 8007842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	4605      	mov	r5, r0
 8007848:	0710      	lsls	r0, r2, #28
 800784a:	460c      	mov	r4, r1
 800784c:	d458      	bmi.n	8007900 <__sflush_r+0xc0>
 800784e:	684b      	ldr	r3, [r1, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	dc05      	bgt.n	8007860 <__sflush_r+0x20>
 8007854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	dc02      	bgt.n	8007860 <__sflush_r+0x20>
 800785a:	2000      	movs	r0, #0
 800785c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007862:	2e00      	cmp	r6, #0
 8007864:	d0f9      	beq.n	800785a <__sflush_r+0x1a>
 8007866:	2300      	movs	r3, #0
 8007868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800786c:	682f      	ldr	r7, [r5, #0]
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	d032      	beq.n	80078d8 <__sflush_r+0x98>
 8007872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	075a      	lsls	r2, r3, #29
 8007878:	d505      	bpl.n	8007886 <__sflush_r+0x46>
 800787a:	6863      	ldr	r3, [r4, #4]
 800787c:	1ac0      	subs	r0, r0, r3
 800787e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007880:	b10b      	cbz	r3, 8007886 <__sflush_r+0x46>
 8007882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007884:	1ac0      	subs	r0, r0, r3
 8007886:	2300      	movs	r3, #0
 8007888:	4602      	mov	r2, r0
 800788a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800788c:	6a21      	ldr	r1, [r4, #32]
 800788e:	4628      	mov	r0, r5
 8007890:	47b0      	blx	r6
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	d106      	bne.n	80078a6 <__sflush_r+0x66>
 8007898:	6829      	ldr	r1, [r5, #0]
 800789a:	291d      	cmp	r1, #29
 800789c:	d82c      	bhi.n	80078f8 <__sflush_r+0xb8>
 800789e:	4a2a      	ldr	r2, [pc, #168]	; (8007948 <__sflush_r+0x108>)
 80078a0:	40ca      	lsrs	r2, r1
 80078a2:	07d6      	lsls	r6, r2, #31
 80078a4:	d528      	bpl.n	80078f8 <__sflush_r+0xb8>
 80078a6:	2200      	movs	r2, #0
 80078a8:	6062      	str	r2, [r4, #4]
 80078aa:	04d9      	lsls	r1, r3, #19
 80078ac:	6922      	ldr	r2, [r4, #16]
 80078ae:	6022      	str	r2, [r4, #0]
 80078b0:	d504      	bpl.n	80078bc <__sflush_r+0x7c>
 80078b2:	1c42      	adds	r2, r0, #1
 80078b4:	d101      	bne.n	80078ba <__sflush_r+0x7a>
 80078b6:	682b      	ldr	r3, [r5, #0]
 80078b8:	b903      	cbnz	r3, 80078bc <__sflush_r+0x7c>
 80078ba:	6560      	str	r0, [r4, #84]	; 0x54
 80078bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078be:	602f      	str	r7, [r5, #0]
 80078c0:	2900      	cmp	r1, #0
 80078c2:	d0ca      	beq.n	800785a <__sflush_r+0x1a>
 80078c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c8:	4299      	cmp	r1, r3
 80078ca:	d002      	beq.n	80078d2 <__sflush_r+0x92>
 80078cc:	4628      	mov	r0, r5
 80078ce:	f7fd fc97 	bl	8005200 <_free_r>
 80078d2:	2000      	movs	r0, #0
 80078d4:	6360      	str	r0, [r4, #52]	; 0x34
 80078d6:	e7c1      	b.n	800785c <__sflush_r+0x1c>
 80078d8:	6a21      	ldr	r1, [r4, #32]
 80078da:	2301      	movs	r3, #1
 80078dc:	4628      	mov	r0, r5
 80078de:	47b0      	blx	r6
 80078e0:	1c41      	adds	r1, r0, #1
 80078e2:	d1c7      	bne.n	8007874 <__sflush_r+0x34>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0c4      	beq.n	8007874 <__sflush_r+0x34>
 80078ea:	2b1d      	cmp	r3, #29
 80078ec:	d001      	beq.n	80078f2 <__sflush_r+0xb2>
 80078ee:	2b16      	cmp	r3, #22
 80078f0:	d101      	bne.n	80078f6 <__sflush_r+0xb6>
 80078f2:	602f      	str	r7, [r5, #0]
 80078f4:	e7b1      	b.n	800785a <__sflush_r+0x1a>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	e7ad      	b.n	800785c <__sflush_r+0x1c>
 8007900:	690f      	ldr	r7, [r1, #16]
 8007902:	2f00      	cmp	r7, #0
 8007904:	d0a9      	beq.n	800785a <__sflush_r+0x1a>
 8007906:	0793      	lsls	r3, r2, #30
 8007908:	680e      	ldr	r6, [r1, #0]
 800790a:	bf08      	it	eq
 800790c:	694b      	ldreq	r3, [r1, #20]
 800790e:	600f      	str	r7, [r1, #0]
 8007910:	bf18      	it	ne
 8007912:	2300      	movne	r3, #0
 8007914:	eba6 0807 	sub.w	r8, r6, r7
 8007918:	608b      	str	r3, [r1, #8]
 800791a:	f1b8 0f00 	cmp.w	r8, #0
 800791e:	dd9c      	ble.n	800785a <__sflush_r+0x1a>
 8007920:	6a21      	ldr	r1, [r4, #32]
 8007922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007924:	4643      	mov	r3, r8
 8007926:	463a      	mov	r2, r7
 8007928:	4628      	mov	r0, r5
 800792a:	47b0      	blx	r6
 800792c:	2800      	cmp	r0, #0
 800792e:	dc06      	bgt.n	800793e <__sflush_r+0xfe>
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	e78e      	b.n	800785c <__sflush_r+0x1c>
 800793e:	4407      	add	r7, r0
 8007940:	eba8 0800 	sub.w	r8, r8, r0
 8007944:	e7e9      	b.n	800791a <__sflush_r+0xda>
 8007946:	bf00      	nop
 8007948:	20400001 	.word	0x20400001

0800794c <_fflush_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	690b      	ldr	r3, [r1, #16]
 8007950:	4605      	mov	r5, r0
 8007952:	460c      	mov	r4, r1
 8007954:	b913      	cbnz	r3, 800795c <_fflush_r+0x10>
 8007956:	2500      	movs	r5, #0
 8007958:	4628      	mov	r0, r5
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	b118      	cbz	r0, 8007966 <_fflush_r+0x1a>
 800795e:	6983      	ldr	r3, [r0, #24]
 8007960:	b90b      	cbnz	r3, 8007966 <_fflush_r+0x1a>
 8007962:	f000 f887 	bl	8007a74 <__sinit>
 8007966:	4b14      	ldr	r3, [pc, #80]	; (80079b8 <_fflush_r+0x6c>)
 8007968:	429c      	cmp	r4, r3
 800796a:	d11b      	bne.n	80079a4 <_fflush_r+0x58>
 800796c:	686c      	ldr	r4, [r5, #4]
 800796e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0ef      	beq.n	8007956 <_fflush_r+0xa>
 8007976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007978:	07d0      	lsls	r0, r2, #31
 800797a:	d404      	bmi.n	8007986 <_fflush_r+0x3a>
 800797c:	0599      	lsls	r1, r3, #22
 800797e:	d402      	bmi.n	8007986 <_fflush_r+0x3a>
 8007980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007982:	f7ff fcf8 	bl	8007376 <__retarget_lock_acquire_recursive>
 8007986:	4628      	mov	r0, r5
 8007988:	4621      	mov	r1, r4
 800798a:	f7ff ff59 	bl	8007840 <__sflush_r>
 800798e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007990:	07da      	lsls	r2, r3, #31
 8007992:	4605      	mov	r5, r0
 8007994:	d4e0      	bmi.n	8007958 <_fflush_r+0xc>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	059b      	lsls	r3, r3, #22
 800799a:	d4dd      	bmi.n	8007958 <_fflush_r+0xc>
 800799c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800799e:	f7ff fceb 	bl	8007378 <__retarget_lock_release_recursive>
 80079a2:	e7d9      	b.n	8007958 <_fflush_r+0xc>
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <_fflush_r+0x70>)
 80079a6:	429c      	cmp	r4, r3
 80079a8:	d101      	bne.n	80079ae <_fflush_r+0x62>
 80079aa:	68ac      	ldr	r4, [r5, #8]
 80079ac:	e7df      	b.n	800796e <_fflush_r+0x22>
 80079ae:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <_fflush_r+0x74>)
 80079b0:	429c      	cmp	r4, r3
 80079b2:	bf08      	it	eq
 80079b4:	68ec      	ldreq	r4, [r5, #12]
 80079b6:	e7da      	b.n	800796e <_fflush_r+0x22>
 80079b8:	08008954 	.word	0x08008954
 80079bc:	08008974 	.word	0x08008974
 80079c0:	08008934 	.word	0x08008934

080079c4 <std>:
 80079c4:	2300      	movs	r3, #0
 80079c6:	b510      	push	{r4, lr}
 80079c8:	4604      	mov	r4, r0
 80079ca:	e9c0 3300 	strd	r3, r3, [r0]
 80079ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079d2:	6083      	str	r3, [r0, #8]
 80079d4:	8181      	strh	r1, [r0, #12]
 80079d6:	6643      	str	r3, [r0, #100]	; 0x64
 80079d8:	81c2      	strh	r2, [r0, #14]
 80079da:	6183      	str	r3, [r0, #24]
 80079dc:	4619      	mov	r1, r3
 80079de:	2208      	movs	r2, #8
 80079e0:	305c      	adds	r0, #92	; 0x5c
 80079e2:	f7fd fc05 	bl	80051f0 <memset>
 80079e6:	4b05      	ldr	r3, [pc, #20]	; (80079fc <std+0x38>)
 80079e8:	6263      	str	r3, [r4, #36]	; 0x24
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <std+0x3c>)
 80079ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80079ee:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <std+0x40>)
 80079f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <std+0x44>)
 80079f4:	6224      	str	r4, [r4, #32]
 80079f6:	6323      	str	r3, [r4, #48]	; 0x30
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	bf00      	nop
 80079fc:	08007d01 	.word	0x08007d01
 8007a00:	08007d23 	.word	0x08007d23
 8007a04:	08007d5b 	.word	0x08007d5b
 8007a08:	08007d7f 	.word	0x08007d7f

08007a0c <_cleanup_r>:
 8007a0c:	4901      	ldr	r1, [pc, #4]	; (8007a14 <_cleanup_r+0x8>)
 8007a0e:	f000 b8af 	b.w	8007b70 <_fwalk_reent>
 8007a12:	bf00      	nop
 8007a14:	0800794d 	.word	0x0800794d

08007a18 <__sfmoreglue>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	2268      	movs	r2, #104	; 0x68
 8007a1c:	1e4d      	subs	r5, r1, #1
 8007a1e:	4355      	muls	r5, r2
 8007a20:	460e      	mov	r6, r1
 8007a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a26:	f7fd fc57 	bl	80052d8 <_malloc_r>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	b140      	cbz	r0, 8007a40 <__sfmoreglue+0x28>
 8007a2e:	2100      	movs	r1, #0
 8007a30:	e9c0 1600 	strd	r1, r6, [r0]
 8007a34:	300c      	adds	r0, #12
 8007a36:	60a0      	str	r0, [r4, #8]
 8007a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a3c:	f7fd fbd8 	bl	80051f0 <memset>
 8007a40:	4620      	mov	r0, r4
 8007a42:	bd70      	pop	{r4, r5, r6, pc}

08007a44 <__sfp_lock_acquire>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__sfp_lock_acquire+0x8>)
 8007a46:	f7ff bc96 	b.w	8007376 <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	200009e5 	.word	0x200009e5

08007a50 <__sfp_lock_release>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__sfp_lock_release+0x8>)
 8007a52:	f7ff bc91 	b.w	8007378 <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	200009e5 	.word	0x200009e5

08007a5c <__sinit_lock_acquire>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	; (8007a64 <__sinit_lock_acquire+0x8>)
 8007a5e:	f7ff bc8a 	b.w	8007376 <__retarget_lock_acquire_recursive>
 8007a62:	bf00      	nop
 8007a64:	200009e6 	.word	0x200009e6

08007a68 <__sinit_lock_release>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__sinit_lock_release+0x8>)
 8007a6a:	f7ff bc85 	b.w	8007378 <__retarget_lock_release_recursive>
 8007a6e:	bf00      	nop
 8007a70:	200009e6 	.word	0x200009e6

08007a74 <__sinit>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	4604      	mov	r4, r0
 8007a78:	f7ff fff0 	bl	8007a5c <__sinit_lock_acquire>
 8007a7c:	69a3      	ldr	r3, [r4, #24]
 8007a7e:	b11b      	cbz	r3, 8007a88 <__sinit+0x14>
 8007a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a84:	f7ff bff0 	b.w	8007a68 <__sinit_lock_release>
 8007a88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a8c:	6523      	str	r3, [r4, #80]	; 0x50
 8007a8e:	4b13      	ldr	r3, [pc, #76]	; (8007adc <__sinit+0x68>)
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <__sinit+0x6c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	bf04      	itt	eq
 8007a9a:	2301      	moveq	r3, #1
 8007a9c:	61a3      	streq	r3, [r4, #24]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 f820 	bl	8007ae4 <__sfp>
 8007aa4:	6060      	str	r0, [r4, #4]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 f81c 	bl	8007ae4 <__sfp>
 8007aac:	60a0      	str	r0, [r4, #8]
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f818 	bl	8007ae4 <__sfp>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	60e0      	str	r0, [r4, #12]
 8007ab8:	2104      	movs	r1, #4
 8007aba:	6860      	ldr	r0, [r4, #4]
 8007abc:	f7ff ff82 	bl	80079c4 <std>
 8007ac0:	68a0      	ldr	r0, [r4, #8]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	2109      	movs	r1, #9
 8007ac6:	f7ff ff7d 	bl	80079c4 <std>
 8007aca:	68e0      	ldr	r0, [r4, #12]
 8007acc:	2202      	movs	r2, #2
 8007ace:	2112      	movs	r1, #18
 8007ad0:	f7ff ff78 	bl	80079c4 <std>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	61a3      	str	r3, [r4, #24]
 8007ad8:	e7d2      	b.n	8007a80 <__sinit+0xc>
 8007ada:	bf00      	nop
 8007adc:	080085b8 	.word	0x080085b8
 8007ae0:	08007a0d 	.word	0x08007a0d

08007ae4 <__sfp>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	f7ff ffac 	bl	8007a44 <__sfp_lock_acquire>
 8007aec:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <__sfp+0x84>)
 8007aee:	681e      	ldr	r6, [r3, #0]
 8007af0:	69b3      	ldr	r3, [r6, #24]
 8007af2:	b913      	cbnz	r3, 8007afa <__sfp+0x16>
 8007af4:	4630      	mov	r0, r6
 8007af6:	f7ff ffbd 	bl	8007a74 <__sinit>
 8007afa:	3648      	adds	r6, #72	; 0x48
 8007afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	d503      	bpl.n	8007b0c <__sfp+0x28>
 8007b04:	6833      	ldr	r3, [r6, #0]
 8007b06:	b30b      	cbz	r3, 8007b4c <__sfp+0x68>
 8007b08:	6836      	ldr	r6, [r6, #0]
 8007b0a:	e7f7      	b.n	8007afc <__sfp+0x18>
 8007b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b10:	b9d5      	cbnz	r5, 8007b48 <__sfp+0x64>
 8007b12:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <__sfp+0x88>)
 8007b14:	60e3      	str	r3, [r4, #12]
 8007b16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b1a:	6665      	str	r5, [r4, #100]	; 0x64
 8007b1c:	f7ff fc2a 	bl	8007374 <__retarget_lock_init_recursive>
 8007b20:	f7ff ff96 	bl	8007a50 <__sfp_lock_release>
 8007b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b2c:	6025      	str	r5, [r4, #0]
 8007b2e:	61a5      	str	r5, [r4, #24]
 8007b30:	2208      	movs	r2, #8
 8007b32:	4629      	mov	r1, r5
 8007b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b38:	f7fd fb5a 	bl	80051f0 <memset>
 8007b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b44:	4620      	mov	r0, r4
 8007b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b48:	3468      	adds	r4, #104	; 0x68
 8007b4a:	e7d9      	b.n	8007b00 <__sfp+0x1c>
 8007b4c:	2104      	movs	r1, #4
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7ff ff62 	bl	8007a18 <__sfmoreglue>
 8007b54:	4604      	mov	r4, r0
 8007b56:	6030      	str	r0, [r6, #0]
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1d5      	bne.n	8007b08 <__sfp+0x24>
 8007b5c:	f7ff ff78 	bl	8007a50 <__sfp_lock_release>
 8007b60:	230c      	movs	r3, #12
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	e7ee      	b.n	8007b44 <__sfp+0x60>
 8007b66:	bf00      	nop
 8007b68:	080085b8 	.word	0x080085b8
 8007b6c:	ffff0001 	.word	0xffff0001

08007b70 <_fwalk_reent>:
 8007b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	4606      	mov	r6, r0
 8007b76:	4688      	mov	r8, r1
 8007b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b7c:	2700      	movs	r7, #0
 8007b7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b82:	f1b9 0901 	subs.w	r9, r9, #1
 8007b86:	d505      	bpl.n	8007b94 <_fwalk_reent+0x24>
 8007b88:	6824      	ldr	r4, [r4, #0]
 8007b8a:	2c00      	cmp	r4, #0
 8007b8c:	d1f7      	bne.n	8007b7e <_fwalk_reent+0xe>
 8007b8e:	4638      	mov	r0, r7
 8007b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b94:	89ab      	ldrh	r3, [r5, #12]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d907      	bls.n	8007baa <_fwalk_reent+0x3a>
 8007b9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	d003      	beq.n	8007baa <_fwalk_reent+0x3a>
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	47c0      	blx	r8
 8007ba8:	4307      	orrs	r7, r0
 8007baa:	3568      	adds	r5, #104	; 0x68
 8007bac:	e7e9      	b.n	8007b82 <_fwalk_reent+0x12>

08007bae <__swhatbuf_r>:
 8007bae:	b570      	push	{r4, r5, r6, lr}
 8007bb0:	460e      	mov	r6, r1
 8007bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb6:	2900      	cmp	r1, #0
 8007bb8:	b096      	sub	sp, #88	; 0x58
 8007bba:	4614      	mov	r4, r2
 8007bbc:	461d      	mov	r5, r3
 8007bbe:	da08      	bge.n	8007bd2 <__swhatbuf_r+0x24>
 8007bc0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	602a      	str	r2, [r5, #0]
 8007bc8:	061a      	lsls	r2, r3, #24
 8007bca:	d410      	bmi.n	8007bee <__swhatbuf_r+0x40>
 8007bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd0:	e00e      	b.n	8007bf0 <__swhatbuf_r+0x42>
 8007bd2:	466a      	mov	r2, sp
 8007bd4:	f000 f8fa 	bl	8007dcc <_fstat_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dbf1      	blt.n	8007bc0 <__swhatbuf_r+0x12>
 8007bdc:	9a01      	ldr	r2, [sp, #4]
 8007bde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007be2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007be6:	425a      	negs	r2, r3
 8007be8:	415a      	adcs	r2, r3
 8007bea:	602a      	str	r2, [r5, #0]
 8007bec:	e7ee      	b.n	8007bcc <__swhatbuf_r+0x1e>
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	b016      	add	sp, #88	; 0x58
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}

08007bf8 <__smakebuf_r>:
 8007bf8:	898b      	ldrh	r3, [r1, #12]
 8007bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bfc:	079d      	lsls	r5, r3, #30
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	d507      	bpl.n	8007c14 <__smakebuf_r+0x1c>
 8007c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	6163      	str	r3, [r4, #20]
 8007c10:	b002      	add	sp, #8
 8007c12:	bd70      	pop	{r4, r5, r6, pc}
 8007c14:	ab01      	add	r3, sp, #4
 8007c16:	466a      	mov	r2, sp
 8007c18:	f7ff ffc9 	bl	8007bae <__swhatbuf_r>
 8007c1c:	9900      	ldr	r1, [sp, #0]
 8007c1e:	4605      	mov	r5, r0
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7fd fb59 	bl	80052d8 <_malloc_r>
 8007c26:	b948      	cbnz	r0, 8007c3c <__smakebuf_r+0x44>
 8007c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2c:	059a      	lsls	r2, r3, #22
 8007c2e:	d4ef      	bmi.n	8007c10 <__smakebuf_r+0x18>
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	f043 0302 	orr.w	r3, r3, #2
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	e7e3      	b.n	8007c04 <__smakebuf_r+0xc>
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <__smakebuf_r+0x7c>)
 8007c3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	6020      	str	r0, [r4, #0]
 8007c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	6163      	str	r3, [r4, #20]
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	6120      	str	r0, [r4, #16]
 8007c52:	b15b      	cbz	r3, 8007c6c <__smakebuf_r+0x74>
 8007c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f000 f8c9 	bl	8007df0 <_isatty_r>
 8007c5e:	b128      	cbz	r0, 8007c6c <__smakebuf_r+0x74>
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	f023 0303 	bic.w	r3, r3, #3
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	81a3      	strh	r3, [r4, #12]
 8007c6c:	89a0      	ldrh	r0, [r4, #12]
 8007c6e:	4305      	orrs	r5, r0
 8007c70:	81a5      	strh	r5, [r4, #12]
 8007c72:	e7cd      	b.n	8007c10 <__smakebuf_r+0x18>
 8007c74:	08007a0d 	.word	0x08007a0d

08007c78 <_raise_r>:
 8007c78:	291f      	cmp	r1, #31
 8007c7a:	b538      	push	{r3, r4, r5, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	460d      	mov	r5, r1
 8007c80:	d904      	bls.n	8007c8c <_raise_r+0x14>
 8007c82:	2316      	movs	r3, #22
 8007c84:	6003      	str	r3, [r0, #0]
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c8e:	b112      	cbz	r2, 8007c96 <_raise_r+0x1e>
 8007c90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c94:	b94b      	cbnz	r3, 8007caa <_raise_r+0x32>
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 f830 	bl	8007cfc <_getpid_r>
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ca6:	f000 b817 	b.w	8007cd8 <_kill_r>
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d00a      	beq.n	8007cc4 <_raise_r+0x4c>
 8007cae:	1c59      	adds	r1, r3, #1
 8007cb0:	d103      	bne.n	8007cba <_raise_r+0x42>
 8007cb2:	2316      	movs	r3, #22
 8007cb4:	6003      	str	r3, [r0, #0]
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	e7e7      	b.n	8007c8a <_raise_r+0x12>
 8007cba:	2400      	movs	r4, #0
 8007cbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	4798      	blx	r3
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	e7e0      	b.n	8007c8a <_raise_r+0x12>

08007cc8 <raise>:
 8007cc8:	4b02      	ldr	r3, [pc, #8]	; (8007cd4 <raise+0xc>)
 8007cca:	4601      	mov	r1, r0
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	f7ff bfd3 	b.w	8007c78 <_raise_r>
 8007cd2:	bf00      	nop
 8007cd4:	200006a0 	.word	0x200006a0

08007cd8 <_kill_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d07      	ldr	r5, [pc, #28]	; (8007cf8 <_kill_r+0x20>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	f000 f8d7 	bl	8007e98 <_kill>
 8007cea:	1c43      	adds	r3, r0, #1
 8007cec:	d102      	bne.n	8007cf4 <_kill_r+0x1c>
 8007cee:	682b      	ldr	r3, [r5, #0]
 8007cf0:	b103      	cbz	r3, 8007cf4 <_kill_r+0x1c>
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	bf00      	nop
 8007cf8:	200009e0 	.word	0x200009e0

08007cfc <_getpid_r>:
 8007cfc:	f000 b8bc 	b.w	8007e78 <_getpid>

08007d00 <__sread>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	460c      	mov	r4, r1
 8007d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d08:	f000 f894 	bl	8007e34 <_read_r>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	bfab      	itete	ge
 8007d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d12:	89a3      	ldrhlt	r3, [r4, #12]
 8007d14:	181b      	addge	r3, r3, r0
 8007d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d1a:	bfac      	ite	ge
 8007d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d1e:	81a3      	strhlt	r3, [r4, #12]
 8007d20:	bd10      	pop	{r4, pc}

08007d22 <__swrite>:
 8007d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d26:	461f      	mov	r7, r3
 8007d28:	898b      	ldrh	r3, [r1, #12]
 8007d2a:	05db      	lsls	r3, r3, #23
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	4616      	mov	r6, r2
 8007d32:	d505      	bpl.n	8007d40 <__swrite+0x1e>
 8007d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d38:	2302      	movs	r3, #2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f000 f868 	bl	8007e10 <_lseek_r>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d4a:	81a3      	strh	r3, [r4, #12]
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	4628      	mov	r0, r5
 8007d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	f000 b817 	b.w	8007d88 <_write_r>

08007d5a <__sseek>:
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d62:	f000 f855 	bl	8007e10 <_lseek_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	bf15      	itete	ne
 8007d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d76:	81a3      	strheq	r3, [r4, #12]
 8007d78:	bf18      	it	ne
 8007d7a:	81a3      	strhne	r3, [r4, #12]
 8007d7c:	bd10      	pop	{r4, pc}

08007d7e <__sclose>:
 8007d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d82:	f000 b813 	b.w	8007dac <_close_r>
	...

08007d88 <_write_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d07      	ldr	r5, [pc, #28]	; (8007da8 <_write_r+0x20>)
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	4608      	mov	r0, r1
 8007d90:	4611      	mov	r1, r2
 8007d92:	2200      	movs	r2, #0
 8007d94:	602a      	str	r2, [r5, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f000 f896 	bl	8007ec8 <_write>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_write_r+0x1e>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_write_r+0x1e>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	200009e0 	.word	0x200009e0

08007dac <_close_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	4d06      	ldr	r5, [pc, #24]	; (8007dc8 <_close_r+0x1c>)
 8007db0:	2300      	movs	r3, #0
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	602b      	str	r3, [r5, #0]
 8007db8:	f000 f84e 	bl	8007e58 <_close>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_close_r+0x1a>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_close_r+0x1a>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	200009e0 	.word	0x200009e0

08007dcc <_fstat_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d07      	ldr	r5, [pc, #28]	; (8007dec <_fstat_r+0x20>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	f000 f845 	bl	8007e68 <_fstat>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d102      	bne.n	8007de8 <_fstat_r+0x1c>
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	b103      	cbz	r3, 8007de8 <_fstat_r+0x1c>
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
 8007dea:	bf00      	nop
 8007dec:	200009e0 	.word	0x200009e0

08007df0 <_isatty_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4d06      	ldr	r5, [pc, #24]	; (8007e0c <_isatty_r+0x1c>)
 8007df4:	2300      	movs	r3, #0
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f000 f844 	bl	8007e88 <_isatty>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_isatty_r+0x1a>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_isatty_r+0x1a>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	200009e0 	.word	0x200009e0

08007e10 <_lseek_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d07      	ldr	r5, [pc, #28]	; (8007e30 <_lseek_r+0x20>)
 8007e14:	4604      	mov	r4, r0
 8007e16:	4608      	mov	r0, r1
 8007e18:	4611      	mov	r1, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f000 f842 	bl	8007ea8 <_lseek>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_lseek_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_lseek_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	200009e0 	.word	0x200009e0

08007e34 <_read_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_read_r+0x20>)
 8007e38:	4604      	mov	r4, r0
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f000 f838 	bl	8007eb8 <_read>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_read_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_read_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	200009e0 	.word	0x200009e0

08007e58 <_close>:
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <_close+0xc>)
 8007e5a:	2258      	movs	r2, #88	; 0x58
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e62:	4770      	bx	lr
 8007e64:	200009e0 	.word	0x200009e0

08007e68 <_fstat>:
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <_fstat+0xc>)
 8007e6a:	2258      	movs	r2, #88	; 0x58
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e72:	4770      	bx	lr
 8007e74:	200009e0 	.word	0x200009e0

08007e78 <_getpid>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <_getpid+0xc>)
 8007e7a:	2258      	movs	r2, #88	; 0x58
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e82:	4770      	bx	lr
 8007e84:	200009e0 	.word	0x200009e0

08007e88 <_isatty>:
 8007e88:	4b02      	ldr	r3, [pc, #8]	; (8007e94 <_isatty+0xc>)
 8007e8a:	2258      	movs	r2, #88	; 0x58
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	2000      	movs	r0, #0
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	200009e0 	.word	0x200009e0

08007e98 <_kill>:
 8007e98:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <_kill+0xc>)
 8007e9a:	2258      	movs	r2, #88	; 0x58
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea2:	4770      	bx	lr
 8007ea4:	200009e0 	.word	0x200009e0

08007ea8 <_lseek>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	; (8007eb4 <_lseek+0xc>)
 8007eaa:	2258      	movs	r2, #88	; 0x58
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb2:	4770      	bx	lr
 8007eb4:	200009e0 	.word	0x200009e0

08007eb8 <_read>:
 8007eb8:	4b02      	ldr	r3, [pc, #8]	; (8007ec4 <_read+0xc>)
 8007eba:	2258      	movs	r2, #88	; 0x58
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec2:	4770      	bx	lr
 8007ec4:	200009e0 	.word	0x200009e0

08007ec8 <_write>:
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <_write+0xc>)
 8007eca:	2258      	movs	r2, #88	; 0x58
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed2:	4770      	bx	lr
 8007ed4:	200009e0 	.word	0x200009e0

08007ed8 <_exit>:
 8007ed8:	e7fe      	b.n	8007ed8 <_exit>
	...

08007edc <_init>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr

08007ee8 <_fini>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr
